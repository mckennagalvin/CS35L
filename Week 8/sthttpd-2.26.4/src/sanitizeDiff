--- thttpd-stackprot.s	2014-11-29 23:02:41.597540000 -0800
+++ thttpd-sanitize.s	2014-11-30 13:18:33.176610000 -0800
@@ -1,6077 +1,25187 @@
 	.file	"thttpd.c"
-	.local	argv0
-	.comm	argv0,4,4
-	.local	debug
-	.comm	debug,4,4
-	.local	port
-	.comm	port,2,2
-	.local	dir
-	.comm	dir,4,4
-	.local	data_dir
-	.comm	data_dir,4,4
-	.local	do_chroot
-	.comm	do_chroot,4,4
-	.local	no_log
-	.comm	no_log,4,4
-	.local	no_symlink_check
-	.comm	no_symlink_check,4,4
-	.local	do_vhost
-	.comm	do_vhost,4,4
-	.local	do_global_passwd
-	.comm	do_global_passwd,4,4
-	.local	cgi_pattern
-	.comm	cgi_pattern,4,4
-	.local	cgi_limit
-	.comm	cgi_limit,4,4
-	.local	url_pattern
-	.comm	url_pattern,4,4
-	.local	no_empty_referers
-	.comm	no_empty_referers,4,4
-	.local	local_pattern
-	.comm	local_pattern,4,4
-	.local	logfile
-	.comm	logfile,4,4
-	.local	throttlefile
-	.comm	throttlefile,4,4
-	.local	hostname
-	.comm	hostname,4,4
-	.local	pidfile
-	.comm	pidfile,4,4
-	.local	user
-	.comm	user,4,4
-	.local	charset
-	.comm	charset,4,4
-	.local	p3p
-	.comm	p3p,4,4
-	.local	max_age
-	.comm	max_age,4,4
-	.local	throttles
-	.comm	throttles,4,4
-	.local	numthrottles
-	.comm	numthrottles,4,4
-	.local	maxthrottles
-	.comm	maxthrottles,4,4
-	.local	connects
-	.comm	connects,4,4
-	.local	num_connects
-	.comm	num_connects,4,4
-	.local	max_connects
-	.comm	max_connects,4,4
-	.local	first_free_connect
-	.comm	first_free_connect,4,4
-	.local	httpd_conn_count
-	.comm	httpd_conn_count,4,4
-	.local	hs
-	.comm	hs,4,4
-	.globl	terminate
-	.bss
-	.align 4
-	.type	terminate, @object
-	.size	terminate, 4
-terminate:
-	.zero	4
-	.comm	start_time,4,4
-	.comm	stats_time,4,4
-	.comm	stats_connections,4,4
-	.comm	stats_bytes,4,4
-	.comm	stats_simultaneous,4,4
-	.local	got_hup
-	.comm	got_hup,4,4
-	.local	got_usr1
-	.comm	got_usr1,4,4
-	.local	watchdog_flag
-	.comm	watchdog_flag,4,4
-	.section	.rodata
-.LC0:
-	.string	"exiting due to signal %d"
 	.text
-	.type	handle_term, @function
-handle_term:
-.LFB0:
+.Ltext0:
+	.section	.text.unlikely,"ax",@progbits
+.LCOLDB0:
+	.text
+.LHOTB0:
+	.p2align 4,,15
+	.section	.text.unlikely
+.Ltext_cold0:
+	.text
+	.type	handle_hup, @function
+handle_hup:
+.LFB42:
+	.file 1 "thttpd.c"
+	.loc 1 238 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	call	shut_down
-	subl	$4, %esp
-	pushl	8(%ebp)
-	pushl	$.LC0
-	pushl	$5
-	call	syslog
-	addl	$16, %esp
-	call	closelog
-	subl	$12, %esp
-	pushl	$1
-	call	exit
+.LVL0:
+	.loc 1 247 0
+	movl	$1, got_hup(%rip)
+	ret
 	.cfi_endproc
-.LFE0:
-	.size	handle_term, .-handle_term
-	.section	.rodata
+.LFE42:
+	.size	handle_hup, .-handle_hup
+	.section	.text.unlikely
+.LCOLDE0:
+	.text
+.LHOTE0:
+	.section	.rodata.str1.8,"aMS",@progbits,1
+	.align 8
 .LC1:
-	.string	"child wait - %m"
+	.string	"throttle #%d '%.80s' rate %ld greatly exceeding limit %ld; %d sending"
+	.align 8
+.LC2:
+	.string	"throttle #%d '%.80s' rate %ld exceeding limit %ld; %d sending"
+	.align 8
+.LC3:
+	.string	"throttle #%d '%.80s' rate %ld lower than minimum %ld; %d sending"
+	.section	.text.unlikely
+.LCOLDB4:
 	.text
-	.type	handle_chld, @function
-handle_chld:
-.LFB1:
+.LHOTB4:
+	.p2align 4,,15
+	.type	update_throttles, @function
+update_throttles:
+.LFB63:
+	.loc 1 1929 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	call	__errno_location
-	movl	(%eax), %eax
-	movl	%eax, -16(%ebp)
-.L10:
-	subl	$4, %esp
-	pushl	$1
-	leal	-20(%ebp), %eax
-	pushl	%eax
-	pushl	$-1
-	call	waitpid
-	addl	$16, %esp
-	movl	%eax, -12(%ebp)
-	cmpl	$0, -12(%ebp)
-	jne	.L3
-	jmp	.L4
-.L3:
-	cmpl	$0, -12(%ebp)
-	jns	.L5
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$4, %eax
-	je	.L6
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$11, %eax
-	jne	.L7
-.L6:
-	jmp	.L8
+	.loc 1 1938 0
+	movl	numthrottles(%rip), %r8d
+	.loc 1 1929 0
+	pushq	%r12
+	.cfi_def_cfa_offset 16
+	.cfi_offset 12, -16
+	.loc 1 1940 0
+	movabsq	$6148914691236517206, %r12
+	.loc 1 1929 0
+	pushq	%rbp
+	.cfi_def_cfa_offset 24
+	.cfi_offset 6, -24
+	.loc 1 1938 0
+	xorl	%ebp, %ebp
+	.loc 1 1929 0
+	pushq	%rbx
+	.cfi_def_cfa_offset 32
+	.cfi_offset 3, -32
+	.loc 1 1938 0
+	xorl	%ebx, %ebx
+	testl	%r8d, %r8d
+	jg	.L21
+	jmp	.L9
+	.p2align 4,,10
+	.p2align 3
 .L7:
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$10, %eax
-	je	.L9
-	subl	$8, %esp
-	pushl	$.LC1
-	pushl	$3
+	.loc 1 1938 0 is_stmt 0 discriminator 2
+	addl	$1, %ebx
+	addq	$48, %rbp
+	cmpl	%ebx, numthrottles(%rip)
+	jle	.L9
+.L21:
+	.loc 1 1940 0 is_stmt 1
+	movq	%rbp, %rcx
+	addq	throttles(%rip), %rcx
+	movq	32(%rcx), %rax
+	movq	24(%rcx), %rdx
+	.loc 1 1943 0
+	movq	8(%rcx), %r9
+	.loc 1 1941 0
+	movq	$0, 32(%rcx)
+	.loc 1 1940 0
+	movq	%rax, %rsi
+	shrq	$63, %rsi
+	addq	%rsi, %rax
+	sarq	%rax
+	leaq	(%rax,%rdx,2), %rsi
+	movq	%rsi, %rax
+	sarq	$63, %rsi
+	imulq	%r12
+	subq	%rsi, %rdx
+	.loc 1 1943 0
+	cmpq	%r9, %rdx
+	.loc 1 1940 0
+	movq	%rdx, %r8
+	movq	%rdx, 24(%rcx)
+	.loc 1 1943 0
+	jle	.L6
+	.loc 1 1943 0 is_stmt 0 discriminator 1
+	movl	40(%rcx), %eax
+	testl	%eax, %eax
+	je	.L7
+	.loc 1 1945 0 is_stmt 1
+	leaq	(%r9,%r9), %rdx
+	cmpq	%rdx, %r8
+	jle	.L8
+	.loc 1 1946 0
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 40
+	movq	(%rcx), %rcx
+	movl	%ebx, %edx
+	pushq	%rax
+	.cfi_def_cfa_offset 48
+	movl	$.LC1, %esi
+	movl	$5, %edi
+.L27:
+	.loc 1 1948 0
+	xorl	%eax, %eax
+	call	syslog
+	movq	%rbp, %rcx
+	addq	throttles(%rip), %rcx
+	popq	%rsi
+	.cfi_def_cfa_offset 40
+	popq	%rdi
+	.cfi_def_cfa_offset 32
+	movq	24(%rcx), %r8
+.L6:
+	.loc 1 1950 0
+	movq	16(%rcx), %r9
+	cmpq	%r8, %r9
+	jle	.L7
+	.loc 1 1950 0 is_stmt 0 discriminator 1
+	movl	40(%rcx), %eax
+	testl	%eax, %eax
+	je	.L7
+	.loc 1 1952 0 is_stmt 1
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 40
+	movq	(%rcx), %rcx
+	movl	%ebx, %edx
+	pushq	%rax
+	.cfi_def_cfa_offset 48
+	movl	$.LC3, %esi
+	xorl	%eax, %eax
+	movl	$5, %edi
+	.loc 1 1938 0
+	addl	$1, %ebx
+	addq	$48, %rbp
+	.loc 1 1952 0
 	call	syslog
-	addl	$16, %esp
-	jmp	.L4
+	.loc 1 1938 0
+	cmpl	%ebx, numthrottles(%rip)
+	.loc 1 1952 0
+	popq	%rax
+	.cfi_def_cfa_offset 40
+	popq	%rdx
+	.cfi_def_cfa_offset 32
+	.loc 1 1938 0
+	jg	.L21
+	.p2align 4,,10
+	.p2align 3
 .L9:
-	jmp	.L4
-.L5:
-	movl	hs, %eax
-	testl	%eax, %eax
-	je	.L8
-	movl	hs, %eax
-	movl	20(%eax), %edx
-	subl	$1, %edx
-	movl	%edx, 20(%eax)
-	movl	hs, %eax
-	movl	20(%eax), %eax
-	testl	%eax, %eax
-	jns	.L8
-	movl	hs, %eax
-	movl	$0, 20(%eax)
-.L8:
-	jmp	.L10
-.L4:
-	call	__errno_location
-	movl	%eax, %edx
-	movl	-16(%ebp), %eax
-	movl	%eax, (%edx)
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
+	.loc 1 1959 0
+	movl	max_connects(%rip), %eax
+	testl	%eax, %eax
+	jle	.L2
+	subl	$1, %eax
+	movq	connects(%rip), %rdi
+	movq	throttles(%rip), %r11
+	leaq	9(%rax,%rax,8), %rbx
+	salq	$4, %rbx
+	addq	%rdi, %rbx
+	jmp	.L11
+	.p2align 4,,10
+	.p2align 3
+.L12:
+	addq	$144, %rdi
+	cmpq	%rbx, %rdi
+	je	.L2
+.L11:
+	.loc 1 1962 0
+	movl	(%rdi), %eax
+	subl	$2, %eax
+	cmpl	$1, %eax
+	ja	.L12
+	.loc 1 1965 0
+	movl	56(%rdi), %eax
+	.loc 1 1964 0
+	movq	$-1, 64(%rdi)
+	.loc 1 1965 0
+	testl	%eax, %eax
+	jle	.L12
+	subl	$1, %eax
+	leaq	16(%rdi), %rsi
+	movq	$-1, %r8
+	leaq	20(%rdi,%rax,4), %r10
+	jmp	.L15
+	.p2align 4,,10
+	.p2align 3
+.L31:
+	movq	64(%rdi), %r8
+.L15:
+	.loc 1 1968 0
+	movslq	(%rsi), %rax
+	leaq	(%rax,%rax,2), %rcx
+	salq	$4, %rcx
+	addq	%r11, %rcx
+	movq	8(%rcx), %rax
+	movslq	40(%rcx), %r9
+	cqto
+	idivq	%r9
+	.loc 1 1969 0
+	cmpq	$-1, %r8
+	je	.L28
+	.loc 1 1972 0
+	cmpq	%rax, %r8
+	cmovle	%r8, %rax
+.L28:
+	addq	$4, %rsi
+	movq	%rax, 64(%rdi)
+	.loc 1 1965 0
+	cmpq	%r10, %rsi
+	jne	.L31
+	addq	$144, %rdi
+	.loc 1 1959 0
+	cmpq	%rbx, %rdi
+	jne	.L11
+.L2:
+	.loc 1 1976 0
+	popq	%rbx
+	.cfi_remember_state
+	.cfi_def_cfa_offset 24
+	popq	%rbp
+	.cfi_def_cfa_offset 16
+	popq	%r12
+	.cfi_def_cfa_offset 8
 	ret
+	.p2align 4,,10
+	.p2align 3
+.L8:
+	.cfi_restore_state
+	.loc 1 1948 0
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 40
+	movq	(%rcx), %rcx
+	movl	%ebx, %edx
+	pushq	%rax
+	.cfi_def_cfa_offset 48
+	movl	$.LC2, %esi
+	movl	$6, %edi
+	jmp	.L27
 	.cfi_endproc
-.LFE1:
-	.size	handle_chld, .-handle_chld
-	.type	handle_hup, @function
-handle_hup:
-.LFB2:
+.LFE63:
+	.size	update_throttles, .-update_throttles
+	.section	.text.unlikely
+.LCOLDE4:
+	.text
+.LHOTE4:
+	.section	.rodata.str1.8
+	.align 8
+.LC5:
+	.string	"usage:  %s [-C configfile] [-p port] [-d dir] [-r|-nor] [-dd data_dir] [-s|-nos] [-v|-nov] [-g|-nog] [-u user] [-c cgipat] [-t throttles] [-h host] [-l logfile] [-i pidfile] [-T charset] [-P P3P] [-M maxage] [-V] [-D]\n"
+	.section	.text.unlikely
+.LCOLDB6:
+.LHOTB6:
+	.type	usage, @function
+usage:
+.LFB49:
+	.loc 1 986 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	call	__errno_location
-	movl	(%eax), %eax
-	movl	%eax, -12(%ebp)
-	movl	$1, got_hup
-	call	__errno_location
-	movl	%eax, %edx
-	movl	-12(%ebp), %eax
-	movl	%eax, (%edx)
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
+	pushq	%rax
+	.cfi_def_cfa_offset 16
+	.loc 1 987 0
+	movq	stderr(%rip), %rdi
+	movl	$.LC5, %esi
+	movq	argv0(%rip), %rdx
+	xorl	%eax, %eax
+	call	fprintf
+.LVL1:
+	.loc 1 990 0
+	movl	$1, %edi
+	call	exit
+.LVL2:
 	.cfi_endproc
-.LFE2:
-	.size	handle_hup, .-handle_hup
-	.section	.rodata
-.LC2:
-	.string	"exiting"
+.LFE49:
+	.size	usage, .-usage
+.LCOLDE6:
+.LHOTE6:
+.LCOLDB7:
 	.text
-	.type	handle_usr1, @function
-handle_usr1:
-.LFB3:
+.LHOTB7:
+	.p2align 4,,15
+	.type	wakeup_connection, @function
+wakeup_connection:
+.LFB68:
+	.loc 1 2101 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	movl	num_connects, %eax
-	testl	%eax, %eax
-	jne	.L13
-	call	shut_down
-	subl	$8, %esp
-	pushl	$.LC2
-	pushl	$5
+.LVL3:
+	.loc 1 2106 0
+	cmpl	$3, (%rdi)
+	.loc 1 2105 0
+	movq	$0, 96(%rdi)
+	.loc 1 2106 0
+	je	.L36
+	rep; ret
+	.p2align 4,,10
+	.p2align 3
+.L36:
+	.loc 1 2109 0
+	movq	8(%rdi), %rax
+	.loc 1 2108 0
+	movl	$2, (%rdi)
+	.loc 1 2109 0
+	movq	%rdi, %rsi
+.LVL4:
+	movl	$1, %edx
+	movl	704(%rax), %eax
+	movl	%eax, %edi
+.LVL5:
+	jmp	fdwatch_add_fd
+.LVL6:
+	.cfi_endproc
+.LFE68:
+	.size	wakeup_connection, .-wakeup_connection
+	.section	.text.unlikely
+.LCOLDE7:
+	.text
+.LHOTE7:
+	.section	.rodata.str1.8
+	.align 8
+.LC9:
+	.string	"up %ld seconds, stats for %ld seconds:"
+	.align 8
+.LC10:
+	.string	"  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated"
+	.section	.text.unlikely
+.LCOLDB11:
+	.text
+.LHOTB11:
+	.p2align 4,,15
+	.type	logstats, @function
+logstats:
+.LFB72:
+	.loc 1 2145 0
+	.cfi_startproc
+.LVL7:
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset 3, -16
+	subq	$16, %rsp
+	.cfi_def_cfa_offset 32
+	.loc 1 2150 0
+	testq	%rdi, %rdi
+	je	.L44
+.L38:
+	.loc 1 2155 0
+	movq	(%rdi), %rax
+.LVL8:
+	.loc 1 2156 0
+	movq	%rax, %rdx
+	.loc 1 2158 0
+	movq	%rax, %rbx
+	.loc 1 2156 0
+	subq	start_time(%rip), %rdx
+.LVL9:
+	.loc 1 2158 0
+	subq	stats_time(%rip), %rbx
+.LVL10:
+	.loc 1 2160 0
+	movq	%rax, stats_time(%rip)
+	.loc 1 2158 0
+	jne	.L45
+.LVL11:
+	.loc 1 2161 0
+	movl	$1, %ecx
+	movl	$.LC9, %esi
+	movl	$6, %edi
+.LVL12:
+	xorl	%eax, %eax
+.LVL13:
+	.loc 1 2159 0
+	movl	$1, %ebx
+	.loc 1 2161 0
 	call	syslog
-	addl	$16, %esp
-	call	closelog
-	subl	$12, %esp
-	pushl	$0
-	call	exit
-.L13:
-	movl	$1, got_usr1
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
+.LVL14:
+	movss	.LC8(%rip), %xmm2
+.LVL15:
+.L41:
+.LBB188:
+.LBB189:
+	.loc 1 2181 0
+	movq	stats_bytes(%rip), %r8
+	.loc 1 2179 0
+	movq	stats_connections(%rip), %rdx
+	.loc 1 2177 0
+	movl	$.LC10, %esi
+	.loc 1 2181 0
+	pxor	%xmm1, %xmm1
+	.loc 1 2177 0
+	movl	httpd_conn_count(%rip), %r9d
+	.loc 1 2179 0
+	pxor	%xmm0, %xmm0
+	.loc 1 2177 0
+	movl	stats_simultaneous(%rip), %ecx
+	movl	$6, %edi
+	movl	$2, %eax
+	.loc 1 2181 0
+	cvtsi2ssq	%r8, %xmm1
+	.loc 1 2179 0
+	cvtsi2ssq	%rdx, %xmm0
+	.loc 1 2181 0
+	divss	%xmm2, %xmm1
+	.loc 1 2179 0
+	divss	%xmm2, %xmm0
+	.loc 1 2177 0
+	cvtss2sd	%xmm1, %xmm1
+	cvtss2sd	%xmm0, %xmm0
+	call	syslog
+.LVL16:
+.L40:
+.LBE189:
+.LBE188:
+	.loc 1 2165 0
+	movq	%rbx, %rdi
+.LBB192:
+.LBB190:
+	.loc 1 2182 0
+	movq	$0, stats_connections(%rip)
+	.loc 1 2183 0
+	movq	$0, stats_bytes(%rip)
+	.loc 1 2184 0
+	movl	$0, stats_simultaneous(%rip)
+.LBE190:
+.LBE192:
+	.loc 1 2165 0
+	call	httpd_logstats
+.LVL17:
+	.loc 1 2166 0
+	movq	%rbx, %rdi
+	call	mmc_logstats
+.LVL18:
+	.loc 1 2167 0
+	movq	%rbx, %rdi
+	call	fdwatch_logstats
+.LVL19:
+	.loc 1 2168 0
+	movq	%rbx, %rdi
+	call	tmr_logstats
+.LVL20:
+	.loc 1 2169 0
+	addq	$16, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 16
+	popq	%rbx
+	.cfi_def_cfa_offset 8
+.LVL21:
 	ret
+.LVL22:
+	.p2align 4,,10
+	.p2align 3
+.L45:
+	.cfi_restore_state
+	.loc 1 2161 0
+	xorl	%eax, %eax
+.LVL23:
+	movq	%rbx, %rcx
+	movl	$.LC9, %esi
+	movl	$6, %edi
+.LVL24:
+	call	syslog
+.LVL25:
+.LBB193:
+.LBB191:
+	.loc 1 2176 0
+	testq	%rbx, %rbx
+	jle	.L40
+	pxor	%xmm2, %xmm2
+	cvtsi2ssq	%rbx, %xmm2
+	jmp	.L41
+.LVL26:
+	.p2align 4,,10
+	.p2align 3
+.L44:
+.LBE191:
+.LBE193:
+	.loc 1 2152 0
+	movq	%rsp, %rdi
+.LVL27:
+	xorl	%esi, %esi
+	call	gettimeofday
+.LVL28:
+	.loc 1 2153 0
+	movq	%rsp, %rdi
+	jmp	.L38
 	.cfi_endproc
-.LFE3:
-	.size	handle_usr1, .-handle_usr1
+.LFE72:
+	.size	logstats, .-logstats
+	.section	.text.unlikely
+.LCOLDE11:
+	.text
+.LHOTE11:
+	.section	.text.unlikely
+.LCOLDB12:
+	.text
+.LHOTB12:
+	.p2align 4,,15
+	.type	show_stats, @function
+show_stats:
+.LFB71:
+	.loc 1 2136 0
+	.cfi_startproc
+.LVL29:
+	.loc 1 2137 0
+	movq	%rsi, %rdi
+.LVL30:
+	jmp	logstats
+.LVL31:
+	.cfi_endproc
+.LFE71:
+	.size	show_stats, .-show_stats
+	.section	.text.unlikely
+.LCOLDE12:
+	.text
+.LHOTE12:
+	.section	.text.unlikely
+.LCOLDB13:
+	.text
+.LHOTB13:
+	.p2align 4,,15
 	.type	handle_usr2, @function
 handle_usr2:
-.LFB4:
+.LFB44:
+	.loc 1 282 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
+.LVL32:
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	.cfi_offset 6, -16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	.cfi_offset 3, -24
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 32
+	.loc 1 283 0
 	call	__errno_location
-	movl	(%eax), %eax
-	movl	%eax, -12(%ebp)
-	subl	$12, %esp
-	pushl	$0
+.LVL33:
+	movl	(%rax), %ebp
+.LVL34:
+	movq	%rax, %rbx
+	.loc 1 290 0
+	xorl	%edi, %edi
 	call	logstats
-	addl	$16, %esp
-	call	__errno_location
-	movl	%eax, %edx
-	movl	-12(%ebp), %eax
-	movl	%eax, (%edx)
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
+.LVL35:
+	.loc 1 293 0
+	movl	%ebp, (%rbx)
+	.loc 1 294 0
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+.LVL36:
 	ret
 	.cfi_endproc
-.LFE4:
+.LFE44:
 	.size	handle_usr2, .-handle_usr2
-	.section	.rodata
-.LC3:
-	.string	"/tmp"
+	.section	.text.unlikely
+.LCOLDE13:
 	.text
-	.type	handle_alrm, @function
-handle_alrm:
-.LFB5:
+.LHOTE13:
+	.section	.text.unlikely
+.LCOLDB14:
+	.text
+.LHOTB14:
+	.p2align 4,,15
+	.type	occasional, @function
+occasional:
+.LFB70:
+	.loc 1 2126 0
 	.cfi_startproc
-	pushl	%ebp
+.LVL37:
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 16
+	.loc 1 2127 0
+	movq	%rsi, %rdi
+.LVL38:
+	call	mmc_cleanup
+.LVL39:
+	.loc 1 2128 0
+	call	tmr_cleanup
+.LVL40:
+	.loc 1 2129 0
+	movl	$1, watchdog_flag(%rip)
+	.loc 1 2130 0
+	addq	$8, %rsp
 	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	call	__errno_location
-	movl	(%eax), %eax
-	movl	%eax, -12(%ebp)
-	movl	watchdog_flag, %eax
-	testl	%eax, %eax
-	jne	.L16
-	subl	$12, %esp
-	pushl	$.LC3
-	call	chdir
-	addl	$16, %esp
-	call	abort
-.L16:
-	movl	$0, watchdog_flag
-	subl	$12, %esp
-	pushl	$360
-	call	alarm
-	addl	$16, %esp
-	call	__errno_location
-	movl	%eax, %edx
-	movl	-12(%ebp), %eax
-	movl	%eax, (%edx)
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
 	ret
 	.cfi_endproc
-.LFE5:
-	.size	handle_alrm, .-handle_alrm
-	.section	.rodata
-.LC4:
-	.string	"-"
-.LC5:
-	.string	"re-opening logfile"
-.LC6:
-	.string	"a"
-.LC7:
-	.string	"re-opening %.80s - %m"
+.LFE70:
+	.size	occasional, .-occasional
+	.section	.text.unlikely
+.LCOLDE14:
+	.text
+.LHOTE14:
+	.section	.rodata.str1.1,"aMS",@progbits,1
+.LC15:
+	.string	"child wait - %m"
+	.section	.text.unlikely
+.LCOLDB16:
 	.text
-	.type	re_open_logfile, @function
-re_open_logfile:
-.LFB6:
+.LHOTB16:
+	.p2align 4,,15
+	.type	handle_chld, @function
+handle_chld:
+.LFB41:
+	.loc 1 185 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	movl	no_log, %eax
-	testl	%eax, %eax
-	jne	.L18
-	movl	hs, %eax
-	testl	%eax, %eax
-	jne	.L19
-.L18:
-	jmp	.L17
-.L19:
-	movl	logfile, %eax
-	testl	%eax, %eax
-	je	.L17
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	$.LC4
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	je	.L17
-	subl	$8, %esp
-	pushl	$.LC5
-	pushl	$5
-	call	syslog
-	addl	$16, %esp
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	$.LC6
-	pushl	%eax
-	call	fopen
-	addl	$16, %esp
-	movl	%eax, -12(%ebp)
-	cmpl	$0, -12(%ebp)
-	jne	.L21
-	movl	logfile, %eax
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC7
-	pushl	$2
+.LVL41:
+	pushq	%r12
+	.cfi_def_cfa_offset 16
+	.cfi_offset 12, -16
+	pushq	%rbp
+	.cfi_def_cfa_offset 24
+	.cfi_offset 6, -24
+	.loc 1 224 0
+	xorl	%ebp, %ebp
+	.loc 1 185 0
+	pushq	%rbx
+	.cfi_def_cfa_offset 32
+	.cfi_offset 3, -32
+	subq	$16, %rsp
+	.cfi_def_cfa_offset 48
+	.loc 1 186 0
+	call	__errno_location
+.LVL42:
+	movl	(%rax), %r12d
+.LVL43:
+	movq	%rax, %rbx
+	.p2align 4,,10
+	.p2align 3
+.L52:
+	.loc 1 199 0
+	leaq	12(%rsp), %rsi
+	movl	$1, %edx
+	movl	$-1, %edi
+	call	waitpid
+.LVL44:
+	.loc 1 203 0
+	testl	%eax, %eax
+	je	.L53
+	.loc 1 205 0
+	js	.L68
+	.loc 1 222 0
+	movq	hs(%rip), %rcx
+	testq	%rcx, %rcx
+	je	.L52
+	.loc 1 224 0
+	movl	36(%rcx), %edx
+	subl	$1, %edx
+	cmovs	%ebp, %edx
+	movl	%edx, 36(%rcx)
+	jmp	.L52
+	.p2align 4,,10
+	.p2align 3
+.L68:
+	.loc 1 207 0
+	movl	(%rbx), %eax
+.LVL45:
+	cmpl	$11, %eax
+	je	.L52
+	cmpl	$4, %eax
+	je	.L52
+	.loc 1 212 0
+	cmpl	$10, %eax
+	je	.L53
+	.loc 1 213 0
+	movl	$.LC15, %esi
+	movl	$3, %edi
+	xorl	%eax, %eax
 	call	syslog
-	addl	$16, %esp
-	jmp	.L17
-.L21:
-	subl	$12, %esp
-	pushl	-12(%ebp)
-	call	fileno
-	addl	$16, %esp
-	subl	$4, %esp
-	pushl	$1
-	pushl	$2
-	pushl	%eax
-	call	fcntl
-	addl	$16, %esp
-	movl	hs, %eax
-	subl	$8, %esp
-	pushl	-12(%ebp)
-	pushl	%eax
-	call	httpd_set_logfp
-	addl	$16, %esp
-.L17:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
+.LVL46:
+.L53:
+	.loc 1 231 0
+	movl	%r12d, (%rbx)
+	.loc 1 232 0
+	addq	$16, %rsp
+	.cfi_def_cfa_offset 32
+	popq	%rbx
+	.cfi_def_cfa_offset 24
+	popq	%rbp
+	.cfi_def_cfa_offset 16
+	popq	%r12
+	.cfi_def_cfa_offset 8
+.LVL47:
 	ret
 	.cfi_endproc
-.LFE6:
-	.size	re_open_logfile, .-re_open_logfile
-	.section	.rodata
-.LC8:
-	.string	"can't find any valid address"
-	.align 4
-.LC9:
-	.string	"%s: can't find any valid address\n"
-.LC10:
-	.string	"unknown user - '%.80s'"
-.LC11:
-	.string	"%s: unknown user - '%s'\n"
-.LC12:
-	.string	"/dev/null"
-.LC13:
-	.string	"%.80s - %m"
-	.align 4
-.LC14:
-	.string	"logfile is not an absolute path, you may not be able to re-open it"
-	.align 4
-.LC15:
-	.string	"%s: logfile is not an absolute path, you may not be able to re-open it\n"
-.LC16:
-	.string	"fchown logfile - %m"
+.LFE41:
+	.size	handle_chld, .-handle_chld
+	.section	.text.unlikely
+.LCOLDE16:
+	.text
+.LHOTE16:
+	.section	.rodata.str1.1
 .LC17:
-	.string	"fchown logfile"
+	.string	"too many connections!"
+	.section	.rodata.str1.8
+	.align 8
 .LC18:
-	.string	"chdir - %m"
+	.string	"the connects free list is messed up"
+	.align 8
 .LC19:
-	.string	"chdir"
-.LC20:
-	.string	"daemon - %m"
-.LC21:
-	.string	"w"
+	.string	"out of memory allocating an httpd_conn"
+	.section	.text.unlikely
+.LCOLDB20:
+	.text
+.LHOTB20:
+	.p2align 4,,15
+	.type	handle_newconnect, @function
+handle_newconnect:
+.LFB57:
+	.loc 1 1501 0
+	.cfi_startproc
+.LVL48:
+	pushq	%r12
+	.cfi_def_cfa_offset 16
+	.cfi_offset 12, -16
+	pushq	%rbp
+	.cfi_def_cfa_offset 24
+	.cfi_offset 6, -24
+	movq	%rdi, %r12
+	pushq	%rbx
+	.cfi_def_cfa_offset 32
+	.cfi_offset 3, -32
+	movl	%esi, %ebp
+	subq	$16, %rsp
+	.cfi_def_cfa_offset 48
+	movl	num_connects(%rip), %eax
+.LVL49:
+.L78:
+	.loc 1 1512 0
+	cmpl	%eax, max_connects(%rip)
+	jle	.L88
+	.loc 1 1523 0
+	movslq	first_free_connect(%rip), %rax
+	cmpl	$-1, %eax
+	je	.L72
+	.loc 1 1523 0 is_stmt 0 discriminator 1
+	leaq	(%rax,%rax,8), %rbx
+	salq	$4, %rbx
+	addq	connects(%rip), %rbx
+	movl	(%rbx), %eax
+	testl	%eax, %eax
+	jne	.L72
+.LVL50:
+	.loc 1 1530 0 is_stmt 1
+	movq	8(%rbx), %rdx
+	testq	%rdx, %rdx
+	je	.L89
+.L74:
+	.loc 1 1543 0
+	movq	hs(%rip), %rdi
+	movl	%ebp, %esi
+	call	httpd_get_conn
+.LVL51:
+	testl	%eax, %eax
+	je	.L77
+	cmpl	$2, %eax
+	jne	.L90
+	.loc 1 1554 0
+	movl	$1, %eax
+.LVL52:
+.L71:
+	.loc 1 1577 0
+	addq	$16, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 32
+	popq	%rbx
+	.cfi_def_cfa_offset 24
+	popq	%rbp
+	.cfi_def_cfa_offset 16
+.LVL53:
+	popq	%r12
+	.cfi_def_cfa_offset 8
+.LVL54:
+	ret
+.LVL55:
+	.p2align 4,,10
+	.p2align 3
+.L90:
+	.cfi_restore_state
+	.loc 1 1558 0
+	movl	4(%rbx), %eax
+	.loc 1 1556 0
+	movl	$1, (%rbx)
+	.loc 1 1559 0
+	movl	$-1, 4(%rbx)
+	.loc 1 1560 0
+	addl	$1, num_connects(%rip)
+.LVL56:
+	.loc 1 1558 0
+	movl	%eax, first_free_connect(%rip)
+	.loc 1 1562 0
+	movq	(%r12), %rax
+	.loc 1 1563 0
+	movq	$0, 96(%rbx)
+	.loc 1 1564 0
+	movq	$0, 104(%rbx)
+	.loc 1 1562 0
+	movq	%rax, 88(%rbx)
+	.loc 1 1569 0
+	movq	8(%rbx), %rax
+	.loc 1 1565 0
+	movq	$0, 136(%rbx)
+	.loc 1 1566 0
+	movl	$0, 56(%rbx)
+	.loc 1 1569 0
+	movl	704(%rax), %edi
+	call	httpd_set_ndelay
+.LVL57:
+	.loc 1 1571 0
+	movq	8(%rbx), %rax
+	xorl	%edx, %edx
+	movq	%rbx, %rsi
+	movl	704(%rax), %edi
+	call	fdwatch_add_fd
+.LVL58:
+	.loc 1 1573 0
+	addq	$1, stats_connections(%rip)
+	.loc 1 1574 0
+	movl	num_connects(%rip), %eax
+	cmpl	stats_simultaneous(%rip), %eax
+	jle	.L78
+	.loc 1 1575 0
+	movl	%eax, stats_simultaneous(%rip)
+	jmp	.L78
+.LVL59:
+	.p2align 4,,10
+	.p2align 3
+.L77:
+	.loc 1 1549 0
+	movq	%r12, %rdi
+	movl	%eax, 12(%rsp)
+	call	tmr_run
+.LVL60:
+	.loc 1 1550 0
+	movl	12(%rsp), %eax
+	.loc 1 1577 0
+	addq	$16, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 32
+	popq	%rbx
+	.cfi_def_cfa_offset 24
+.LVL61:
+	popq	%rbp
+	.cfi_def_cfa_offset 16
+.LVL62:
+	popq	%r12
+	.cfi_def_cfa_offset 8
+.LVL63:
+	ret
+.LVL64:
+	.p2align 4,,10
+	.p2align 3
+.L89:
+	.cfi_restore_state
+	.loc 1 1532 0
+	movl	$720, %edi
+	call	malloc
+.LVL65:
+	.loc 1 1533 0
+	testq	%rax, %rax
+	.loc 1 1532 0
+	movq	%rax, 8(%rbx)
+	.loc 1 1533 0
+	je	.L91
+	.loc 1 1538 0
+	movl	$0, (%rax)
+	.loc 1 1539 0
+	addl	$1, httpd_conn_count(%rip)
+	movq	%rax, %rdx
+	jmp	.L74
+.LVL66:
+	.p2align 4,,10
+	.p2align 3
+.L88:
+	.loc 1 1518 0
+	xorl	%eax, %eax
+	movl	$.LC17, %esi
+	movl	$4, %edi
+	call	syslog
+.LVL67:
+	.loc 1 1519 0
+	movq	%r12, %rdi
+	call	tmr_run
+.LVL68:
+	.loc 1 1520 0
+	xorl	%eax, %eax
+	jmp	.L71
+.L72:
+	.loc 1 1525 0
+	movl	$2, %edi
+	movl	$.LC18, %esi
+	xorl	%eax, %eax
+	call	syslog
+.LVL69:
+	.loc 1 1526 0
+	movl	$1, %edi
+	call	exit
+.LVL70:
+.L91:
+	.loc 1 1535 0
+	movl	$2, %edi
+	movl	$.LC19, %esi
+	call	syslog
+.LVL71:
+	.loc 1 1536 0
+	movl	$1, %edi
+	call	exit
+.LVL72:
+	.cfi_endproc
+.LFE57:
+	.size	handle_newconnect, .-handle_newconnect
+	.section	.text.unlikely
+.LCOLDE20:
+	.text
+.LHOTE20:
+	.section	.text.unlikely
+.LCOLDB21:
+	.text
+.LHOTB21:
+	.p2align 4,,15
+	.type	really_clear_connection, @function
+really_clear_connection:
+.LFB66:
+	.loc 1 2044 0
+	.cfi_startproc
+.LVL73:
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset 3, -16
+	movq	%rdi, %rbx
+	subq	$16, %rsp
+	.cfi_def_cfa_offset 32
+	.loc 1 2045 0
+	movq	8(%rdi), %rdi
+.LVL74:
+	movq	200(%rdi), %rax
+	addq	%rax, stats_bytes(%rip)
+	.loc 1 2046 0
+	cmpl	$3, (%rbx)
+	je	.L93
+	.loc 1 2047 0
+	movl	704(%rdi), %edi
+	movq	%rsi, 8(%rsp)
+	call	fdwatch_del_fd
+.LVL75:
+	movq	8(%rbx), %rdi
+	movq	8(%rsp), %rsi
+.LVL76:
+.L93:
+	.loc 1 2048 0
+	call	httpd_close_conn
+.LVL77:
+.LBB194:
+.LBB195:
+	.loc 1 1922 0
+	movl	56(%rbx), %eax
+	testl	%eax, %eax
+	jle	.L98
+	subl	$1, %eax
+	movq	throttles(%rip), %rcx
+	leaq	16(%rbx), %rdx
+	leaq	20(%rbx,%rax,4), %rsi
+.LVL78:
+	.p2align 4,,10
+	.p2align 3
+.L97:
+	.loc 1 1923 0
+	movslq	(%rdx), %rax
+	addq	$4, %rdx
+	leaq	(%rax,%rax,2), %rax
+	salq	$4, %rax
+	subl	$1, 40(%rcx,%rax)
+	.loc 1 1922 0
+	cmpq	%rsi, %rdx
+	jne	.L97
+.L98:
+.LBE195:
+.LBE194:
+	.loc 1 2050 0
+	movq	104(%rbx), %rdi
+	testq	%rdi, %rdi
+	je	.L96
+	.loc 1 2052 0
+	call	tmr_cancel
+.LVL79:
+	.loc 1 2053 0
+	movq	$0, 104(%rbx)
+.L96:
+	.loc 1 2056 0
+	movl	first_free_connect(%rip), %eax
+	.loc 1 2055 0
+	movl	$0, (%rbx)
+	.loc 1 2058 0
+	subl	$1, num_connects(%rip)
+	.loc 1 2056 0
+	movl	%eax, 4(%rbx)
+	.loc 1 2057 0
+	subq	connects(%rip), %rbx
+.LVL80:
+	movabsq	$-8198552921648689607, %rax
+	sarq	$4, %rbx
+	imulq	%rax, %rbx
+	movl	%ebx, first_free_connect(%rip)
+	.loc 1 2059 0
+	addq	$16, %rsp
+	.cfi_def_cfa_offset 16
+	popq	%rbx
+	.cfi_def_cfa_offset 8
+	ret
+	.cfi_endproc
+.LFE66:
+	.size	really_clear_connection, .-really_clear_connection
+	.section	.text.unlikely
+.LCOLDE21:
+	.text
+.LHOTE21:
+	.section	.rodata.str1.8
+	.align 8
 .LC22:
-	.string	"%d\n"
-	.align 4
+	.string	"replacing non-null linger_timer!"
+	.align 8
 .LC23:
-	.string	"fdwatch initialization failure"
-.LC24:
-	.string	"chroot - %m"
+	.string	"tmr_create(linger_clear_connection) failed"
+	.section	.text.unlikely
+.LCOLDB24:
+	.text
+.LHOTB24:
+	.p2align 4,,15
+	.type	clear_connection, @function
+clear_connection:
+.LFB65:
+	.loc 1 1992 0
+	.cfi_startproc
+.LVL81:
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	.cfi_offset 6, -16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	.cfi_offset 3, -24
+	movq	%rdi, %rbx
+	movq	%rsi, %rbp
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 32
+	.loc 1 1995 0
+	movq	96(%rdi), %rdi
+.LVL82:
+	testq	%rdi, %rdi
+	je	.L102
+	.loc 1 1997 0
+	call	tmr_cancel
+.LVL83:
+	.loc 1 1998 0
+	movq	$0, 96(%rbx)
+.L102:
+	.loc 1 2012 0
+	cmpl	$4, (%rbx)
+	je	.L103
+	movq	8(%rbx), %rax
+	.loc 1 2019 0
+	movl	556(%rax), %edx
+	testl	%edx, %edx
+	je	.L105
+	.loc 1 2021 0
+	cmpl	$3, (%rbx)
+	je	.L106
+	.loc 1 2022 0
+	movl	704(%rax), %edi
+	call	fdwatch_del_fd
+.LVL84:
+	movq	8(%rbx), %rax
+.L106:
+	.loc 1 2024 0
+	movl	704(%rax), %edi
+	movl	$1, %esi
+	.loc 1 2023 0
+	movl	$4, (%rbx)
+	.loc 1 2024 0
+	call	shutdown
+.LVL85:
+	.loc 1 2025 0
+	movq	8(%rbx), %rax
+	xorl	%edx, %edx
+	movq	%rbx, %rsi
+	movl	704(%rax), %edi
+	call	fdwatch_add_fd
+.LVL86:
+	.loc 1 2027 0
+	cmpq	$0, 104(%rbx)
+	je	.L107
+	.loc 1 2028 0
+	movl	$.LC22, %esi
+	movl	$3, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL87:
+.L107:
+	.loc 1 2029 0
+	xorl	%r8d, %r8d
+	movl	$500, %ecx
+	movq	%rbx, %rdx
+	movl	$linger_clear_connection, %esi
+	movq	%rbp, %rdi
+	call	tmr_create
+.LVL88:
+	.loc 1 2031 0
+	testq	%rax, %rax
+	.loc 1 2029 0
+	movq	%rax, 104(%rbx)
+	.loc 1 2031 0
+	je	.L113
+	.loc 1 2039 0
+	addq	$8, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+.LVL89:
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+.LVL90:
+	ret
+.LVL91:
+	.p2align 4,,10
+	.p2align 3
+.L103:
+	.cfi_restore_state
+	.loc 1 2015 0
+	movq	104(%rbx), %rdi
+	call	tmr_cancel
+.LVL92:
+	.loc 1 2017 0
+	movq	8(%rbx), %rax
+	.loc 1 2016 0
+	movq	$0, 104(%rbx)
+	.loc 1 2017 0
+	movl	$0, 556(%rax)
+.L105:
+	.loc 1 2039 0
+	addq	$8, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 24
+	.loc 1 2038 0
+	movq	%rbp, %rsi
+	movq	%rbx, %rdi
+	.loc 1 2039 0
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+.LVL93:
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+.LVL94:
+	.loc 1 2038 0
+	jmp	really_clear_connection
+.LVL95:
+.L113:
+	.cfi_restore_state
+	.loc 1 2033 0
+	movl	$2, %edi
+	movl	$.LC23, %esi
+	call	syslog
+.LVL96:
+	.loc 1 2034 0
+	movl	$1, %edi
+	call	exit
+.LVL97:
+	.cfi_endproc
+.LFE65:
+	.size	clear_connection, .-clear_connection
+	.section	.text.unlikely
+.LCOLDE24:
+	.text
+.LHOTE24:
+	.section	.rodata.str1.8
+	.align 8
 .LC25:
-	.string	"chroot"
-	.align 4
+	.string	"%.80s connection timed out reading"
+	.section	.rodata.str1.1
 .LC26:
-	.string	"logfile is not within the chroot tree, you will not be able to re-open it"
-	.align 4
+	.string	""
+	.section	.rodata.str1.8
+	.align 8
 .LC27:
-	.string	"%s: logfile is not within the chroot tree, you will not be able to re-open it\n"
-.LC28:
-	.string	"chroot chdir - %m"
-.LC29:
-	.string	"chroot chdir"
-.LC30:
-	.string	"data_dir chdir - %m"
+	.string	"%.80s connection timed out sending"
+	.section	.text.unlikely
+.LCOLDB28:
+	.text
+.LHOTB28:
+	.p2align 4,,15
+	.type	idle, @function
+idle:
+.LFB67:
+	.loc 1 2064 0
+	.cfi_startproc
+.LVL98:
+	pushq	%r13
+	.cfi_def_cfa_offset 16
+	.cfi_offset 13, -16
+	pushq	%r12
+	.cfi_def_cfa_offset 24
+	.cfi_offset 12, -24
+	.loc 1 2068 0
+	xorl	%r12d, %r12d
+	.loc 1 2064 0
+	pushq	%rbp
+	.cfi_def_cfa_offset 32
+	.cfi_offset 6, -32
+	pushq	%rbx
+	.cfi_def_cfa_offset 40
+	.cfi_offset 3, -40
+	.loc 1 2068 0
+	xorl	%ebp, %ebp
+	.loc 1 2064 0
+	movq	%rsi, %r13
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 48
+	.loc 1 2068 0
+	movl	max_connects(%rip), %eax
+	testl	%eax, %eax
+	jg	.L121
+	jmp	.L114
+.LVL99:
+	.p2align 4,,10
+	.p2align 3
+.L126:
+	.loc 1 2071 0
+	jl	.L116
+	cmpl	$3, %eax
+	jg	.L116
+	.loc 1 2086 0
+	movq	0(%r13), %rax
+	subq	88(%rbx), %rax
+	cmpq	$299, %rax
+	jg	.L125
+.L116:
+	.loc 1 2068 0 discriminator 2
+	addl	$1, %r12d
+.LVL100:
+	addq	$144, %rbp
+	cmpl	%r12d, max_connects(%rip)
+	jle	.L114
+.LVL101:
+.L121:
+	.loc 1 2070 0
+	movq	%rbp, %rbx
+	addq	connects(%rip), %rbx
+.LVL102:
+	.loc 1 2071 0
+	movl	(%rbx), %eax
+	cmpl	$1, %eax
+	jne	.L126
+	.loc 1 2074 0
+	movq	0(%r13), %rax
+	subq	88(%rbx), %rax
+	cmpq	$59, %rax
+	jle	.L116
+	.loc 1 2076 0
+	movq	8(%rbx), %rax
+	leaq	16(%rax), %rdi
+.LVL103:
+	call	httpd_ntoa
+.LVL104:
+	movl	$.LC25, %esi
+	movq	%rax, %rdx
+	movl	$6, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL105:
+	.loc 1 2079 0
+	movq	8(%rbx), %rdi
+	movq	httpd_err408form(%rip), %r8
+	movl	$.LC26, %r9d
+	movq	httpd_err408title(%rip), %rdx
+	movq	%r9, %rcx
+	movl	$408, %esi
+	call	httpd_send_err
+.LVL106:
+.LBB196:
+.LBB197:
+	.loc 1 1983 0
+	movq	8(%rbx), %rdi
+	call	httpd_write_response
+.LVL107:
+	.loc 1 1986 0
+	movq	%r13, %rsi
+	movq	%rbx, %rdi
+	call	clear_connection
+.LVL108:
+	jmp	.L116
+.LVL109:
+	.p2align 4,,10
+	.p2align 3
+.L114:
+.LBE197:
+.LBE196:
+	.loc 1 2096 0
+	addq	$8, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 40
+	popq	%rbx
+	.cfi_def_cfa_offset 32
+	popq	%rbp
+	.cfi_def_cfa_offset 24
+	popq	%r12
+	.cfi_def_cfa_offset 16
+	popq	%r13
+	.cfi_def_cfa_offset 8
+.LVL110:
+	ret
+.LVL111:
+	.p2align 4,,10
+	.p2align 3
+.L125:
+	.cfi_restore_state
+	.loc 1 2088 0
+	movq	8(%rbx), %rax
+	leaq	16(%rax), %rdi
+.LVL112:
+	call	httpd_ntoa
+.LVL113:
+	movl	$.LC27, %esi
+	movq	%rax, %rdx
+	movl	$6, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL114:
+	.loc 1 2091 0
+	movq	%r13, %rsi
+	movq	%rbx, %rdi
+	call	clear_connection
+.LVL115:
+	jmp	.L116
+	.cfi_endproc
+.LFE67:
+	.size	idle, .-idle
+	.section	.text.unlikely
+.LCOLDE28:
+	.text
+.LHOTE28:
+	.section	.text.unlikely
+.LCOLDB29:
+	.text
+.LHOTB29:
+	.p2align 4,,15
+	.type	linger_clear_connection, @function
+linger_clear_connection:
+.LFB69:
+	.loc 1 2115 0
+	.cfi_startproc
+.LVL116:
+	.loc 1 2119 0
+	movq	$0, 104(%rdi)
+	.loc 1 2120 0
+	jmp	really_clear_connection
+.LVL117:
+	.cfi_endproc
+.LFE69:
+	.size	linger_clear_connection, .-linger_clear_connection
+	.section	.text.unlikely
+.LCOLDE29:
+	.text
+.LHOTE29:
+	.section	.text.unlikely
+.LCOLDB30:
+	.text
+.LHOTB30:
+	.p2align 4,,15
+	.type	shut_down, @function
+shut_down:
+.LFB56:
+	.loc 1 1463 0
+	.cfi_startproc
+	pushq	%r12
+	.cfi_def_cfa_offset 16
+	.cfi_offset 12, -16
+	pushq	%rbp
+	.cfi_def_cfa_offset 24
+	.cfi_offset 6, -24
+	.loc 1 1467 0
+	xorl	%esi, %esi
+	.loc 1 1463 0
+	pushq	%rbx
+	.cfi_def_cfa_offset 32
+	.cfi_offset 3, -32
+	.loc 1 1469 0
+	xorl	%ebp, %ebp
+	xorl	%ebx, %ebx
+	.loc 1 1463 0
+	subq	$16, %rsp
+	.cfi_def_cfa_offset 48
+	.loc 1 1467 0
+	movq	%rsp, %rdi
+	call	gettimeofday
+.LVL118:
+	.loc 1 1468 0
+	movq	%rsp, %rdi
+	call	logstats
+.LVL119:
+	.loc 1 1469 0
+	movl	max_connects(%rip), %ecx
+	testl	%ecx, %ecx
+	jg	.L147
+	jmp	.L134
+.LVL120:
+	.p2align 4,,10
+	.p2align 3
+.L132:
+	.loc 1 1473 0
+	movq	8(%rax), %rdi
+	testq	%rdi, %rdi
+	je	.L133
+	.loc 1 1475 0
+	call	httpd_destroy_conn
+.LVL121:
+	.loc 1 1476 0
+	movq	%rbx, %r12
+	addq	connects(%rip), %r12
+	movq	8(%r12), %rdi
+	call	free
+.LVL122:
+	.loc 1 1477 0
+	subl	$1, httpd_conn_count(%rip)
+	.loc 1 1478 0
+	movq	$0, 8(%r12)
+.L133:
+	.loc 1 1469 0 discriminator 2
+	addl	$1, %ebp
+.LVL123:
+	addq	$144, %rbx
+	cmpl	%ebp, max_connects(%rip)
+	jle	.L134
+.LVL124:
+.L147:
+	.loc 1 1471 0
+	movq	%rbx, %rax
+	addq	connects(%rip), %rax
+	movl	(%rax), %edx
+	testl	%edx, %edx
+	je	.L132
+	.loc 1 1472 0
+	movq	8(%rax), %rdi
+	movq	%rsp, %rsi
+	call	httpd_close_conn
+.LVL125:
+	movq	%rbx, %rax
+	addq	connects(%rip), %rax
+	jmp	.L132
+.LVL126:
+	.p2align 4,,10
+	.p2align 3
+.L134:
+	.loc 1 1481 0
+	movq	hs(%rip), %rbx
+	testq	%rbx, %rbx
+	je	.L131
+.LVL127:
+.LBB198:
+	.loc 1 1485 0
+	movl	72(%rbx), %edi
+	.loc 1 1484 0
+	movq	$0, hs(%rip)
+	.loc 1 1485 0
+	cmpl	$-1, %edi
+	je	.L135
+	.loc 1 1486 0
+	call	fdwatch_del_fd
+.LVL128:
+.L135:
+	.loc 1 1487 0
+	movl	76(%rbx), %edi
+	cmpl	$-1, %edi
+	je	.L136
+	.loc 1 1488 0
+	call	fdwatch_del_fd
+.LVL129:
+.L136:
+	.loc 1 1489 0
+	movq	%rbx, %rdi
+	call	httpd_terminate
+.LVL130:
+.L131:
+.LBE198:
+	.loc 1 1491 0
+	call	mmc_destroy
+.LVL131:
+	.loc 1 1492 0
+	call	tmr_destroy
+.LVL132:
+	.loc 1 1493 0
+	movq	connects(%rip), %rdi
+	call	free
+.LVL133:
+	.loc 1 1494 0
+	movq	throttles(%rip), %rdi
+	testq	%rdi, %rdi
+	je	.L128
+	.loc 1 1495 0
+	call	free
+.LVL134:
+.L128:
+	.loc 1 1496 0
+	addq	$16, %rsp
+	.cfi_def_cfa_offset 32
+	popq	%rbx
+	.cfi_def_cfa_offset 24
+	popq	%rbp
+	.cfi_def_cfa_offset 16
+	popq	%r12
+	.cfi_def_cfa_offset 8
+	ret
+	.cfi_endproc
+.LFE56:
+	.size	shut_down, .-shut_down
+	.section	.text.unlikely
+.LCOLDE30:
+	.text
+.LHOTE30:
+	.section	.rodata.str1.1
 .LC31:
-	.string	"data_dir chdir"
-.LC32:
-	.string	"tmr_create(occasional) failed"
+	.string	"exiting due to signal %d"
+	.section	.text.unlikely
+.LCOLDB32:
+	.text
+.LHOTB32:
+	.p2align 4,,15
+	.type	handle_term, @function
+handle_term:
+.LFB40:
+	.loc 1 172 0
+	.cfi_startproc
+.LVL135:
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset 3, -16
+	.loc 1 172 0
+	movl	%edi, %ebx
+	.loc 1 175 0
+	call	shut_down
+.LVL136:
+	.loc 1 176 0
+	movl	$5, %edi
+	movl	%ebx, %edx
+	movl	$.LC31, %esi
+	xorl	%eax, %eax
+	call	syslog
+.LVL137:
+	.loc 1 177 0
+	call	closelog
+.LVL138:
+	.loc 1 178 0
+	movl	$1, %edi
+	call	exit
+.LVL139:
+	.cfi_endproc
+.LFE40:
+	.size	handle_term, .-handle_term
+	.section	.text.unlikely
+.LCOLDE32:
+	.text
+.LHOTE32:
+	.section	.rodata.str1.8
+	.align 8
 .LC33:
-	.string	"tmr_create(idle) failed"
-	.align 4
-.LC34:
-	.string	"tmr_create(update_throttles) failed"
+	.string	"%s: no value required for %s option\n"
+	.section	.text.unlikely
+.LCOLDB34:
+	.text
+.LHOTB34:
+	.p2align 4,,15
+	.type	no_value_required.part.1, @function
+no_value_required.part.1:
+.LFB75:
+	.loc 1 1202 0
+	.cfi_startproc
+.LVL140:
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 16
+	.loc 1 1202 0
+	movq	%rdi, %rcx
+	.loc 1 1206 0
+	movq	argv0(%rip), %rdx
+	movq	stderr(%rip), %rdi
+.LVL141:
+	movl	$.LC33, %esi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL142:
+	.loc 1 1209 0
+	movl	$1, %edi
+	call	exit
+.LVL143:
+	.cfi_endproc
+.LFE75:
+	.size	no_value_required.part.1, .-no_value_required.part.1
+	.section	.text.unlikely
+.LCOLDE34:
+	.text
+.LHOTE34:
+	.section	.rodata.str1.8
+	.align 8
 .LC35:
-	.string	"tmr_create(show_stats) failed"
-.LC36:
-	.string	"setgroups - %m"
+	.string	"%s: value required for %s option\n"
+	.section	.text.unlikely
+.LCOLDB36:
+	.text
+.LHOTB36:
+	.p2align 4,,15
+	.type	value_required.part.2, @function
+value_required.part.2:
+.LFB76:
+	.loc 1 1190 0
+	.cfi_startproc
+.LVL144:
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 16
+	.loc 1 1190 0
+	movq	%rdi, %rcx
+	.loc 1 1194 0
+	movq	argv0(%rip), %rdx
+	movq	stderr(%rip), %rdi
+.LVL145:
+	movl	$.LC35, %esi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL146:
+	.loc 1 1196 0
+	movl	$1, %edi
+	call	exit
+.LVL147:
+	.cfi_endproc
+.LFE76:
+	.size	value_required.part.2, .-value_required.part.2
+	.section	.text.unlikely
+.LCOLDE36:
+	.text
+.LHOTE36:
+	.section	.rodata.str1.1
 .LC37:
-	.string	"setgid - %m"
-.LC38:
-	.string	"initgroups - %m"
+	.string	"/tmp"
+	.section	.text.unlikely
+.LCOLDB38:
+	.text
+.LHOTB38:
+	.p2align 4,,15
+	.type	handle_alrm, @function
+handle_alrm:
+.LFB45:
+	.loc 1 300 0
+	.cfi_startproc
+.LVL148:
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	.cfi_offset 6, -16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	.cfi_offset 3, -24
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 32
+	.loc 1 301 0
+	call	__errno_location
+.LVL149:
+	movq	%rax, %rbx
+	movl	(%rax), %ebp
+.LVL150:
+	.loc 1 304 0
+	movl	watchdog_flag(%rip), %eax
+	testl	%eax, %eax
+	je	.L163
+	.loc 1 318 0
+	movl	$360, %edi
+	.loc 1 311 0
+	movl	$0, watchdog_flag(%rip)
+	.loc 1 318 0
+	call	alarm
+.LVL151:
+	.loc 1 321 0
+	movl	%ebp, (%rbx)
+	.loc 1 322 0
+	addq	$8, %rsp
+	.cfi_remember_state
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+.LVL152:
+	ret
+.LVL153:
+.L163:
+	.cfi_restore_state
+.LBB201:
+.LBB202:
+	.loc 1 307 0
+	movl	$.LC37, %edi
+	call	chdir
+.LVL154:
+	.loc 1 309 0
+	call	abort
+.LVL155:
+.LBE202:
+.LBE201:
+	.cfi_endproc
+.LFE45:
+	.size	handle_alrm, .-handle_alrm
+	.section	.text.unlikely
+.LCOLDE38:
+	.text
+.LHOTE38:
+	.section	.rodata.str1.8
+	.align 8
 .LC39:
-	.string	"setuid - %m"
-	.align 4
+	.string	"out of memory copying a string"
+	.align 8
 .LC40:
-	.string	"started as root without requesting chroot(), warning only"
-	.align 4
-.LC41:
-	.string	"out of memory allocating a connecttab"
-.LC42:
-	.string	"fdwatch - %m"
+	.string	"%s: out of memory copying a string\n"
+	.section	.text.unlikely
+.LCOLDB41:
 	.text
-	.globl	main
-	.type	main, @function
-main:
-.LFB7:
+.LHOTB41:
+	.p2align 4,,15
+	.type	e_strdup.part.4, @function
+e_strdup.part.4:
+.LFB78:
+	.loc 1 1215 0
 	.cfi_startproc
-	leal	4(%esp), %ecx
-	.cfi_def_cfa 1, 0
-	andl	$-16, %esp
-	pushl	-4(%ecx)
-	pushl	%ebp
-	.cfi_escape 0x10,0x5,0x2,0x75,0
-	movl	%esp, %ebp
-	pushl	%edi
-	pushl	%esi
-	pushl	%ebx
-	pushl	%ecx
-	.cfi_escape 0xf,0x3,0x75,0x70,0x6
-	.cfi_escape 0x10,0x7,0x2,0x75,0x7c
-	.cfi_escape 0x10,0x6,0x2,0x75,0x78
-	.cfi_escape 0x10,0x3,0x2,0x75,0x74
-	subl	$4472, %esp
-	movl	%ecx, %ebx
-	movl	4(%ebx), %eax
-	movl	%eax, -4444(%ebp)
-	movl	%gs:20, %eax
-	movl	%eax, -28(%ebp)
-	xorl	%eax, %eax
-	movl	$32767, -4428(%ebp)
-	movl	$32767, -4424(%ebp)
-	movl	-4444(%ebp), %eax
-	movl	(%eax), %eax
-	movl	%eax, argv0
-	movl	argv0, %eax
-	subl	$8, %esp
-	pushl	$47
-	pushl	%eax
-	call	strrchr
-	addl	$16, %esp
-	movl	%eax, -4432(%ebp)
-	cmpl	$0, -4432(%ebp)
-	je	.L23
-	addl	$1, -4432(%ebp)
-	jmp	.L24
-.L23:
-	movl	argv0, %eax
-	movl	%eax, -4432(%ebp)
-.L24:
-	subl	$4, %esp
-	pushl	$24
-	pushl	$9
-	pushl	-4432(%ebp)
-	call	openlog
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	-4444(%ebp)
-	pushl	(%ebx)
-	call	parse_args
-	addl	$16, %esp
-	call	tzset
-	subl	$8, %esp
-	leal	-4436(%ebp), %eax
-	pushl	%eax
-	pushl	$128
-	leal	-4256(%ebp), %eax
-	pushl	%eax
-	leal	-4440(%ebp), %eax
-	pushl	%eax
-	pushl	$128
-	leal	-4384(%ebp), %eax
-	pushl	%eax
-	call	lookup_hostname
-	addl	$32, %esp
-	movl	-4440(%ebp), %eax
-	testl	%eax, %eax
-	jne	.L25
-	movl	-4436(%ebp), %eax
-	testl	%eax, %eax
-	jne	.L25
-	subl	$8, %esp
-	pushl	$.LC8
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	$.LC9
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L25:
-	movl	$0, numthrottles
-	movl	$0, maxthrottles
-	movl	$0, throttles
-	movl	throttlefile, %eax
-	testl	%eax, %eax
-	je	.L26
-	movl	throttlefile, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	read_throttlefile
-	addl	$16, %esp
-.L26:
-	call	getuid
-	testl	%eax, %eax
-	jne	.L27
-	movl	user, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	getpwnam
-	addl	$16, %esp
-	movl	%eax, -4412(%ebp)
-	cmpl	$0, -4412(%ebp)
-	jne	.L28
-	movl	user, %eax
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC10
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	movl	user, %ecx
-	movl	argv0, %edx
-	movl	stderr, %eax
-	pushl	%ecx
-	pushl	%edx
-	pushl	$.LC11
-	pushl	%eax
+.LVL156:
+	subq	$8, %rsp
+	.cfi_def_cfa_offset 16
+	.loc 1 1222 0
+	movl	$.LC39, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL157:
+	.loc 1 1223 0
+	movq	stderr(%rip), %rdi
+	movq	argv0(%rip), %rdx
+	movl	$.LC40, %esi
+	xorl	%eax, %eax
 	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L28:
-	movl	-4412(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	%eax, -4428(%ebp)
-	movl	-4412(%ebp), %eax
-	movl	12(%eax), %eax
-	movl	%eax, -4424(%ebp)
-.L27:
-	movl	logfile, %eax
-	testl	%eax, %eax
-	je	.L29
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	$.LC12
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L30
-	movl	$1, no_log
-	movl	$0, -4420(%ebp)
-	jmp	.L35
-.L30:
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	$.LC4
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L32
-	movl	stdout, %eax
-	movl	%eax, -4420(%ebp)
-	jmp	.L35
-.L32:
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	$.LC6
-	pushl	%eax
-	call	fopen
-	addl	$16, %esp
-	movl	%eax, -4420(%ebp)
-	cmpl	$0, -4420(%ebp)
-	jne	.L33
-	movl	logfile, %eax
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC13
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	movl	logfile, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
+.LVL158:
+	.loc 1 1224 0
+	movl	$1, %edi
 	call	exit
-.L33:
-	movl	logfile, %eax
-	movzbl	(%eax), %eax
-	cmpb	$47, %al
-	je	.L34
-	subl	$8, %esp
-	pushl	$.LC14
-	pushl	$4
-	call	syslog
-	addl	$16, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	$.LC15
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-.L34:
-	subl	$12, %esp
-	pushl	-4420(%ebp)
-	call	fileno
-	addl	$16, %esp
-	subl	$4, %esp
-	pushl	$1
-	pushl	$2
-	pushl	%eax
-	call	fcntl
-	addl	$16, %esp
-	call	getuid
-	testl	%eax, %eax
-	jne	.L35
-	subl	$12, %esp
-	pushl	-4420(%ebp)
-	call	fileno
-	addl	$16, %esp
-	subl	$4, %esp
-	pushl	-4424(%ebp)
-	pushl	-4428(%ebp)
-	pushl	%eax
-	call	fchown
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L35
-	subl	$8, %esp
-	pushl	$.LC16
-	pushl	$4
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$.LC17
-	call	perror
-	addl	$16, %esp
-	jmp	.L35
-.L29:
-	movl	$0, -4420(%ebp)
-.L35:
-	movl	dir, %eax
-	testl	%eax, %eax
-	je	.L36
-	movl	dir, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	chdir
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L36
-	subl	$8, %esp
-	pushl	$.LC18
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$.LC19
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L36:
-	subl	$8, %esp
-	pushl	$4096
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	call	getcwd
-	addl	$16, %esp
-	subl	$12, %esp
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	call	strlen
-	addl	$16, %esp
-	subl	$1, %eax
-	movzbl	-4125(%ebp,%eax), %eax
-	cmpb	$47, %al
-	je	.L37
-	leal	-4125(%ebp), %eax
-	movl	$-1, %ecx
-	movl	%eax, %edx
-	movl	$0, %eax
-	movl	%edx, %edi
-	repnz; scasb
-	movl	%ecx, %eax
-	notl	%eax
-	leal	-1(%eax), %edx
-	leal	-4125(%ebp), %eax
-	addl	%edx, %eax
-	movw	$47, (%eax)
-.L37:
-	movl	debug, %eax
-	testl	%eax, %eax
-	jne	.L38
-	movl	stdin, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fclose
-	addl	$16, %esp
-	movl	stdout, %eax
-	cmpl	%eax, -4420(%ebp)
-	je	.L39
-	movl	stdout, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fclose
-	addl	$16, %esp
-.L39:
-	movl	stderr, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fclose
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$1
-	pushl	$1
-	call	daemon
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L40
-	subl	$8, %esp
-	pushl	$.LC20
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L38:
-	call	setsid
-.L40:
-	movl	pidfile, %eax
-	testl	%eax, %eax
-	je	.L41
-	movl	pidfile, %eax
-	subl	$8, %esp
-	pushl	$.LC21
-	pushl	%eax
-	call	fopen
-	addl	$16, %esp
-	movl	%eax, -4408(%ebp)
-	cmpl	$0, -4408(%ebp)
-	jne	.L42
-	movl	pidfile, %eax
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC13
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L42:
-	call	getpid
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC22
-	pushl	-4408(%ebp)
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-4408(%ebp)
-	call	fclose
-	addl	$16, %esp
-.L41:
-	call	fdwatch_get_nfiles
-	movl	%eax, max_connects
-	movl	max_connects, %eax
-	testl	%eax, %eax
-	jns	.L43
-	subl	$8, %esp
-	pushl	$.LC23
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L43:
-	movl	max_connects, %eax
-	subl	$10, %eax
-	movl	%eax, max_connects
-	movl	do_chroot, %eax
-	testl	%eax, %eax
-	je	.L44
-	subl	$12, %esp
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	call	chroot
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L45
-	subl	$8, %esp
-	pushl	$.LC24
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$.LC25
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L45:
-	movl	logfile, %eax
-	testl	%eax, %eax
-	je	.L46
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	$.LC4
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	je	.L46
-	subl	$12, %esp
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	call	strlen
-	addl	$16, %esp
-	movl	%eax, %edx
-	movl	logfile, %eax
-	subl	$4, %esp
-	pushl	%edx
-	leal	-4125(%ebp), %edx
-	pushl	%edx
-	pushl	%eax
-	call	strncmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L47
-	movl	logfile, %ebx
-	subl	$12, %esp
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	call	strlen
-	addl	$16, %esp
-	subl	$1, %eax
-	leal	(%ebx,%eax), %edx
-	movl	logfile, %eax
-	subl	$8, %esp
-	pushl	%edx
-	pushl	%eax
-	call	strcpy
-	addl	$16, %esp
-	jmp	.L46
-.L47:
-	subl	$8, %esp
-	pushl	$.LC26
-	pushl	$4
-	call	syslog
-	addl	$16, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	$.LC27
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-.L46:
-	leal	-4125(%ebp), %eax
-	movw	$47, (%eax)
-	subl	$12, %esp
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	call	chdir
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L44
-	subl	$8, %esp
-	pushl	$.LC28
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$.LC29
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L44:
-	movl	data_dir, %eax
-	testl	%eax, %eax
-	je	.L48
-	movl	data_dir, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	chdir
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L48
-	subl	$8, %esp
-	pushl	$.LC30
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$.LC31
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L48:
-	subl	$8, %esp
-	pushl	$handle_term
-	pushl	$15
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$handle_term
-	pushl	$2
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$handle_chld
-	pushl	$17
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$1
-	pushl	$13
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$handle_hup
-	pushl	$1
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$handle_usr1
-	pushl	$10
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$handle_usr2
-	pushl	$12
-	call	sigset
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	$handle_alrm
-	pushl	$14
-	call	sigset
-	addl	$16, %esp
-	movl	$0, got_hup
-	movl	$0, got_usr1
-	movl	$0, watchdog_flag
-	subl	$12, %esp
-	pushl	$360
-	call	alarm
-	addl	$16, %esp
-	call	tmr_init
-	movl	no_empty_referers, %esi
-	movl	local_pattern, %edi
-	movl	url_pattern, %eax
-	movl	%eax, -4448(%ebp)
-	movl	do_global_passwd, %eax
-	movl	%eax, -4452(%ebp)
-	movl	do_vhost, %eax
-	movl	%eax, -4456(%ebp)
-	movl	no_symlink_check, %eax
-	movl	%eax, -4460(%ebp)
-	movl	no_log, %eax
-	movl	%eax, -4464(%ebp)
-	movl	max_age, %eax
-	movl	%eax, -4468(%ebp)
-	movl	p3p, %eax
-	movl	%eax, -4472(%ebp)
-	movl	charset, %eax
-	movl	%eax, -4476(%ebp)
-	movl	cgi_limit, %eax
-	movl	%eax, -4480(%ebp)
-	movl	cgi_pattern, %eax
-	movl	%eax, -4484(%ebp)
-	movzwl	port, %eax
-	movzwl	%ax, %eax
-	movl	%eax, -4488(%ebp)
-	movl	-4436(%ebp), %eax
-	testl	%eax, %eax
-	je	.L49
-	leal	-4256(%ebp), %ebx
-	jmp	.L50
-.L49:
-	movl	$0, %ebx
-.L50:
-	movl	-4440(%ebp), %eax
-	testl	%eax, %eax
-	je	.L51
-	leal	-4384(%ebp), %ecx
-	jmp	.L52
-.L51:
-	movl	$0, %ecx
-.L52:
-	movl	hostname, %edx
-	subl	$8, %esp
-	pushl	%esi
-	pushl	%edi
-	pushl	-4448(%ebp)
-	pushl	-4452(%ebp)
-	pushl	-4456(%ebp)
-	pushl	-4460(%ebp)
-	pushl	-4420(%ebp)
-	pushl	-4464(%ebp)
-	leal	-4125(%ebp), %eax
-	pushl	%eax
-	pushl	-4468(%ebp)
-	pushl	-4472(%ebp)
-	pushl	-4476(%ebp)
-	pushl	-4480(%ebp)
-	pushl	-4484(%ebp)
-	pushl	-4488(%ebp)
-	pushl	%ebx
-	pushl	%ecx
-	pushl	%edx
-	call	httpd_initialize
-	addl	$80, %esp
-	movl	%eax, hs
-	movl	hs, %eax
-	testl	%eax, %eax
-	jne	.L53
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L53:
-	subl	$12, %esp
-	pushl	$1
-	pushl	$120000
-	pushl	JunkClientData
-	pushl	$occasional
-	pushl	$0
-	call	tmr_create
-	addl	$32, %esp
-	testl	%eax, %eax
-	jne	.L54
-	subl	$8, %esp
-	pushl	$.LC32
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L54:
-	subl	$12, %esp
-	pushl	$1
-	pushl	$5000
-	pushl	JunkClientData
-	pushl	$idle
-	pushl	$0
-	call	tmr_create
-	addl	$32, %esp
-	testl	%eax, %eax
-	jne	.L55
-	subl	$8, %esp
-	pushl	$.LC33
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L55:
-	movl	numthrottles, %eax
-	testl	%eax, %eax
-	jle	.L56
-	subl	$12, %esp
-	pushl	$1
-	pushl	$2000
-	pushl	JunkClientData
-	pushl	$update_throttles
-	pushl	$0
-	call	tmr_create
-	addl	$32, %esp
-	testl	%eax, %eax
-	jne	.L56
-	subl	$8, %esp
-	pushl	$.LC34
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L56:
-	subl	$12, %esp
-	pushl	$1
-	pushl	$3600000
-	pushl	JunkClientData
-	pushl	$show_stats
-	pushl	$0
-	call	tmr_create
-	addl	$32, %esp
-	testl	%eax, %eax
-	jne	.L57
-	subl	$8, %esp
-	pushl	$.LC35
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L57:
-	subl	$12, %esp
-	pushl	$0
-	call	time
-	addl	$16, %esp
-	movl	%eax, stats_time
-	movl	stats_time, %eax
-	movl	%eax, start_time
-	movl	$0, stats_connections
-	movl	$0, stats_bytes
-	movl	$0, stats_simultaneous
-	call	getuid
-	testl	%eax, %eax
-	jne	.L58
-	subl	$8, %esp
-	pushl	$0
-	pushl	$0
-	call	setgroups
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L59
-	subl	$8, %esp
-	pushl	$.LC36
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L59:
-	subl	$12, %esp
-	pushl	-4424(%ebp)
-	call	setgid
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L60
-	subl	$8, %esp
-	pushl	$.LC37
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L60:
-	movl	user, %eax
-	subl	$8, %esp
-	pushl	-4424(%ebp)
-	pushl	%eax
-	call	initgroups
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L61
-	subl	$8, %esp
-	pushl	$.LC38
-	pushl	$4
-	call	syslog
-	addl	$16, %esp
-.L61:
-	subl	$12, %esp
-	pushl	-4428(%ebp)
-	call	setuid
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L62
-	subl	$8, %esp
-	pushl	$.LC39
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L62:
-	movl	do_chroot, %eax
-	testl	%eax, %eax
-	jne	.L58
-	subl	$8, %esp
-	pushl	$.LC40
-	pushl	$4
-	call	syslog
-	addl	$16, %esp
-.L58:
-	movl	max_connects, %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	malloc
-	addl	$16, %esp
-	movl	%eax, connects
-	movl	connects, %eax
-	testl	%eax, %eax
-	jne	.L63
-	subl	$8, %esp
-	pushl	$.LC41
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L63:
-	movl	$0, -4416(%ebp)
-	jmp	.L64
-.L65:
-	movl	connects, %ecx
-	movl	-4416(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	$0, (%eax)
-	movl	connects, %ecx
-	movl	-4416(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	-4416(%ebp), %edx
-	addl	$1, %edx
-	movl	%edx, 4(%eax)
-	movl	connects, %ecx
-	movl	-4416(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	$0, 8(%eax)
-	addl	$1, -4416(%ebp)
-.L64:
-	movl	max_connects, %eax
-	cmpl	%eax, -4416(%ebp)
-	jl	.L65
-	movl	connects, %edx
-	movl	max_connects, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$5, %eax
-	subl	$96, %eax
-	addl	%edx, %eax
-	movl	$-1, 4(%eax)
-	movl	$0, first_free_connect
-	movl	$0, num_connects
-	movl	$0, httpd_conn_count
-	movl	hs, %eax
-	testl	%eax, %eax
-	je	.L66
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L67
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	subl	$4, %esp
-	pushl	$0
-	pushl	$0
-	pushl	%eax
-	call	fdwatch_add_fd
-	addl	$16, %esp
-.L67:
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L66
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	subl	$4, %esp
-	pushl	$0
-	pushl	$0
-	pushl	%eax
-	call	fdwatch_add_fd
-	addl	$16, %esp
-.L66:
-	subl	$12, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	tmr_prepare_timeval
-	addl	$16, %esp
-	jmp	.L68
-.L85:
-	movl	got_hup, %eax
-	testl	%eax, %eax
-	je	.L69
-	call	re_open_logfile
-	movl	$0, got_hup
-.L69:
-	subl	$12, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	tmr_mstimeout
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch
-	addl	$16, %esp
-	movl	%eax, -4404(%ebp)
-	cmpl	$0, -4404(%ebp)
-	jns	.L70
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$4, %eax
-	je	.L71
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$11, %eax
-	jne	.L72
-.L71:
-	jmp	.L68
-.L72:
-	subl	$8, %esp
-	pushl	$.LC42
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L70:
-	subl	$12, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	tmr_prepare_timeval
-	addl	$16, %esp
-	cmpl	$0, -4404(%ebp)
-	jne	.L73
-	subl	$12, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	tmr_run
-	addl	$16, %esp
-	jmp	.L68
-.L73:
-	movl	hs, %eax
-	testl	%eax, %eax
-	je	.L74
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L74
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_check_fd
-	addl	$16, %esp
-	testl	%eax, %eax
-	je	.L74
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	subl	$8, %esp
-	pushl	%eax
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	handle_newconnect
-	addl	$16, %esp
-	testl	%eax, %eax
-	je	.L74
-	jmp	.L68
-.L74:
-	movl	hs, %eax
-	testl	%eax, %eax
-	je	.L75
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L75
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_check_fd
-	addl	$16, %esp
-	testl	%eax, %eax
-	je	.L75
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	subl	$8, %esp
-	pushl	%eax
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	handle_newconnect
-	addl	$16, %esp
-	testl	%eax, %eax
-	je	.L75
-	jmp	.L68
-.L75:
-	jmp	.L76
-.L82:
-	cmpl	$0, -4400(%ebp)
-	jne	.L77
-	jmp	.L76
-.L77:
-	movl	-4400(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	%eax, -4396(%ebp)
-	movl	-4396(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_check_fd
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L78
-	subl	$8, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	pushl	-4400(%ebp)
-	call	clear_connection
-	addl	$16, %esp
-	jmp	.L76
-.L78:
-	movl	-4400(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$2, %eax
-	je	.L79
-	cmpl	$4, %eax
-	je	.L80
-	cmpl	$1, %eax
-	je	.L81
-	jmp	.L76
-.L81:
-	subl	$8, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	pushl	-4400(%ebp)
-	call	handle_read
-	addl	$16, %esp
-	jmp	.L76
-.L79:
-	subl	$8, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	pushl	-4400(%ebp)
-	call	handle_send
-	addl	$16, %esp
-	jmp	.L76
-.L80:
-	subl	$8, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	pushl	-4400(%ebp)
-	call	handle_linger
-	addl	$16, %esp
-	nop
-.L76:
-	call	fdwatch_get_next_client_data
-	movl	%eax, -4400(%ebp)
-	cmpl	$-1, -4400(%ebp)
-	jne	.L82
-	subl	$12, %esp
-	leal	-4392(%ebp), %eax
-	pushl	%eax
-	call	tmr_run
-	addl	$16, %esp
-	movl	got_usr1, %eax
-	testl	%eax, %eax
-	je	.L68
-	movl	terminate, %eax
-	testl	%eax, %eax
-	jne	.L68
-	movl	$1, terminate
-	movl	hs, %eax
-	testl	%eax, %eax
-	je	.L68
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L83
-	movl	hs, %eax
-	movl	40(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-.L83:
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L84
-	movl	hs, %eax
-	movl	44(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-.L84:
-	movl	hs, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	httpd_unlisten
-	addl	$16, %esp
-.L68:
-	movl	terminate, %eax
-	testl	%eax, %eax
-	je	.L85
-	movl	num_connects, %eax
-	testl	%eax, %eax
-	jg	.L85
+.LVL159:
+	.cfi_endproc
+.LFE78:
+	.size	e_strdup.part.4, .-e_strdup.part.4
+	.section	.text.unlikely
+.LCOLDE41:
+	.text
+.LHOTE41:
+	.section	.rodata.str1.1
+.LC42:
+	.string	"exiting"
+	.section	.text.unlikely
+.LCOLDB43:
+	.text
+.LHOTB43:
+	.p2align 4,,15
+	.type	handle_usr1, @function
+handle_usr1:
+.LFB43:
+	.loc 1 257 0
+	.cfi_startproc
+.LVL160:
+	.loc 1 260 0
+	movl	num_connects(%rip), %edx
+	testl	%edx, %edx
+	je	.L169
+	.loc 1 273 0
+	movl	$1, got_usr1(%rip)
+	ret
+.L169:
+.LVL161:
+	.loc 1 257 0
+	pushq	%rax
+	.cfi_def_cfa_offset 16
+.LBB205:
+.LBB206:
+	.loc 1 266 0
 	call	shut_down
-	subl	$8, %esp
-	pushl	$.LC2
-	pushl	$5
+.LVL162:
+	.loc 1 267 0
+	movl	$5, %edi
+	movl	$.LC42, %esi
+	xorl	%eax, %eax
 	call	syslog
-	addl	$16, %esp
+.LVL163:
+	.loc 1 268 0
 	call	closelog
-	subl	$12, %esp
-	pushl	$0
+.LVL164:
+	.loc 1 269 0
+	xorl	%edi, %edi
 	call	exit
+.LVL165:
+.LBE206:
+.LBE205:
 	.cfi_endproc
-.LFE7:
-	.size	main, .-main
-	.section	.rodata
-.LC43:
-	.string	"nobody"
+.LFE43:
+	.size	handle_usr1, .-handle_usr1
+	.section	.text.unlikely
+.LCOLDE43:
+	.text
+.LHOTE43:
+	.section	.rodata.str1.1
 .LC44:
-	.string	"iso-8859-1"
+	.string	"nobody"
 .LC45:
-	.string	""
+	.string	"iso-8859-1"
 .LC46:
-	.string	"-V"
-.LC47:
 	.string	"thttpd/2.26.2 April 4, 2012"
+.LC47:
+	.string	"r"
 .LC48:
-	.string	"-C"
+	.string	" \t\n\r"
 .LC49:
-	.string	"-p"
+	.string	"debug"
 .LC50:
-	.string	"-d"
+	.string	"port"
 .LC51:
-	.string	"-r"
+	.string	"dir"
 .LC52:
-	.string	"-nor"
+	.string	"chroot"
 .LC53:
-	.string	"-dd"
+	.string	"nochroot"
 .LC54:
-	.string	"-s"
+	.string	"data_dir"
 .LC55:
-	.string	"-nos"
+	.string	"symlink"
 .LC56:
-	.string	"-u"
+	.string	"nosymlink"
 .LC57:
-	.string	"-c"
+	.string	"symlinks"
 .LC58:
-	.string	"-t"
+	.string	"nosymlinks"
 .LC59:
-	.string	"-h"
+	.string	"user"
 .LC60:
-	.string	"-l"
+	.string	"cgipat"
 .LC61:
-	.string	"-v"
+	.string	"cgilimit"
 .LC62:
-	.string	"-nov"
+	.string	"urlpat"
 .LC63:
-	.string	"-g"
+	.string	"noemptyreferers"
 .LC64:
-	.string	"-nog"
+	.string	"localpat"
 .LC65:
-	.string	"-i"
+	.string	"throttles"
 .LC66:
-	.string	"-T"
+	.string	"host"
 .LC67:
-	.string	"-P"
+	.string	"logfile"
 .LC68:
-	.string	"-M"
+	.string	"vhost"
 .LC69:
-	.string	"-D"
-	.text
-	.type	parse_args, @function
-parse_args:
-.LFB8:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	movl	$0, debug
-	movw	$80, port
-	movl	$0, dir
-	movl	$0, data_dir
-	movl	$0, do_chroot
-	movl	$0, no_log
-	movl	do_chroot, %eax
-	movl	%eax, no_symlink_check
-	movl	$0, do_vhost
-	movl	$0, do_global_passwd
-	movl	$0, cgi_pattern
-	movl	$0, cgi_limit
-	movl	$0, url_pattern
-	movl	$0, no_empty_referers
-	movl	$0, local_pattern
-	movl	$0, throttlefile
-	movl	$0, hostname
-	movl	$0, logfile
-	movl	$0, pidfile
-	movl	$.LC43, user
-	movl	$.LC44, charset
-	movl	$.LC45, p3p
-	movl	$-1, max_age
-	movl	$1, -12(%ebp)
-	jmp	.L88
-.L114:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC46
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L89
-	subl	$12, %esp
-	pushl	$.LC47
-	call	puts
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$0
-	call	exit
-.L89:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC48
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L90
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L90
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	read_config
-	addl	$16, %esp
-	jmp	.L91
-.L90:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC49
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L92
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L92
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	atoi
-	addl	$16, %esp
-	movw	%ax, port
-	jmp	.L91
-.L92:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC50
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L93
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L93
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, dir
-	jmp	.L91
-.L93:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC51
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L94
-	movl	$1, do_chroot
-	movl	$1, no_symlink_check
-	jmp	.L91
-.L94:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC52
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L95
-	movl	$0, do_chroot
-	movl	$0, no_symlink_check
-	jmp	.L91
-.L95:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC53
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L96
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L96
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, data_dir
-	jmp	.L91
-.L96:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC54
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L97
-	movl	$0, no_symlink_check
-	jmp	.L91
-.L97:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC55
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L98
-	movl	$1, no_symlink_check
-	jmp	.L91
-.L98:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC56
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L99
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L99
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, user
-	jmp	.L91
-.L99:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC57
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L100
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L100
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, cgi_pattern
-	jmp	.L91
-.L100:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC58
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L101
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L101
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, throttlefile
-	jmp	.L91
-.L101:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC59
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L102
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L102
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, hostname
-	jmp	.L91
-.L102:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC60
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L103
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L103
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, logfile
-	jmp	.L91
-.L103:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC61
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L104
-	movl	$1, do_vhost
-	jmp	.L91
-.L104:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC62
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L105
-	movl	$0, do_vhost
-	jmp	.L91
-.L105:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC63
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L106
-	movl	$1, do_global_passwd
-	jmp	.L91
-.L106:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC64
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L107
-	movl	$0, do_global_passwd
-	jmp	.L91
-.L107:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC65
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L108
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L108
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, pidfile
-	jmp	.L91
-.L108:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC66
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L109
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L109
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, charset
-	jmp	.L91
-.L109:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC67
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L110
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L110
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movl	%eax, p3p
-	jmp	.L91
-.L110:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC68
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L111
-	movl	-12(%ebp), %eax
-	addl	$1, %eax
-	cmpl	8(%ebp), %eax
-	jge	.L111
-	addl	$1, -12(%ebp)
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	atoi
-	addl	$16, %esp
-	movl	%eax, max_age
-	jmp	.L91
-.L111:
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC69
-	pushl	%eax
-	call	strcmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L112
-	movl	$1, debug
-	jmp	.L91
-.L112:
-	call	usage
-.L91:
-	addl	$1, -12(%ebp)
-.L88:
-	movl	-12(%ebp), %eax
-	cmpl	8(%ebp), %eax
-	jge	.L113
-	movl	-12(%ebp), %eax
-	leal	0(,%eax,4), %edx
-	movl	12(%ebp), %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	movzbl	(%eax), %eax
-	cmpb	$45, %al
-	je	.L114
-.L113:
-	movl	-12(%ebp), %eax
-	cmpl	8(%ebp), %eax
-	je	.L87
-	call	usage
-.L87:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE8:
-	.size	parse_args, .-parse_args
-	.section	.rodata
-	.align 4
+	.string	"novhost"
 .LC70:
-	.string	"usage:  %s [-C configfile] [-p port] [-d dir] [-r|-nor] [-dd data_dir] [-s|-nos] [-v|-nov] [-g|-nog] [-u user] [-c cgipat] [-t throttles] [-h host] [-l logfile] [-i pidfile] [-T charset] [-P P3P] [-M maxage] [-V] [-D]\n"
-	.text
-	.type	usage, @function
-usage:
-.LFB9:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	$.LC70
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-	.cfi_endproc
-.LFE9:
-	.size	usage, .-usage
-	.section	.rodata
+	.string	"globalpasswd"
 .LC71:
-	.string	"r"
+	.string	"noglobalpasswd"
 .LC72:
-	.string	" \t\n\r"
+	.string	"pidfile"
 .LC73:
-	.string	"debug"
+	.string	"charset"
 .LC74:
-	.string	"port"
+	.string	"p3p"
 .LC75:
-	.string	"dir"
+	.string	"max_age"
+	.section	.rodata.str1.8
+	.align 8
 .LC76:
-	.string	"nochroot"
+	.string	"%s: unknown config option '%s'\n"
+	.section	.rodata.str1.1
 .LC77:
-	.string	"data_dir"
+	.string	"-nor"
 .LC78:
-	.string	"symlink"
+	.string	"-nos"
 .LC79:
-	.string	"nosymlink"
+	.string	"-nov"
 .LC80:
-	.string	"symlinks"
+	.string	"-nog"
 .LC81:
-	.string	"nosymlinks"
+	.string	"%d"
 .LC82:
-	.string	"user"
+	.string	"getaddrinfo %.80s - %.80s"
 .LC83:
-	.string	"cgipat"
+	.string	"%s: getaddrinfo %s - %s\n"
+	.section	.rodata.str1.8
+	.align 8
 .LC84:
-	.string	"cgilimit"
+	.string	"%.80s - sockaddr too small (%lu < %lu)"
+	.section	.rodata.str1.1
 .LC85:
-	.string	"urlpat"
+	.string	"can't find any valid address"
+	.section	.rodata.str1.8
+	.align 8
 .LC86:
-	.string	"noemptyreferers"
+	.string	"%s: can't find any valid address\n"
+	.section	.rodata.str1.1
 .LC87:
-	.string	"localpat"
+	.string	"%.80s - %m"
 .LC88:
-	.string	"throttles"
+	.string	" %4900[^ \t] %ld-%ld"
 .LC89:
-	.string	"host"
+	.string	" %4900[^ \t] %ld"
+	.section	.rodata.str1.8
+	.align 8
 .LC90:
-	.string	"logfile"
+	.string	"unparsable line in %.80s - %.80s"
+	.align 8
 .LC91:
-	.string	"vhost"
+	.string	"%s: unparsable line in %.80s - %.80s\n"
+	.section	.rodata.str1.1
 .LC92:
-	.string	"novhost"
+	.string	"|/"
+	.section	.rodata.str1.8
+	.align 8
 .LC93:
-	.string	"globalpasswd"
+	.string	"out of memory allocating a throttletab"
+	.align 8
 .LC94:
-	.string	"noglobalpasswd"
+	.string	"%s: out of memory allocating a throttletab\n"
+	.section	.rodata.str1.1
 .LC95:
-	.string	"pidfile"
+	.string	"unknown user - '%.80s'"
 .LC96:
-	.string	"charset"
+	.string	"%s: unknown user - '%s'\n"
 .LC97:
-	.string	"p3p"
+	.string	"/dev/null"
 .LC98:
-	.string	"max_age"
-	.align 4
+	.string	"a"
+	.section	.rodata.str1.8
+	.align 8
 .LC99:
-	.string	"%s: unknown config option '%s'\n"
-	.text
-	.type	read_config, @function
-read_config:
-.LFB10:
+	.string	"logfile is not an absolute path, you may not be able to re-open it"
+	.align 8
+.LC100:
+	.string	"%s: logfile is not an absolute path, you may not be able to re-open it\n"
+	.section	.rodata.str1.1
+.LC101:
+	.string	"fchown logfile - %m"
+.LC102:
+	.string	"fchown logfile"
+.LC103:
+	.string	"chdir - %m"
+.LC104:
+	.string	"chdir"
+.LC105:
+	.string	"daemon - %m"
+.LC106:
+	.string	"w"
+.LC107:
+	.string	"%d\n"
+	.section	.rodata.str1.8
+	.align 8
+.LC108:
+	.string	"fdwatch initialization failure"
+	.section	.rodata.str1.1
+.LC109:
+	.string	"chroot - %m"
+	.section	.rodata.str1.8
+	.align 8
+.LC110:
+	.string	"logfile is not within the chroot tree, you will not be able to re-open it"
+	.align 8
+.LC111:
+	.string	"%s: logfile is not within the chroot tree, you will not be able to re-open it\n"
+	.section	.rodata.str1.1
+.LC112:
+	.string	"chroot chdir - %m"
+.LC113:
+	.string	"chroot chdir"
+.LC114:
+	.string	"data_dir chdir - %m"
+.LC115:
+	.string	"data_dir chdir"
+.LC116:
+	.string	"tmr_create(occasional) failed"
+.LC117:
+	.string	"tmr_create(idle) failed"
+	.section	.rodata.str1.8
+	.align 8
+.LC118:
+	.string	"tmr_create(update_throttles) failed"
+	.section	.rodata.str1.1
+.LC119:
+	.string	"tmr_create(show_stats) failed"
+.LC120:
+	.string	"setgroups - %m"
+.LC121:
+	.string	"setgid - %m"
+.LC122:
+	.string	"initgroups - %m"
+.LC123:
+	.string	"setuid - %m"
+	.section	.rodata.str1.8
+	.align 8
+.LC124:
+	.string	"started as root without requesting chroot(), warning only"
+	.align 8
+.LC125:
+	.string	"out of memory allocating a connecttab"
+	.section	.rodata.str1.1
+.LC126:
+	.string	"re-opening logfile"
+.LC127:
+	.string	"re-opening %.80s - %m"
+.LC128:
+	.string	"fdwatch - %m"
+	.section	.rodata.str1.8
+	.align 8
+.LC129:
+	.string	"throttle sending count was negative - shouldn't happen!"
+	.align 8
+.LC130:
+	.string	"replacing non-null wakeup_timer!"
+	.align 8
+.LC131:
+	.string	"tmr_create(wakeup_connection) failed"
+	.section	.rodata.str1.1
+.LC132:
+	.string	"write - %m sending %.80s"
+	.section	.text.unlikely
+.LCOLDB133:
+	.section	.text.startup,"ax",@progbits
+.LHOTB133:
+	.p2align 4,,15
+	.globl	main
+	.type	main, @function
+main:
+.LFB47:
+	.loc 1 351 0
 	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$10056, %esp
-	movl	8(%ebp), %eax
-	movl	%eax, -10044(%ebp)
-	movl	%gs:20, %eax
-	movl	%eax, -12(%ebp)
-	xorl	%eax, %eax
-	subl	$8, %esp
-	pushl	$.LC71
-	pushl	-10044(%ebp)
+.LVL166:
+	pushq	%r15
+	.cfi_def_cfa_offset 16
+	.cfi_offset 15, -16
+	pushq	%r14
+	.cfi_def_cfa_offset 24
+	.cfi_offset 14, -24
+	pushq	%r13
+	.cfi_def_cfa_offset 32
+	.cfi_offset 13, -32
+	pushq	%r12
+	.cfi_def_cfa_offset 40
+	.cfi_offset 12, -40
+	movq	%rsi, %r12
+	pushq	%rbp
+	.cfi_def_cfa_offset 48
+	.cfi_offset 6, -48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	.cfi_offset 3, -56
+	movl	%edi, %ebp
+	subq	$20344, %rsp
+	.cfi_def_cfa_offset 20400
+	.loc 1 367 0
+	movq	(%rsi), %rbx
+	.loc 1 369 0
+	movl	$47, %esi
+.LVL167:
+	movq	%rbx, %rdi
+.LVL168:
+	.loc 1 367 0
+	movq	%rbx, argv0(%rip)
+	.loc 1 369 0
+	call	strrchr
+.LVL169:
+	.loc 1 371 0
+	leaq	1(%rax), %rdx
+	testq	%rax, %rax
+	.loc 1 374 0
+	movl	$9, %esi
+	.loc 1 371 0
+	cmovne	%rdx, %rbx
+.LVL170:
+	.loc 1 374 0
+	movl	$24, %edx
+	movq	%rbx, %rdi
+	call	openlog
+.LVL171:
+.LBB391:
+.LBB392:
+	.loc 1 837 0
+	movl	$80, %eax
+	.loc 1 879 0
+	cmpl	$1, %ebp
+	.loc 1 836 0
+	movl	$0, debug(%rip)
+	.loc 1 837 0
+	movw	%ax, port(%rip)
+	.loc 1 838 0
+	movq	$0, dir(%rip)
+	.loc 1 839 0
+	movq	$0, data_dir(%rip)
+	.loc 1 843 0
+	movl	$0, do_chroot(%rip)
+	.loc 1 845 0
+	movl	$0, no_log(%rip)
+	.loc 1 846 0
+	movl	$0, no_symlink_check(%rip)
+	.loc 1 850 0
+	movl	$0, do_vhost(%rip)
+	.loc 1 855 0
+	movl	$0, do_global_passwd(%rip)
+	.loc 1 860 0
+	movq	$0, cgi_pattern(%rip)
+	.loc 1 865 0
+	movl	$0, cgi_limit(%rip)
+	.loc 1 867 0
+	movq	$0, url_pattern(%rip)
+	.loc 1 868 0
+	movl	$0, no_empty_referers(%rip)
+	.loc 1 869 0
+	movq	$0, local_pattern(%rip)
+	.loc 1 870 0
+	movq	$0, throttlefile(%rip)
+	.loc 1 871 0
+	movq	$0, hostname(%rip)
+	.loc 1 872 0
+	movq	$0, logfile(%rip)
+	.loc 1 873 0
+	movq	$0, pidfile(%rip)
+	.loc 1 874 0
+	movq	$.LC44, user(%rip)
+	.loc 1 875 0
+	movq	$.LC45, charset(%rip)
+	.loc 1 876 0
+	movq	$.LC26, p3p(%rip)
+	.loc 1 877 0
+	movl	$-1, max_age(%rip)
+.LVL172:
+	.loc 1 879 0
+	jle	.L469
+	movq	8(%r12), %r9
+	cmpb	$45, (%r9)
+	jne	.L453
+	movl	$1, %eax
+	jmp	.L282
+.LVL173:
+.L732:
+	.loc 1 881 0
+	cmpb	$0, 2(%r9)
+	je	.L731
+.LVL174:
+.L174:
+.LBB393:
+	.loc 1 906 0
+	movl	$.LC77, %edi
+	movl	$5, %ecx
+	movq	%r9, %rsi
+.LBE393:
+	repz; cmpsb
+	jne	.L248
+	.loc 1 908 0
+	movl	$0, do_chroot(%rip)
+	.loc 1 909 0
+	movl	$0, no_symlink_check(%rip)
+.LVL175:
+.L244:
+	.loc 1 977 0
+	addl	$1, %eax
+.LVL176:
+	.loc 1 879 0
+	cmpl	%eax, %ebp
+	jle	.L172
+	movslq	%eax, %rdx
+.LVL177:
+	movq	(%r12,%rdx,8), %r9
+	cmpb	$45, (%r9)
+	jne	.L453
+.LVL178:
+.L282:
+.LBB394:
+.LBB395:
+	.loc 1 881 0
+	movzbl	(%r9), %r8d
+.LVL179:
+	subl	$45, %r8d
+.LVL180:
+	jne	.L174
+	movzbl	1(%r9), %edx
+.LVL181:
+	cmpb	$86, %dl
+	je	.L732
+.LVL182:
+.LBE395:
+.LBE394:
+.LBB396:
+.LBB397:
+	.loc 1 886 0
+	cmpb	$67, %dl
+	jne	.L470
+.LVL183:
+.LBE397:
+.LBE396:
+	cmpb	$0, 2(%r9)
+	jne	.L174
+	leal	1(%rax), %ecx
+	cmpl	%ecx, %ebp
+	movl	%ecx, 8(%rsp)
+	jle	.L174
+.LVL184:
+	.loc 1 889 0
+	movslq	8(%rsp), %rax
+.LBB398:
+.LBB399:
+	.loc 1 1004 0
+	movl	$.LC47, %esi
+.LBE399:
+.LBE398:
+	.loc 1 889 0
+	movq	(%r12,%rax,8), %rbx
+.LVL185:
+.LBB507:
+.LBB489:
+	.loc 1 1004 0
+	movq	%rbx, %rdi
 	call	fopen
-	addl	$16, %esp
-	movl	%eax, -10020(%ebp)
-	cmpl	$0, -10020(%ebp)
-	jne	.L118
-	subl	$12, %esp
-	pushl	-10044(%ebp)
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L118:
-	jmp	.L119
-.L154:
-	subl	$8, %esp
-	pushl	$35
-	leal	-10012(%ebp), %eax
-	pushl	%eax
+.LVL186:
+	.loc 1 1005 0
+	testq	%rax, %rax
+	.loc 1 1004 0
+	movq	%rax, %r14
+.LVL187:
+	.loc 1 1005 0
+	je	.L733
+.LVL188:
+.L179:
+	.loc 1 1011 0
+	leaq	10336(%rsp), %rdi
+	movq	%r14, %rdx
+	movl	$10000, %esi
+	call	fgets
+.LVL189:
+	testq	%rax, %rax
+	je	.L734
+	.loc 1 1014 0
+	leaq	10336(%rsp), %rdi
+	movl	$35, %esi
 	call	strchr
-	addl	$16, %esp
-	movl	%eax, -10032(%ebp)
-	cmpl	$0, -10032(%ebp)
-	je	.L120
-	movl	-10032(%ebp), %eax
-	movb	$0, (%eax)
-.L120:
-	leal	-10012(%ebp), %eax
-	movl	%eax, -10032(%ebp)
-	subl	$8, %esp
-	pushl	$.LC72
-	pushl	-10032(%ebp)
+.LVL190:
+	testq	%rax, %rax
+	je	.L180
+	.loc 1 1015 0
+	movb	$0, (%rax)
+.L180:
+.LVL191:
+.LBB400:
+	.loc 1 1019 0
+	leaq	10336(%rsp), %rdi
+.LVL192:
+	movl	$.LC48, %esi
 	call	strspn
-	addl	$16, %esp
-	addl	%eax, -10032(%ebp)
-	jmp	.L121
-.L153:
-	subl	$8, %esp
-	pushl	$.LC72
-	pushl	-10032(%ebp)
+.LVL193:
+.LBE400:
+	leaq	10336(%rsp), %rcx
+.LVL194:
+	leaq	(%rcx,%rax), %rbx
+.LVL195:
+	.loc 1 1022 0
+	cmpb	$0, (%rbx)
+	je	.L179
+	.p2align 4,,10
+	.p2align 3
+.L604:
+.LVL196:
+.LBB401:
+	.loc 1 1025 0
+	movl	$.LC48, %esi
+	movq	%rbx, %rdi
 	call	strcspn
-	addl	$16, %esp
-	movl	%eax, %edx
-	movl	-10032(%ebp), %eax
-	addl	%edx, %eax
-	movl	%eax, -10028(%ebp)
-	jmp	.L122
-.L123:
-	movl	-10028(%ebp), %eax
-	leal	1(%eax), %edx
-	movl	%edx, -10028(%ebp)
-	movb	$0, (%eax)
-.L122:
-	movl	-10028(%ebp), %eax
-	movzbl	(%eax), %eax
-	cmpb	$32, %al
-	je	.L123
-	movl	-10028(%ebp), %eax
-	movzbl	(%eax), %eax
-	cmpb	$9, %al
-	je	.L123
-	movl	-10028(%ebp), %eax
-	movzbl	(%eax), %eax
-	cmpb	$10, %al
-	je	.L123
-	movl	-10028(%ebp), %eax
-	movzbl	(%eax), %eax
+.LVL197:
+.LBE401:
+	leaq	(%rbx,%rax), %r13
+.LVL198:
+	.loc 1 1027 0
+	movzbl	0(%r13), %eax
 	cmpb	$13, %al
-	je	.L123
-	movl	-10032(%ebp), %eax
-	movl	%eax, -10016(%ebp)
-	subl	$8, %esp
-	pushl	$61
-	pushl	-10016(%ebp)
+	sete	%sil
+	cmpb	$32, %al
+	sete	%dl
+	orb	%dl, %sil
+	jne	.L612
+	subl	$9, %eax
+	cmpb	$1, %al
+	ja	.L182
+	.p2align 4,,10
+	.p2align 3
+.L612:
+	.loc 1 1028 0
+	addq	$1, %r13
+.LVL199:
+	.loc 1 1027 0
+	movzbl	0(%r13), %r8d
+	.loc 1 1028 0
+	movb	$0, -1(%r13)
+	.loc 1 1027 0
+	cmpb	$13, %r8b
+	sete	%dl
+	cmpb	$32, %r8b
+	sete	%al
+	orb	%al, %dl
+	jne	.L612
+	subl	$9, %r8d
+	cmpb	$1, %r8b
+	jbe	.L612
+.L182:
+.LVL200:
+	.loc 1 1031 0
+	movl	$61, %esi
+	movq	%rbx, %rdi
 	call	strchr
-	addl	$16, %esp
-	movl	%eax, -10024(%ebp)
-	cmpl	$0, -10024(%ebp)
-	je	.L124
-	movl	-10024(%ebp), %eax
-	leal	1(%eax), %edx
-	movl	%edx, -10024(%ebp)
-	movb	$0, (%eax)
-.L124:
-	subl	$8, %esp
-	pushl	$.LC73
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L125
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, debug
-	jmp	.L126
-.L125:
-	subl	$8, %esp
-	pushl	$.LC74
-	pushl	-10016(%ebp)
+.LVL201:
+	.loc 1 1032 0
+	testq	%rax, %rax
+	je	.L185
+	.loc 1 1033 0
+	movb	$0, (%rax)
+	.loc 1 1035 0
+	movl	$.LC49, %esi
+	movq	%rbx, %rdi
+	.loc 1 1033 0
+	leaq	1(%rax), %r15
+.LVL202:
+	.loc 1 1035 0
 	call	strcasecmp
-	addl	$16, %esp
+.LVL203:
 	testl	%eax, %eax
-	jne	.L127
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	atoi
-	addl	$16, %esp
-	movw	%ax, port
-	jmp	.L126
-.L127:
-	subl	$8, %esp
-	pushl	$.LC75
-	pushl	-10016(%ebp)
+	jne	.L186
+.LVL204:
+.LBB402:
+.LBB403:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LVL205:
+.L187:
+.LBE403:
+.LBE402:
+	.loc 1 1038 0
+	movl	$1, debug(%rip)
+.L188:
+.LVL206:
+.LBB404:
+	.loc 1 1181 0
+	movl	$.LC48, %esi
+	movq	%r13, %rdi
+	call	strspn
+.LVL207:
+.LBE404:
+	leaq	0(%r13,%rax), %rbx
+.LVL208:
+	.loc 1 1022 0
+	cmpb	$0, (%rbx)
+	jne	.L604
+	jmp	.L179
+.LVL209:
+.L470:
+.LBE489:
+.LBE507:
+.LBB508:
+.LBB509:
+	.loc 1 891 0
+	cmpb	$112, %dl
+	jne	.L245
+.LVL210:
+.LBE509:
+.LBE508:
+	cmpb	$0, 2(%r9)
+	jne	.L174
+	leal	1(%rax), %ebx
+	cmpl	%ebx, %ebp
+	jle	.L174
+.LVL211:
+	.loc 1 894 0
+	movslq	%ebx, %rax
+.LBB510:
+.LBB511:
+	.file 2 "/usr/include/stdlib.h"
+	.loc 2 286 0
+	movl	$10, %edx
+.LVL212:
+	xorl	%esi, %esi
+	movq	(%r12,%rax,8), %rdi
+	call	strtol
+.LVL213:
+.LBE511:
+.LBE510:
+	.loc 1 894 0
+	movw	%ax, port(%rip)
+	movl	%ebx, %eax
+	jmp	.L244
+.LVL214:
+.L731:
+	.loc 1 883 0
+	movl	$.LC46, %edi
+	call	puts
+.LVL215:
+	.loc 1 884 0
+	xorl	%edi, %edi
+	call	exit
+.LVL216:
+	.p2align 4,,10
+	.p2align 3
+.L186:
+.LBB512:
+.LBB490:
+	.loc 1 1040 0
+	movl	$.LC50, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL217:
 	testl	%eax, %eax
-	jne	.L128
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, dir
-	jmp	.L126
-.L128:
-	subl	$8, %esp
-	pushl	$.LC25
-	pushl	-10016(%ebp)
+	jne	.L189
+.LVL218:
+.LBB405:
+.LBB406:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL219:
+.LBE406:
+.LBE405:
+.LBB407:
+.LBB408:
+	.loc 2 286 0
+	movl	$10, %edx
+	xorl	%esi, %esi
+	movq	%r15, %rdi
+	call	strtol
+.LVL220:
+.LBE408:
+.LBE407:
+	.loc 1 1043 0
+	movw	%ax, port(%rip)
+	jmp	.L188
+.LVL221:
+.L189:
+	.loc 1 1045 0
+	movl	$.LC51, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL222:
 	testl	%eax, %eax
-	jne	.L129
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, do_chroot
-	movl	$1, no_symlink_check
-	jmp	.L126
-.L129:
-	subl	$8, %esp
-	pushl	$.LC76
-	pushl	-10016(%ebp)
+	jne	.L191
+.LVL223:
+.LBB409:
+.LBB410:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL224:
+.LBE410:
+.LBE409:
+.LBB411:
+.LBB412:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL225:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE412:
+.LBE411:
+	.loc 1 1048 0
+	movq	%rax, dir(%rip)
+	jmp	.L188
+.LVL226:
+.L185:
+	.loc 1 1035 0
+	movl	$.LC49, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL227:
 	testl	%eax, %eax
-	jne	.L130
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$0, do_chroot
-	movl	$0, no_symlink_check
-	jmp	.L126
-.L130:
-	subl	$8, %esp
-	pushl	$.LC77
-	pushl	-10016(%ebp)
+	je	.L187
+	.loc 1 1040 0
+	movl	$.LC50, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL228:
 	testl	%eax, %eax
-	jne	.L131
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, data_dir
-	jmp	.L126
-.L131:
-	subl	$8, %esp
-	pushl	$.LC78
-	pushl	-10016(%ebp)
+	jne	.L735
+.LVL229:
+.L720:
+.LBB414:
+.LBB415:
+	movq	%rbx, %rdi
+	call	value_required.part.2
+.LVL230:
+.L191:
+.LBE415:
+.LBE414:
+	.loc 1 1050 0
+	movl	$.LC52, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL231:
 	testl	%eax, %eax
-	jne	.L132
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$0, no_symlink_check
-	jmp	.L126
-.L132:
-	subl	$8, %esp
-	pushl	$.LC79
-	pushl	-10016(%ebp)
+	jne	.L194
+.LVL232:
+.LBB417:
+.LBB418:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LVL233:
+.L195:
+.LBE418:
+.LBE417:
+	.loc 1 1053 0
+	movl	$1, do_chroot(%rip)
+	.loc 1 1054 0
+	movl	$1, no_symlink_check(%rip)
+	jmp	.L188
+.LVL234:
+.L735:
+	.loc 1 1045 0
+	movl	$.LC51, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL235:
 	testl	%eax, %eax
-	jne	.L133
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, no_symlink_check
-	jmp	.L126
-.L133:
-	subl	$8, %esp
-	pushl	$.LC80
-	pushl	-10016(%ebp)
+	je	.L720
+	.loc 1 1050 0
+	movl	$.LC52, %esi
+	movq	%rbx, %rdi
+	.loc 1 1045 0
+	xorl	%r15d, %r15d
+	.loc 1 1050 0
 	call	strcasecmp
-	addl	$16, %esp
+.LVL236:
 	testl	%eax, %eax
-	jne	.L134
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$0, no_symlink_check
-	jmp	.L126
-.L134:
-	subl	$8, %esp
-	pushl	$.LC81
-	pushl	-10016(%ebp)
+	je	.L195
+.LVL237:
+.L194:
+	.loc 1 1056 0
+	movl	$.LC53, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL238:
 	testl	%eax, %eax
-	jne	.L135
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, no_symlink_check
-	jmp	.L126
-.L135:
-	subl	$8, %esp
-	pushl	$.LC82
-	pushl	-10016(%ebp)
+	jne	.L196
+.LVL239:
+.LBB419:
+.LBB420:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE420:
+.LBE419:
+	.loc 1 1059 0
+	movl	$0, do_chroot(%rip)
+	.loc 1 1060 0
+	movl	$0, no_symlink_check(%rip)
+	jmp	.L188
+.L196:
+	.loc 1 1062 0
+	movl	$.LC54, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL240:
 	testl	%eax, %eax
-	jne	.L136
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, user
-	jmp	.L126
-.L136:
-	subl	$8, %esp
-	pushl	$.LC83
-	pushl	-10016(%ebp)
+	jne	.L198
+.LVL241:
+.LBB421:
+.LBB422:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL242:
+.LBE422:
+.LBE421:
+.LBB423:
+.LBB424:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL243:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE424:
+.LBE423:
+	.loc 1 1065 0
+	movq	%rax, data_dir(%rip)
+	jmp	.L188
+.LVL244:
+.L198:
+	.loc 1 1067 0
+	movl	$.LC55, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL245:
 	testl	%eax, %eax
-	jne	.L137
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, cgi_pattern
-	jmp	.L126
-.L137:
-	subl	$8, %esp
-	pushl	$.LC84
-	pushl	-10016(%ebp)
+	je	.L723
+	.loc 1 1072 0
+	movl	$.LC56, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL246:
 	testl	%eax, %eax
-	jne	.L138
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	atoi
-	addl	$16, %esp
-	movl	%eax, cgi_limit
-	jmp	.L126
-.L138:
-	subl	$8, %esp
-	pushl	$.LC85
-	pushl	-10016(%ebp)
+	jne	.L203
+.L725:
+.LVL247:
+.LBB425:
+.LBB426:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE426:
+.LBE425:
+	.loc 1 1075 0
+	movl	$1, no_symlink_check(%rip)
+	jmp	.L188
+.L723:
+.LVL248:
+.LBB427:
+.LBB428:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE428:
+.LBE427:
+	.loc 1 1070 0
+	movl	$0, no_symlink_check(%rip)
+	jmp	.L188
+.L203:
+	.loc 1 1077 0
+	movl	$.LC57, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL249:
 	testl	%eax, %eax
-	jne	.L139
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, url_pattern
-	jmp	.L126
-.L139:
-	subl	$8, %esp
-	pushl	$.LC86
-	pushl	-10016(%ebp)
+	je	.L723
+	.loc 1 1082 0
+	movl	$.LC58, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL250:
 	testl	%eax, %eax
-	jne	.L140
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, no_empty_referers
-	jmp	.L126
-.L140:
-	subl	$8, %esp
-	pushl	$.LC87
-	pushl	-10016(%ebp)
+	je	.L725
+	.loc 1 1087 0
+	movl	$.LC59, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL251:
 	testl	%eax, %eax
-	jne	.L141
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, local_pattern
-	jmp	.L126
-.L141:
-	subl	$8, %esp
-	pushl	$.LC88
-	pushl	-10016(%ebp)
+	jne	.L207
+.LVL252:
+.LBB429:
+.LBB430:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL253:
+.LBE430:
+.LBE429:
+.LBB431:
+.LBB432:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL254:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE432:
+.LBE431:
+	.loc 1 1090 0
+	movq	%rax, user(%rip)
+	jmp	.L188
+.LVL255:
+.L200:
+.LBB433:
+.LBB413:
+	call	e_strdup.part.4
+.LVL256:
+.L721:
+.LBE413:
+.LBE433:
+.LBB434:
+.LBB435:
+	movq	%rbx, %rdi
+	call	no_value_required.part.1
+.LVL257:
+.L207:
+.LBE435:
+.LBE434:
+	.loc 1 1092 0
+	movl	$.LC60, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL258:
 	testl	%eax, %eax
-	jne	.L142
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, throttlefile
-	jmp	.L126
-.L142:
-	subl	$8, %esp
-	pushl	$.LC89
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
+	jne	.L209
+.LVL259:
+.LBB437:
+.LBB438:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL260:
+.LBE438:
+.LBE437:
+.LBB439:
+.LBB440:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL261:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE440:
+.LBE439:
+	.loc 1 1095 0
+	movq	%rax, cgi_pattern(%rip)
+	jmp	.L188
+.LVL262:
+.L734:
+	.loc 1 1185 0
+	movq	%r14, %rdi
+	call	fclose
+.LVL263:
+	movl	8(%rsp), %eax
+	jmp	.L244
+.LVL264:
+.L269:
+.LBE490:
+.LBE512:
+.LBB513:
+	.loc 1 951 0
+	movl	$.LC80, %edi
+	movl	$5, %ecx
+	movq	%r9, %rsi
+.LBE513:
+	repz; cmpsb
+	je	.L465
+.LVL265:
+.L453:
+	.loc 1 976 0
+	call	usage
+.LVL266:
+.L469:
+	.loc 1 878 0
+	movl	$1, %eax
+.LVL267:
+.L172:
+	.loc 1 979 0
+	cmpl	%eax, %ebp
+	jne	.L453
+.LBE392:
+.LBE391:
+.LBB575:
+.LBB576:
+	.loc 1 1243 0
+	leaq	10336(%rsp), %rbp
+.LVL268:
+	.loc 1 1248 0
+	leaq	320(%rsp), %rbx
+.LBE576:
+.LBE575:
+	.loc 1 380 0
+	call	tzset
+.LVL269:
+.LBB581:
+.LBB577:
+	.loc 1 1243 0
+	xorl	%eax, %eax
+	movl	$6, %ecx
+	movq	%rbp, %rdi
+	rep; stosq
+	.loc 1 1247 0
+	movzwl	port(%rip), %ecx
+	leaq	5328(%rsp), %rdi
+	movl	$.LC81, %edx
+	movl	$10, %esi
+	.loc 1 1245 0
+	movl	$1, 10336(%rsp)
+	.loc 1 1246 0
+	movl	$1, 10344(%rsp)
+	.loc 1 1247 0
+	call	snprintf
+.LVL270:
+	.loc 1 1248 0
+	movq	hostname(%rip), %rdi
+	leaq	5328(%rsp), %rsi
+	movq	%rbx, %rcx
+	movq	%rbp, %rdx
+	call	getaddrinfo
+.LVL271:
 	testl	%eax, %eax
-	jne	.L143
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, hostname
-	jmp	.L126
-.L143:
-	subl	$8, %esp
-	pushl	$.LC90
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
+	movl	%eax, %r12d
+.LVL272:
+	jne	.L736
+.LVL273:
+	.loc 1 1262 0
+	movq	320(%rsp), %r13
+.LVL274:
+	testq	%r13, %r13
+	je	.L284
+	movq	%r13, %rax
+.LVL275:
+	xorl	%r12d, %r12d
+.LVL276:
+	xorl	%esi, %esi
+	jmp	.L288
+.LVL277:
+	.p2align 4,,10
+	.p2align 3
+.L738:
+	.loc 1 1264 0
+	cmpl	$10, %edx
+	jne	.L285
+	.loc 1 1267 0
+	testq	%rsi, %rsi
+	cmove	%rax, %rsi
+.LVL278:
+.L285:
+	.loc 1 1262 0
+	movq	40(%rax), %rax
+.LVL279:
+	testq	%rax, %rax
+	je	.L737
+.LVL280:
+.L288:
+	.loc 1 1264 0
+	movl	4(%rax), %edx
+	cmpl	$2, %edx
+	jne	.L738
+	.loc 1 1271 0
+	testq	%r12, %r12
+	cmove	%rax, %r12
+.LVL281:
+	.loc 1 1262 0
+	movq	40(%rax), %rax
+.LVL282:
+	testq	%rax, %rax
+	jne	.L288
+.L737:
+	.loc 1 1277 0
+	testq	%rsi, %rsi
+	je	.L289
+	.loc 1 1281 0
+	movl	16(%rsi), %r8d
+	cmpq	$128, %r8
+	ja	.L739
+	.loc 1 1289 0
+	leaq	192(%rsp), %r8
+.LVL283:
+	movl	$16, %ecx
+	movq	%r8, %rdi
+	rep; stosq
+	.loc 1 1290 0
+	movq	%r8, %rdi
+	movl	16(%rsi), %edx
+	movq	24(%rsi), %rsi
+.LVL284:
+	call	memmove
+.LVL285:
+	.loc 1 1294 0
+	testq	%r12, %r12
+	je	.L291
+	.loc 1 1291 0
+	movl	$1, %r14d
+.LVL286:
+.L455:
+	.loc 1 1298 0
+	movl	16(%r12), %r8d
+	cmpq	$128, %r8
+	ja	.L740
+	.loc 1 1306 0
+	leaq	64(%rsp), %r8
+.LVL287:
+	xorl	%eax, %eax
+	movl	$16, %ecx
+	movq	%r8, %rdi
+	rep; stosq
+	.loc 1 1307 0
+	movq	%r8, %rdi
+	movl	16(%r12), %edx
+	movq	24(%r12), %rsi
+	call	memmove
+.LVL288:
+	.loc 1 1311 0
+	movq	%r13, %rdi
+	call	freeaddrinfo
+.LVL289:
+	.loc 1 1308 0
+	movl	$1, 20(%rsp)
+.LVL290:
+.L293:
+.LBE577:
+.LBE581:
+	.loc 1 395 0
+	movq	throttlefile(%rip), %r12
+.LVL291:
+	.loc 1 392 0
+	movl	$0, numthrottles(%rip)
+	.loc 1 393 0
+	movl	$0, maxthrottles(%rip)
+	.loc 1 394 0
+	movq	$0, throttles(%rip)
+	.loc 1 395 0
+	testq	%r12, %r12
+	je	.L294
+.LVL292:
+.LBB582:
+.LBB583:
+	.loc 1 1375 0
+	movl	$.LC47, %esi
+	movq	%r12, %rdi
+	call	fopen
+.LVL293:
+	.loc 1 1376 0
+	testq	%rax, %rax
+	.loc 1 1375 0
+	movq	%rax, %r15
+.LVL294:
+	.loc 1 1376 0
+	je	.L741
+	.loc 1 1383 0
+	leaq	48(%rsp), %rdi
+	xorl	%esi, %esi
+	call	gettimeofday
+.LVL295:
+	.loc 1 1420 0
+	leaq	5329(%rsp), %rax
+	movq	%rax, 8(%rsp)
+.L317:
+	.loc 1 1385 0
+	movq	%r15, %rdx
+	movl	$5000, %esi
+	movq	%rbx, %rdi
+	call	fgets
+.LVL296:
+	testq	%rax, %rax
+	je	.L742
+	.loc 1 1388 0
+	movl	$35, %esi
+	movq	%rbx, %rdi
+	call	strchr
+.LVL297:
+	.loc 1 1389 0
+	testq	%rax, %rax
+	je	.L297
+	.loc 1 1390 0
+	movb	$0, (%rax)
+.L297:
+	.loc 1 1393 0
+	movq	%rbx, %rdx
+.LVL298:
+.L298:
+	movl	(%rdx), %ecx
+	addq	$4, %rdx
+	leal	-16843009(%rcx), %eax
+	notl	%ecx
+	andl	%ecx, %eax
+	andl	$-2139062144, %eax
+	je	.L298
+	movl	%eax, %ecx
+	shrl	$16, %ecx
+	testl	$32896, %eax
+	cmove	%ecx, %eax
+	leaq	2(%rdx), %rcx
+	cmove	%rcx, %rdx
+	addb	%al, %al
+	sbbq	$3, %rdx
+	subq	%rbx, %rdx
+.LVL299:
+	.loc 1 1394 0
+	cmpl	$0, %edx
+	jg	.L684
+	jmp	.L743
+.LVL300:
+	.p2align 4,,10
+	.p2align 3
+.L613:
+	testl	%edx, %edx
+	.loc 1 1397 0
+	movb	$0, 320(%rsp,%rdi)
+	.loc 1 1394 0
+	je	.L317
+.L684:
+	.loc 1 1395 0
+	subl	$1, %edx
+.LVL301:
+	movslq	%edx, %rdi
+	movzbl	320(%rsp,%rdi), %eax
+	.loc 1 1396 0
+	cmpb	$13, %al
+	sete	%sil
+	.loc 1 1395 0
+	cmpb	$32, %al
+	sete	%cl
+	.loc 1 1396 0
+	orb	%cl, %sil
+	jne	.L613
+	.loc 1 1395 0
+	subl	$9, %eax
+	.loc 1 1396 0
+	cmpb	$1, %al
+	jbe	.L613
+.LVL302:
+.L306:
+	.loc 1 1404 0
+	leaq	32(%rsp), %r8
+	leaq	40(%rsp), %rcx
+	leaq	5328(%rsp), %rdx
+	xorl	%eax, %eax
+	movl	$.LC88, %esi
+	movq	%rbx, %rdi
+	call	__isoc99_sscanf
+.LVL303:
+	cmpl	$3, %eax
+	jne	.L672
+.L302:
+	.loc 1 1419 0
+	cmpb	$47, 5328(%rsp)
+	jne	.L310
+	.loc 1 1420 0
+	movq	8(%rsp), %rsi
+	leaq	5328(%rsp), %rdi
+	call	strcpy
+.LVL304:
+	jmp	.L310
+.LVL305:
+	.p2align 4,,10
+	.p2align 3
+.L311:
+	.loc 1 1422 0
+	leaq	2(%rax), %rsi
+	leaq	1(%rax), %rdi
+	call	strcpy
+.LVL306:
+.L310:
+	.loc 1 1421 0
+	leaq	5328(%rsp), %rdi
+	movl	$.LC92, %esi
+	call	strstr
+.LVL307:
+	testq	%rax, %rax
+	jne	.L311
+	.loc 1 1425 0
+	movslq	numthrottles(%rip), %rdx
+	movl	maxthrottles(%rip), %eax
+.LVL308:
+	cmpl	%eax, %edx
+	jl	.L312
+	.loc 1 1427 0
 	testl	%eax, %eax
-	jne	.L144
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, logfile
-	jmp	.L126
-.L144:
-	subl	$8, %esp
-	pushl	$.LC91
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L145
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, do_vhost
-	jmp	.L126
-.L145:
-	subl	$8, %esp
-	pushl	$.LC92
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L146
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$0, do_vhost
-	jmp	.L126
-.L146:
-	subl	$8, %esp
-	pushl	$.LC93
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L147
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$1, do_global_passwd
-	jmp	.L126
-.L147:
-	subl	$8, %esp
-	pushl	$.LC94
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L148
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	no_value_required
-	addl	$16, %esp
-	movl	$0, do_global_passwd
-	jmp	.L126
-.L148:
-	subl	$8, %esp
-	pushl	$.LC95
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L149
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, pidfile
-	jmp	.L126
-.L149:
-	subl	$8, %esp
-	pushl	$.LC96
-	pushl	-10016(%ebp)
-	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L150
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, charset
-	jmp	.L126
-.L150:
-	subl	$8, %esp
-	pushl	$.LC97
-	pushl	-10016(%ebp)
+	jne	.L313
+	.loc 1 1430 0
+	movl	$4800, %edi
+	.loc 1 1429 0
+	movl	$100, maxthrottles(%rip)
+	.loc 1 1430 0
+	call	malloc
+.LVL309:
+	movq	%rax, throttles(%rip)
+.L314:
+	.loc 1 1437 0
+	testq	%rax, %rax
+	je	.L315
+	movslq	numthrottles(%rip), %rdx
+.L316:
+	.loc 1 1448 0
+	leaq	(%rdx,%rdx,2), %r13
+.LBB584:
+.LBB585:
+	.loc 1 1219 0
+	leaq	5328(%rsp), %rdi
+.LBE585:
+.LBE584:
+	.loc 1 1448 0
+	salq	$4, %r13
+	addq	%rax, %r13
+.LVL310:
+.LBB587:
+.LBB586:
+	.loc 1 1219 0
+	call	__strdup
+.LVL311:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE586:
+.LBE587:
+	.loc 1 1448 0
+	movq	%rax, 0(%r13)
+	.loc 1 1449 0
+	movslq	numthrottles(%rip), %rax
+.LVL312:
+	movq	32(%rsp), %rcx
+	movq	%rax, %rdx
+	leaq	(%rax,%rax,2), %rax
+	.loc 1 1455 0
+	addl	$1, %edx
+	.loc 1 1449 0
+	salq	$4, %rax
+	addq	throttles(%rip), %rax
+	.loc 1 1455 0
+	movl	%edx, numthrottles(%rip)
+	.loc 1 1449 0
+	movq	%rcx, 8(%rax)
+	.loc 1 1450 0
+	movq	40(%rsp), %rcx
+	.loc 1 1451 0
+	movq	$0, 24(%rax)
+	.loc 1 1452 0
+	movq	$0, 32(%rax)
+	.loc 1 1453 0
+	movl	$0, 40(%rax)
+	.loc 1 1450 0
+	movq	%rcx, 16(%rax)
+	jmp	.L317
+.LVL313:
+.L245:
+.LBE583:
+.LBE582:
+.LBB591:
+.LBB572:
+.LBB514:
+.LBB515:
+	.loc 1 896 0
+	cmpb	$100, %dl
+	jne	.L246
+.LVL314:
+.LBE515:
+.LBE514:
+	cmpb	$0, 2(%r9)
+	jne	.L174
+	leal	1(%rax), %edx
+.LVL315:
+	cmpl	%edx, %ebp
+	jle	.L174
+.LVL316:
+	.loc 1 899 0
+	movslq	%edx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, dir(%rip)
+	movl	%edx, %eax
+	jmp	.L244
+.LVL317:
+.L733:
+.LBB516:
+.LBB491:
+	.loc 1 1007 0
+	movq	%rbx, %rdi
+	call	perror
+.LVL318:
+	.loc 1 1008 0
+	movl	$1, %edi
+	call	exit
+.LVL319:
+.L209:
+	.loc 1 1097 0
+	movl	$.LC61, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
+.LVL320:
 	testl	%eax, %eax
-	jne	.L151
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, p3p
-	jmp	.L126
-.L151:
-	subl	$8, %esp
-	pushl	$.LC98
-	pushl	-10016(%ebp)
+	jne	.L211
+.LVL321:
+.LBB441:
+.LBB442:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL322:
+.LBE442:
+.LBE441:
+.LBB443:
+.LBB444:
+	.loc 2 286 0
+	movl	$10, %edx
+	xorl	%esi, %esi
+	movq	%r15, %rdi
+	call	strtol
+.LVL323:
+	movl	%eax, cgi_limit(%rip)
+	jmp	.L188
+.LVL324:
+.L246:
+.LBE444:
+.LBE443:
+.LBE491:
+.LBE516:
+.LBB517:
+.LBB518:
+	.loc 1 901 0
+	cmpb	$114, %dl
+	jne	.L174
+.LVL325:
+.LBE518:
+.LBE517:
+	cmpb	$0, 2(%r9)
+	jne	.L174
+	.loc 1 903 0
+	movl	$1, do_chroot(%rip)
+	.loc 1 904 0
+	movl	$1, no_symlink_check(%rip)
+	jmp	.L244
+.LVL326:
+.L211:
+.LBB519:
+.LBB492:
+	.loc 1 1102 0
+	movl	$.LC62, %esi
+	movq	%rbx, %rdi
 	call	strcasecmp
-	addl	$16, %esp
-	testl	%eax, %eax
-	jne	.L152
-	subl	$8, %esp
-	pushl	-10024(%ebp)
-	pushl	-10016(%ebp)
-	call	value_required
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10024(%ebp)
-	call	atoi
-	addl	$16, %esp
-	movl	%eax, max_age
-	jmp	.L126
-.L152:
-	movl	argv0, %edx
-	movl	stderr, %eax
-	pushl	-10016(%ebp)
-	pushl	%edx
-	pushl	$.LC99
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L126:
-	movl	-10028(%ebp), %eax
-	movl	%eax, -10032(%ebp)
-	subl	$8, %esp
-	pushl	$.LC72
-	pushl	-10032(%ebp)
-	call	strspn
-	addl	$16, %esp
-	addl	%eax, -10032(%ebp)
-.L121:
-	movl	-10032(%ebp), %eax
-	movzbl	(%eax), %eax
-	testb	%al, %al
-	jne	.L153
-.L119:
-	subl	$4, %esp
-	pushl	-10020(%ebp)
-	pushl	$10000
-	leal	-10012(%ebp), %eax
-	pushl	%eax
-	call	fgets
-	addl	$16, %esp
+.LVL327:
 	testl	%eax, %eax
-	jne	.L154
-	subl	$12, %esp
-	pushl	-10020(%ebp)
-	call	fclose
-	addl	$16, %esp
-	movl	-12(%ebp), %eax
-	xorl	%gs:20, %eax
-	je	.L155
-	call	__stack_chk_fail
-.L155:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE10:
-	.size	read_config, .-read_config
-	.section	.rodata
-	.align 4
-.LC100:
-	.string	"%s: value required for %s option\n"
-	.text
-	.type	value_required, @function
-value_required:
-.LFB11:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	cmpl	$0, 12(%ebp)
-	jne	.L156
-	movl	argv0, %edx
-	movl	stderr, %eax
-	pushl	8(%ebp)
-	pushl	%edx
-	pushl	$.LC100
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L156:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE11:
-	.size	value_required, .-value_required
-	.section	.rodata
-	.align 4
-.LC101:
-	.string	"%s: no value required for %s option\n"
-	.text
-	.type	no_value_required, @function
-no_value_required:
-.LFB12:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	cmpl	$0, 12(%ebp)
-	je	.L158
-	movl	argv0, %edx
-	movl	stderr, %eax
-	pushl	8(%ebp)
-	pushl	%edx
-	pushl	$.LC101
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L158:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE12:
-	.size	no_value_required, .-no_value_required
-	.section	.rodata
-	.align 4
-.LC102:
-	.string	"out of memory copying a string"
-	.align 4
-.LC103:
-	.string	"%s: out of memory copying a string\n"
-	.text
-	.type	e_strdup, @function
-e_strdup:
-.LFB13:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	subl	$12, %esp
-	pushl	8(%ebp)
-	call	strdup
-	addl	$16, %esp
-	movl	%eax, -12(%ebp)
-	cmpl	$0, -12(%ebp)
-	jne	.L161
-	subl	$8, %esp
-	pushl	$.LC102
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	$.LC103
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L161:
-	movl	-12(%ebp), %eax
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE13:
-	.size	e_strdup, .-e_strdup
-	.section	.rodata
-.LC104:
-	.string	"%d"
-.LC105:
-	.string	"getaddrinfo %.80s - %.80s"
-.LC106:
-	.string	"%s: getaddrinfo %s - %s\n"
-	.align 4
-.LC107:
-	.string	"%.80s - sockaddr too small (%lu < %lu)"
-	.text
-	.type	lookup_hostname, @function
-lookup_hostname:
-.LFB14:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%ebx
-	subl	$100, %esp
-	.cfi_offset 3, -12
-	movl	8(%ebp), %eax
-	movl	%eax, -92(%ebp)
-	movl	16(%ebp), %eax
-	movl	%eax, -96(%ebp)
-	movl	20(%ebp), %eax
-	movl	%eax, -100(%ebp)
-	movl	28(%ebp), %eax
-	movl	%eax, -104(%ebp)
-	movl	%gs:20, %eax
-	movl	%eax, -12(%ebp)
-	xorl	%eax, %eax
-	subl	$4, %esp
-	pushl	$32
-	pushl	$0
-	leal	-56(%ebp), %eax
-	pushl	%eax
-	call	memset
-	addl	$16, %esp
-	movl	$0, -52(%ebp)
-	movl	$1, -56(%ebp)
-	movl	$1, -48(%ebp)
-	movzwl	port, %eax
-	movzwl	%ax, %eax
-	pushl	%eax
-	pushl	$.LC104
-	pushl	$10
-	leal	-22(%ebp), %eax
-	pushl	%eax
-	call	snprintf
-	addl	$16, %esp
-	movl	hostname, %eax
-	leal	-76(%ebp), %edx
-	pushl	%edx
-	leal	-56(%ebp), %edx
-	pushl	%edx
-	leal	-22(%ebp), %edx
-	pushl	%edx
-	pushl	%eax
-	call	getaddrinfo
-	addl	$16, %esp
-	movl	%eax, -60(%ebp)
-	cmpl	$0, -60(%ebp)
-	je	.L164
-	subl	$12, %esp
-	pushl	-60(%ebp)
+	jne	.L213
+.LVL328:
+.LBB445:
+.LBB446:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL329:
+.LBE446:
+.LBE445:
+.LBB447:
+.LBB448:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL330:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE448:
+.LBE447:
+	.loc 1 1105 0
+	movq	%rax, url_pattern(%rip)
+	jmp	.L188
+.LVL331:
+.L736:
+.LBE492:
+.LBE519:
+.LBE572:
+.LBE591:
+.LBB592:
+.LBB578:
+	.loc 1 1250 0
+	movl	%eax, %edi
 	call	gai_strerror
-	addl	$16, %esp
-	movl	%eax, %edx
-	movl	hostname, %eax
-	pushl	%edx
-	pushl	%eax
-	pushl	$.LC105
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-60(%ebp)
+.LVL332:
+	movq	hostname(%rip), %rdx
+	movq	%rax, %rcx
+	movl	$.LC82, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL333:
+	.loc 1 1253 0
+	movl	%r12d, %edi
 	call	gai_strerror
-	addl	$16, %esp
-	movl	%eax, %ebx
-	movl	hostname, %ecx
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$12, %esp
-	pushl	%ebx
-	pushl	%ecx
-	pushl	%edx
-	pushl	$.LC106
-	pushl	%eax
+.LVL334:
+	movq	stderr(%rip), %rdi
+	movq	hostname(%rip), %rcx
+	movq	%rax, %r8
+	movq	argv0(%rip), %rdx
+	movl	$.LC83, %esi
+	xorl	%eax, %eax
 	call	fprintf
-	addl	$32, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L164:
-	movl	$0, -68(%ebp)
-	movl	$0, -64(%ebp)
-	movl	-76(%ebp), %eax
-	movl	%eax, -72(%ebp)
-	jmp	.L165
-.L171:
-	movl	-72(%ebp), %eax
-	movl	4(%eax), %eax
-	cmpl	$2, %eax
-	je	.L167
-	cmpl	$10, %eax
-	jne	.L166
-	cmpl	$0, -68(%ebp)
-	jne	.L169
-	movl	-72(%ebp), %eax
-	movl	%eax, -68(%ebp)
-	jmp	.L166
-.L169:
-	jmp	.L166
-.L167:
-	cmpl	$0, -64(%ebp)
-	jne	.L170
-	movl	-72(%ebp), %eax
-	movl	%eax, -64(%ebp)
-	jmp	.L179
-.L170:
-.L179:
-	nop
-.L166:
-	movl	-72(%ebp), %eax
-	movl	28(%eax), %eax
-	movl	%eax, -72(%ebp)
-.L165:
-	cmpl	$0, -72(%ebp)
-	jne	.L171
-	cmpl	$0, -68(%ebp)
-	jne	.L172
-	movl	-104(%ebp), %eax
-	movl	$0, (%eax)
-	jmp	.L173
-.L172:
-	movl	-68(%ebp), %eax
-	movl	16(%eax), %eax
-	cmpl	24(%ebp), %eax
-	jbe	.L174
-	movl	-68(%ebp), %eax
-	movl	16(%eax), %edx
-	movl	hostname, %eax
-	subl	$12, %esp
-	pushl	%edx
-	pushl	24(%ebp)
-	pushl	%eax
-	pushl	$.LC107
-	pushl	$2
-	call	syslog
-	addl	$32, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L174:
-	subl	$4, %esp
-	pushl	24(%ebp)
-	pushl	$0
-	pushl	-100(%ebp)
-	call	memset
-	addl	$16, %esp
-	movl	-68(%ebp), %eax
-	movl	16(%eax), %edx
-	movl	-68(%ebp), %eax
-	movl	20(%eax), %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	%eax
-	pushl	-100(%ebp)
-	call	memmove
-	addl	$16, %esp
-	movl	-104(%ebp), %eax
-	movl	$1, (%eax)
-.L173:
-	cmpl	$0, -64(%ebp)
-	jne	.L175
-	movl	-96(%ebp), %eax
-	movl	$0, (%eax)
-	jmp	.L176
-.L175:
-	movl	-64(%ebp), %eax
-	movl	16(%eax), %eax
-	cmpl	12(%ebp), %eax
-	jbe	.L177
-	movl	-64(%ebp), %eax
-	movl	16(%eax), %edx
-	movl	hostname, %eax
-	subl	$12, %esp
-	pushl	%edx
-	pushl	12(%ebp)
-	pushl	%eax
-	pushl	$.LC107
-	pushl	$2
-	call	syslog
-	addl	$32, %esp
-	subl	$12, %esp
-	pushl	$1
+.LVL335:
+	.loc 1 1256 0
+	movl	$1, %edi
 	call	exit
-.L177:
-	subl	$4, %esp
-	pushl	12(%ebp)
-	pushl	$0
-	pushl	-92(%ebp)
-	call	memset
-	addl	$16, %esp
-	movl	-64(%ebp), %eax
-	movl	16(%eax), %edx
-	movl	-64(%ebp), %eax
-	movl	20(%eax), %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	%eax
-	pushl	-92(%ebp)
-	call	memmove
-	addl	$16, %esp
-	movl	-96(%ebp), %eax
-	movl	$1, (%eax)
-.L176:
-	movl	-76(%ebp), %eax
-	subl	$12, %esp
-	pushl	%eax
+.LVL336:
+.L284:
+	.loc 1 1311 0
+	xorl	%edi, %edi
 	call	freeaddrinfo
-	addl	$16, %esp
-	movl	-12(%ebp), %eax
-	xorl	%gs:20, %eax
-	je	.L178
-	call	__stack_chk_fail
-.L178:
-	movl	-4(%ebp), %ebx
-	leave
-	.cfi_restore 5
-	.cfi_restore 3
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE14:
-	.size	lookup_hostname, .-lookup_hostname
-	.section	.rodata
-.LC108:
-	.string	" %4900[^ \t] %ld-%ld"
-.LC109:
-	.string	" %4900[^ \t] %ld"
-	.align 4
-.LC110:
-	.string	"unparsable line in %.80s - %.80s"
-	.align 4
-.LC111:
-	.string	"%s: unparsable line in %.80s - %.80s\n"
-.LC112:
-	.string	"|/"
-	.align 4
-.LC113:
-	.string	"out of memory allocating a throttletab"
-	.align 4
-.LC114:
-	.string	"%s: out of memory allocating a throttletab\n"
-	.text
-	.type	read_throttlefile, @function
-read_throttlefile:
-.LFB15:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%ebx
-	subl	$10052, %esp
-	.cfi_offset 3, -12
-	movl	8(%ebp), %eax
-	movl	%eax, -10044(%ebp)
-	movl	%gs:20, %eax
-	movl	%eax, -12(%ebp)
-	xorl	%eax, %eax
-	subl	$8, %esp
-	pushl	$.LC71
-	pushl	-10044(%ebp)
-	call	fopen
-	addl	$16, %esp
-	movl	%eax, -10028(%ebp)
-	cmpl	$0, -10028(%ebp)
-	jne	.L181
-	subl	$4, %esp
-	pushl	-10044(%ebp)
-	pushl	$.LC13
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-10044(%ebp)
-	call	perror
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
+.LVL337:
+.L448:
+.LBE578:
+.LBE592:
+	.loc 1 386 0
+	movl	$.LC85, %esi
+	movl	$3, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL338:
+	.loc 1 387 0
+	movq	argv0(%rip), %rdx
+	movl	$.LC86, %esi
+.LVL339:
+.L713:
+.LBB593:
+.LBB588:
+	.loc 1 1440 0
+	movq	stderr(%rip), %rdi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL340:
+.L719:
+.LBE588:
+.LBE593:
+	.loc 1 408 0
+	movl	$1, %edi
 	call	exit
-.L181:
-	subl	$8, %esp
-	pushl	$0
-	leal	-10020(%ebp), %eax
-	pushl	%eax
-	call	gettimeofday
-	addl	$16, %esp
-	jmp	.L182
-.L196:
-	subl	$8, %esp
-	pushl	$35
-	leal	-10012(%ebp), %eax
-	pushl	%eax
-	call	strchr
-	addl	$16, %esp
-	movl	%eax, -10024(%ebp)
-	cmpl	$0, -10024(%ebp)
-	je	.L183
-	movl	-10024(%ebp), %eax
-	movb	$0, (%eax)
-.L183:
-	subl	$12, %esp
-	leal	-10012(%ebp), %eax
-	pushl	%eax
-	call	strlen
-	addl	$16, %esp
-	movl	%eax, -10032(%ebp)
-	jmp	.L184
-.L186:
-	subl	$1, -10032(%ebp)
-	leal	-10012(%ebp), %edx
-	movl	-10032(%ebp), %eax
-	addl	%edx, %eax
-	movb	$0, (%eax)
-.L184:
-	cmpl	$0, -10032(%ebp)
-	jle	.L185
-	movl	-10032(%ebp), %eax
-	subl	$1, %eax
-	movzbl	-10012(%ebp,%eax), %eax
-	cmpb	$32, %al
-	je	.L186
-	movl	-10032(%ebp), %eax
-	subl	$1, %eax
-	movzbl	-10012(%ebp,%eax), %eax
-	cmpb	$9, %al
-	je	.L186
-	movl	-10032(%ebp), %eax
-	subl	$1, %eax
-	movzbl	-10012(%ebp,%eax), %eax
-	cmpb	$10, %al
-	je	.L186
-	movl	-10032(%ebp), %eax
-	subl	$1, %eax
-	movzbl	-10012(%ebp,%eax), %eax
-	cmpb	$13, %al
-	je	.L186
-.L185:
-	cmpl	$0, -10032(%ebp)
-	jne	.L187
-	jmp	.L182
-.L187:
-	subl	$12, %esp
-	leal	-10040(%ebp), %eax
-	pushl	%eax
-	leal	-10036(%ebp), %eax
-	pushl	%eax
-	leal	-5012(%ebp), %eax
-	pushl	%eax
-	pushl	$.LC108
-	leal	-10012(%ebp), %eax
-	pushl	%eax
-	call	__isoc99_sscanf
-	addl	$32, %esp
-	cmpl	$3, %eax
-	je	.L188
-	leal	-10040(%ebp), %eax
-	pushl	%eax
-	leal	-5012(%ebp), %eax
-	pushl	%eax
-	pushl	$.LC109
-	leal	-10012(%ebp), %eax
-	pushl	%eax
+.LVL341:
+	.p2align 4,,10
+	.p2align 3
+.L743:
+.LBB594:
+.LBB589:
+	.loc 1 1400 0
+	je	.L317
+	jmp	.L306
+.LVL342:
+.L672:
+	.loc 1 1406 0
+	leaq	32(%rsp), %rcx
+	leaq	5328(%rsp), %rdx
+	xorl	%eax, %eax
+	movl	$.LC89, %esi
+	movq	%rbx, %rdi
 	call	__isoc99_sscanf
-	addl	$16, %esp
+.LVL343:
 	cmpl	$2, %eax
-	jne	.L189
-	movl	$0, -10036(%ebp)
-	jmp	.L188
-.L189:
-	leal	-10012(%ebp), %eax
-	pushl	%eax
-	pushl	-10044(%ebp)
-	pushl	$.LC110
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$12, %esp
-	leal	-10012(%ebp), %ecx
-	pushl	%ecx
-	pushl	-10044(%ebp)
-	pushl	%edx
-	pushl	$.LC111
-	pushl	%eax
-	call	fprintf
-	addl	$32, %esp
-	jmp	.L182
-.L188:
-	movzbl	-5012(%ebp), %eax
-	cmpb	$47, %al
-	jne	.L190
-	subl	$8, %esp
-	leal	-5012(%ebp), %eax
-	addl	$1, %eax
-	pushl	%eax
-	leal	-5012(%ebp), %eax
-	pushl	%eax
-	call	strcpy
-	addl	$16, %esp
-.L190:
-	jmp	.L191
-.L192:
-	movl	-10024(%ebp), %eax
-	leal	2(%eax), %edx
-	movl	-10024(%ebp), %eax
-	addl	$1, %eax
-	subl	$8, %esp
-	pushl	%edx
-	pushl	%eax
-	call	strcpy
-	addl	$16, %esp
-.L191:
-	subl	$8, %esp
-	pushl	$.LC112
-	leal	-5012(%ebp), %eax
-	pushl	%eax
-	call	strstr
-	addl	$16, %esp
-	movl	%eax, -10024(%ebp)
-	cmpl	$0, -10024(%ebp)
-	jne	.L192
-	movl	numthrottles, %edx
-	movl	maxthrottles, %eax
-	cmpl	%eax, %edx
-	jl	.L193
-	movl	maxthrottles, %eax
+	jne	.L307
+	.loc 1 1407 0
+	movq	$0, 40(%rsp)
+	jmp	.L302
+.L742:
+	.loc 1 1457 0
+	movq	%r15, %rdi
+	call	fclose
+.LVL344:
+.L294:
+.LBE589:
+.LBE594:
+	.loc 1 401 0
+	call	getuid
+.LVL345:
 	testl	%eax, %eax
-	jne	.L194
-	movl	$100, maxthrottles
-	movl	maxthrottles, %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	malloc
-	addl	$16, %esp
-	movl	%eax, throttles
-	jmp	.L195
-.L194:
-	movl	maxthrottles, %eax
-	addl	%eax, %eax
-	movl	%eax, maxthrottles
-	movl	maxthrottles, %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	movl	%eax, %edx
-	movl	throttles, %eax
-	subl	$8, %esp
-	pushl	%edx
-	pushl	%eax
-	call	realloc
-	addl	$16, %esp
-	movl	%eax, throttles
-.L195:
-	movl	throttles, %eax
+	.loc 1 355 0
+	movl	$32767, %r13d
+	.loc 1 354 0
+	movl	$32767, 8(%rsp)
+	.loc 1 401 0
+	je	.L744
+.LVL346:
+.L319:
+	.loc 1 415 0
+	movq	logfile(%rip), %rax
+	testq	%rax, %rax
+	je	.L481
+.LVL347:
+.LBB595:
+	.loc 1 417 0
+	movl	$.LC97, %edi
+	movl	$10, %ecx
+	movq	%rax, %rsi
+.LBE595:
+	repz; cmpsb
+	jne	.L322
+	.loc 1 419 0
+	movl	$1, no_log(%rip)
+.LVL348:
+	.loc 1 420 0
+	xorl	%r12d, %r12d
+.LVL349:
+.L321:
+	.loc 1 456 0
+	movq	dir(%rip), %rdi
+	testq	%rdi, %rdi
+	je	.L326
+	.loc 1 458 0
+	call	chdir
+.LVL350:
 	testl	%eax, %eax
-	jne	.L193
-	subl	$8, %esp
-	pushl	$.LC113
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	movl	argv0, %edx
-	movl	stderr, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	$.LC114
-	pushl	%eax
-	call	fprintf
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L193:
-	movl	throttles, %edx
-	movl	numthrottles, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$3, %eax
-	leal	(%edx,%eax), %ebx
-	subl	$12, %esp
-	leal	-5012(%ebp), %eax
-	pushl	%eax
-	call	e_strdup
-	addl	$16, %esp
-	movl	%eax, (%ebx)
-	movl	throttles, %edx
-	movl	numthrottles, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$3, %eax
-	addl	%eax, %edx
-	movl	-10040(%ebp), %eax
-	movl	%eax, 4(%edx)
-	movl	throttles, %edx
-	movl	numthrottles, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$3, %eax
-	addl	%eax, %edx
-	movl	-10036(%ebp), %eax
-	movl	%eax, 8(%edx)
-	movl	throttles, %edx
-	movl	numthrottles, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$3, %eax
-	addl	%edx, %eax
-	movl	$0, 12(%eax)
-	movl	throttles, %edx
-	movl	numthrottles, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$3, %eax
-	addl	%edx, %eax
-	movl	$0, 16(%eax)
-	movl	throttles, %edx
-	movl	numthrottles, %eax
+	js	.L745
+.L326:
+	.loc 1 482 0
+	movl	$4096, %esi
+	movq	%rbp, %rdi
+	call	getcwd
+.LVL351:
+	.loc 1 483 0
+	movq	%rbp, %rdx
+.L327:
+	movl	(%rdx), %ecx
+	addq	$4, %rdx
+	leal	-16843009(%rcx), %eax
+	notl	%ecx
+	andl	%ecx, %eax
+	andl	$-2139062144, %eax
+	je	.L327
 	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$3, %eax
-	addl	%edx, %eax
-	movl	$0, 20(%eax)
-	movl	numthrottles, %eax
-	addl	$1, %eax
-	movl	%eax, numthrottles
-.L182:
-	subl	$4, %esp
-	pushl	-10028(%ebp)
-	pushl	$5000
-	leal	-10012(%ebp), %eax
-	pushl	%eax
-	call	fgets
-	addl	$16, %esp
+	shrl	$16, %ecx
+	testl	$32896, %eax
+	cmove	%ecx, %eax
+	leaq	2(%rdx), %rcx
+	cmove	%rcx, %rdx
+	addb	%al, %al
+	sbbq	$3, %rdx
+	subq	%rbp, %rdx
+	cmpb	$47, 10335(%rsp,%rdx)
+	je	.L329
+	.loc 1 484 0
+	movl	$47, %eax
+	movw	%ax, 0(%rbp,%rdx)
+.L329:
+	.loc 1 486 0
+	movl	debug(%rip), %eax
+	testl	%eax, %eax
+	jne	.L330
+	.loc 1 491 0
+	movq	stdin(%rip), %rdi
+	call	fclose
+.LVL352:
+	.loc 1 492 0
+	movq	stdout(%rip), %rdi
+	cmpq	%rdi, %r12
+	je	.L331
+	.loc 1 493 0
+	call	fclose
+.LVL353:
+.L331:
+	.loc 1 494 0
+	movq	stderr(%rip), %rdi
+	call	fclose
+.LVL354:
+	.loc 1 498 0
+	movl	$1, %esi
+	movl	$1, %edi
+	call	daemon
+.LVL355:
 	testl	%eax, %eax
-	jne	.L196
-	subl	$12, %esp
-	pushl	-10028(%ebp)
+	.loc 1 500 0
+	movl	$.LC105, %esi
+	.loc 1 498 0
+	js	.L698
+.L332:
+	.loc 1 529 0
+	movq	pidfile(%rip), %rdi
+	testq	%rdi, %rdi
+	je	.L333
+.LBB596:
+	.loc 1 532 0
+	movl	$.LC106, %esi
+	call	fopen
+.LVL356:
+	.loc 1 533 0
+	testq	%rax, %rax
+	.loc 1 532 0
+	movq	%rax, %r15
+.LVL357:
+	.loc 1 533 0
+	je	.L746
+	.loc 1 538 0
+	call	getpid
+.LVL358:
+	movq	%r15, %rdi
+	movl	%eax, %edx
+	movl	$.LC107, %esi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL359:
+	.loc 1 539 0
+	movq	%r15, %rdi
 	call	fclose
-	addl	$16, %esp
-	movl	-12(%ebp), %eax
-	xorl	%gs:20, %eax
-	je	.L197
-	call	__stack_chk_fail
-.L197:
-	movl	-4(%ebp), %ebx
-	leave
-	.cfi_restore 5
-	.cfi_restore 3
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE15:
-	.size	read_throttlefile, .-read_throttlefile
-	.type	shut_down, @function
-shut_down:
-.LFB16:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	subl	$8, %esp
-	pushl	$0
-	leal	-16(%ebp), %eax
-	pushl	%eax
-	call	gettimeofday
-	addl	$16, %esp
-	subl	$12, %esp
-	leal	-16(%ebp), %eax
-	pushl	%eax
-	call	logstats
-	addl	$16, %esp
-	movl	$0, -24(%ebp)
-	jmp	.L199
-.L202:
-	movl	connects, %ecx
-	movl	-24(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	(%eax), %eax
+.LVL360:
+.L333:
+.LBE596:
+	.loc 1 545 0
+	call	fdwatch_get_nfiles
+.LVL361:
+	.loc 1 546 0
 	testl	%eax, %eax
-	je	.L200
-	movl	connects, %ecx
-	movl	-24(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	8(%eax), %eax
-	subl	$8, %esp
-	leal	-16(%ebp), %edx
-	pushl	%edx
-	pushl	%eax
-	call	httpd_close_conn
-	addl	$16, %esp
-.L200:
-	movl	connects, %ecx
-	movl	-24(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	8(%eax), %eax
-	testl	%eax, %eax
-	je	.L201
-	movl	connects, %ecx
-	movl	-24(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	8(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	httpd_destroy_conn
-	addl	$16, %esp
-	movl	connects, %ecx
-	movl	-24(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	8(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	free
-	addl	$16, %esp
-	movl	httpd_conn_count, %eax
-	subl	$1, %eax
-	movl	%eax, httpd_conn_count
-	movl	connects, %ecx
-	movl	-24(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	$0, 8(%eax)
-.L201:
-	addl	$1, -24(%ebp)
-.L199:
-	movl	max_connects, %eax
-	cmpl	%eax, -24(%ebp)
-	jl	.L202
-	movl	hs, %eax
-	testl	%eax, %eax
-	je	.L203
-	movl	hs, %eax
-	movl	%eax, -20(%ebp)
-	movl	$0, hs
-	movl	-20(%ebp), %eax
-	movl	40(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L204
-	movl	-20(%ebp), %eax
-	movl	40(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-.L204:
-	movl	-20(%ebp), %eax
-	movl	44(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L205
-	movl	-20(%ebp), %eax
-	movl	44(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-.L205:
-	subl	$12, %esp
-	pushl	-20(%ebp)
-	call	httpd_terminate
-	addl	$16, %esp
-.L203:
-	call	mmc_destroy
-	call	tmr_destroy
-	movl	connects, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	free
-	addl	$16, %esp
-	movl	throttles, %eax
+	.loc 1 545 0
+	movl	%eax, max_connects(%rip)
+	.loc 1 548 0
+	movl	$.LC108, %esi
+	.loc 1 546 0
+	js	.L698
+	.loc 1 551 0
+	subl	$10, %eax
+	movl	%eax, max_connects(%rip)
+	.loc 1 554 0
+	movl	do_chroot(%rip), %eax
+	testl	%eax, %eax
+	jne	.L747
+.L336:
+	.loc 1 594 0
+	movq	data_dir(%rip), %rdi
+	testq	%rdi, %rdi
+	je	.L343
+	.loc 1 596 0
+	call	chdir
+.LVL362:
 	testl	%eax, %eax
-	je	.L198
-	movl	throttles, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	free
-	addl	$16, %esp
-.L198:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE16:
-	.size	shut_down, .-shut_down
-	.section	.rodata
-.LC115:
-	.string	"too many connections!"
-	.align 4
-.LC116:
-	.string	"the connects free list is messed up"
-	.align 4
-.LC117:
-	.string	"out of memory allocating an httpd_conn"
-	.text
-	.type	handle_newconnect, @function
-handle_newconnect:
-.LFB17:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-.L218:
-	movl	num_connects, %edx
-	movl	max_connects, %eax
-	cmpl	%eax, %edx
-	jl	.L208
-	subl	$8, %esp
-	pushl	$.LC115
-	pushl	$4
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	8(%ebp)
-	call	tmr_run
-	addl	$16, %esp
-	movl	$0, %eax
-	jmp	.L219
-.L208:
-	movl	first_free_connect, %eax
-	cmpl	$-1, %eax
-	je	.L210
-	movl	connects, %edx
-	movl	first_free_connect, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$5, %eax
-	addl	%edx, %eax
-	movl	(%eax), %eax
-	testl	%eax, %eax
-	je	.L211
-.L210:
-	subl	$8, %esp
-	pushl	$.LC116
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L211:
-	movl	connects, %edx
-	movl	first_free_connect, %eax
-	movl	%eax, %ecx
-	movl	%ecx, %eax
-	addl	%eax, %eax
-	addl	%ecx, %eax
-	sall	$5, %eax
-	addl	%edx, %eax
-	movl	%eax, -12(%ebp)
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	testl	%eax, %eax
-	jne	.L212
-	subl	$12, %esp
-	pushl	$456
+	js	.L748
+.L343:
+	.loc 1 606 0
+	movl	$handle_term, %esi
+	movl	$15, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL363:
+	.loc 1 607 0
+	movl	$handle_term, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL364:
+	.loc 1 608 0
+	movl	$handle_chld, %esi
+	movl	$17, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL365:
+	.loc 1 609 0
+	movl	$1, %esi
+	movl	$13, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL366:
+	.loc 1 610 0
+	movl	$handle_hup, %esi
+	movl	$1, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL367:
+	.loc 1 611 0
+	movl	$handle_usr1, %esi
+	movl	$10, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL368:
+	.loc 1 612 0
+	movl	$handle_usr2, %esi
+	movl	$12, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL369:
+	.loc 1 613 0
+	movl	$handle_alrm, %esi
+	movl	$14, %edi
+	xorl	%eax, %eax
+	call	sigset
+.LVL370:
+	.loc 1 627 0
+	movl	$360, %edi
+	.loc 1 624 0
+	movl	$0, got_hup(%rip)
+	.loc 1 625 0
+	movl	$0, got_usr1(%rip)
+	.loc 1 626 0
+	movl	$0, watchdog_flag(%rip)
+	.loc 1 627 0
+	call	alarm
+.LVL371:
+	.loc 1 630 0
+	call	tmr_init
+.LVL372:
+	.loc 1 635 0
+	movl	20(%rsp), %r11d
+	leaq	192(%rsp), %rdx
+.LVL373:
+	leaq	64(%rsp), %rsi
+.LVL374:
+	xorl	%eax, %eax
+	testl	%r14d, %r14d
+	movzwl	port(%rip), %ecx
+	cmove	%rax, %rdx
+.LVL375:
+	movl	cgi_limit(%rip), %r9d
+	movq	cgi_pattern(%rip), %r8
+	testl	%r11d, %r11d
+	movq	hostname(%rip), %rdi
+	cmove	%rax, %rsi
+.LVL376:
+	movl	no_empty_referers(%rip), %eax
+	pushq	%rax
+	.cfi_def_cfa_offset 20408
+	movl	do_global_passwd(%rip), %eax
+	pushq	local_pattern(%rip)
+	.cfi_def_cfa_offset 20416
+	pushq	url_pattern(%rip)
+	.cfi_def_cfa_offset 20424
+	pushq	%rax
+	.cfi_def_cfa_offset 20432
+	movl	do_vhost(%rip), %eax
+	pushq	%rax
+	.cfi_def_cfa_offset 20440
+	movl	no_symlink_check(%rip), %eax
+	pushq	%rax
+	.cfi_def_cfa_offset 20448
+	movl	no_log(%rip), %eax
+	pushq	%r12
+	.cfi_def_cfa_offset 20456
+	pushq	%rax
+	.cfi_def_cfa_offset 20464
+	movl	max_age(%rip), %eax
+	pushq	%rbp
+	.cfi_def_cfa_offset 20472
+	pushq	%rax
+	.cfi_def_cfa_offset 20480
+	pushq	p3p(%rip)
+	.cfi_def_cfa_offset 20488
+	pushq	charset(%rip)
+	.cfi_def_cfa_offset 20496
+	call	httpd_initialize
+.LVL377:
+	.loc 1 641 0
+	addq	$96, %rsp
+	.cfi_def_cfa_offset 20400
+	testq	%rax, %rax
+	.loc 1 635 0
+	movq	%rax, hs(%rip)
+	.loc 1 641 0
+	je	.L719
+	.loc 1 645 0
+	movq	JunkClientData(%rip), %rdx
+	xorl	%edi, %edi
+	movl	$1, %r8d
+	movl	$120000, %ecx
+	movl	$occasional, %esi
+	call	tmr_create
+.LVL378:
+	testq	%rax, %rax
+	je	.L749
+	.loc 1 651 0
+	movq	JunkClientData(%rip), %rdx
+	xorl	%edi, %edi
+	movl	$1, %r8d
+	movl	$5000, %ecx
+	movl	$idle, %esi
+	call	tmr_create
+.LVL379:
+	testq	%rax, %rax
+	je	.L750
+	.loc 1 656 0
+	movl	numthrottles(%rip), %r10d
+	testl	%r10d, %r10d
+	jle	.L349
+	.loc 1 659 0
+	movq	JunkClientData(%rip), %rdx
+	xorl	%edi, %edi
+	movl	$1, %r8d
+	movl	$2000, %ecx
+	movl	$update_throttles, %esi
+	call	tmr_create
+.LVL380:
+	testq	%rax, %rax
+	je	.L751
+.L349:
+	.loc 1 667 0
+	movq	JunkClientData(%rip), %rdx
+	xorl	%edi, %edi
+	movl	$1, %r8d
+	movl	$3600000, %ecx
+	movl	$show_stats, %esi
+	call	tmr_create
+.LVL381:
+	testq	%rax, %rax
+	je	.L752
+	.loc 1 673 0
+	xorl	%edi, %edi
+	call	time
+.LVL382:
+	.loc 1 674 0
+	movq	$0, stats_connections(%rip)
+	.loc 1 673 0
+	movq	%rax, stats_time(%rip)
+	movq	%rax, start_time(%rip)
+	.loc 1 675 0
+	movq	$0, stats_bytes(%rip)
+	.loc 1 676 0
+	movl	$0, stats_simultaneous(%rip)
+	.loc 1 679 0
+	call	getuid
+.LVL383:
+	testl	%eax, %eax
+	jne	.L352
+	.loc 1 682 0
+	xorl	%esi, %esi
+	xorl	%edi, %edi
+	call	setgroups
+.LVL384:
+	testl	%eax, %eax
+	.loc 1 684 0
+	movl	$.LC120, %esi
+	.loc 1 682 0
+	js	.L698
+	.loc 1 688 0
+	movl	%r13d, %edi
+	call	setgid
+.LVL385:
+	testl	%eax, %eax
+	.loc 1 690 0
+	movl	$.LC121, %esi
+	.loc 1 688 0
+	js	.L698
+	.loc 1 694 0
+	movq	user(%rip), %rdi
+	movl	%r13d, %esi
+	call	initgroups
+.LVL386:
+	testl	%eax, %eax
+	jns	.L355
+	.loc 1 695 0
+	movl	$.LC122, %esi
+	movl	$4, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL387:
+.L355:
+	.loc 1 701 0
+	movl	8(%rsp), %edi
+	call	setuid
+.LVL388:
+	testl	%eax, %eax
+	.loc 1 703 0
+	movl	$.LC123, %esi
+	.loc 1 701 0
+	js	.L698
+	.loc 1 707 0
+	movl	do_chroot(%rip), %r9d
+	testl	%r9d, %r9d
+	jne	.L352
+	.loc 1 708 0
+	movl	$.LC124, %esi
+	movl	$4, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL389:
+.L352:
+	.loc 1 714 0
+	movslq	max_connects(%rip), %rax
+	leaq	(%rax,%rax,8), %rbp
+	movq	%rax, %r12
+.LVL390:
+	salq	$4, %rbp
+	movq	%rbp, %rdi
 	call	malloc
-	addl	$16, %esp
-	movl	%eax, %edx
-	movl	-12(%ebp), %eax
-	movl	%edx, 8(%eax)
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
+.LVL391:
+	.loc 1 715 0
+	testq	%rax, %rax
+	.loc 1 714 0
+	movq	%rax, connects(%rip)
+	.loc 1 715 0
+	je	.L358
+.LVL392:
+	.loc 1 720 0 discriminator 1
+	xorl	%ecx, %ecx
+	testl	%r12d, %r12d
+	movq	%rax, %rdx
+	jle	.L363
+.LVL393:
+.L603:
+	.loc 1 723 0 discriminator 3
+	addl	$1, %ecx
+.LVL394:
+	.loc 1 722 0 discriminator 3
+	movl	$0, (%rdx)
+	.loc 1 724 0 discriminator 3
+	movq	$0, 8(%rdx)
+.LVL395:
+	.loc 1 723 0 discriminator 3
+	movl	%ecx, 4(%rdx)
+	addq	$144, %rdx
+	.loc 1 720 0 discriminator 3
+	cmpl	%r12d, %ecx
+	jne	.L603
+.LVL396:
+.L363:
+	.loc 1 726 0
+	movl	$-1, -140(%rax,%rbp)
+	.loc 1 731 0
+	movq	hs(%rip), %rax
+	.loc 1 727 0
+	movl	$0, first_free_connect(%rip)
+	.loc 1 728 0
+	movl	$0, num_connects(%rip)
+	.loc 1 729 0
+	movl	$0, httpd_conn_count(%rip)
+	.loc 1 731 0
+	testq	%rax, %rax
+	je	.L364
+	.loc 1 733 0
+	movl	72(%rax), %edi
+	cmpl	$-1, %edi
+	je	.L365
+	.loc 1 734 0
+	xorl	%edx, %edx
+	xorl	%esi, %esi
+	call	fdwatch_add_fd
+.LVL397:
+	movq	hs(%rip), %rax
+.L365:
+	.loc 1 735 0
+	movl	76(%rax), %edi
+	cmpl	$-1, %edi
+	je	.L364
+	.loc 1 736 0
+	xorl	%edx, %edx
+	xorl	%esi, %esi
+	call	fdwatch_add_fd
+.LVL398:
+.L364:
+	.loc 1 740 0
+	movq	%rbx, %rdi
+.LBB597:
+.LBB598:
+	.loc 1 1834 0
+	movl	$1, %r13d
+.LVL399:
+.LBE598:
+.LBE597:
+	.loc 1 740 0
+	call	tmr_prepare_timeval
+.LVL400:
+.L366:
+	.loc 1 741 0
+	movl	terminate(%rip), %edx
+	testl	%edx, %edx
+	je	.L446
+	.loc 1 741 0 is_stmt 0 discriminator 1
+	movl	num_connects(%rip), %eax
+	testl	%eax, %eax
+	jle	.L753
+.L446:
+	.loc 1 744 0 is_stmt 1
+	movl	got_hup(%rip), %eax
+	testl	%eax, %eax
+	jne	.L754
+.L367:
+	.loc 1 751 0
+	movq	%rbx, %rdi
+	call	tmr_mstimeout
+.LVL401:
+	movq	%rax, %rdi
+	call	fdwatch
+.LVL402:
+	.loc 1 752 0
 	testl	%eax, %eax
-	jne	.L213
-	subl	$8, %esp
-	pushl	$.LC117
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L213:
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	$0, (%eax)
-	movl	httpd_conn_count, %eax
-	addl	$1, %eax
-	movl	%eax, httpd_conn_count
-.L212:
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %edx
-	movl	hs, %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	12(%ebp)
-	pushl	%eax
-	call	httpd_get_conn
-	addl	$16, %esp
+	.loc 1 751 0
+	movl	%eax, %ebp
+.LVL403:
+	.loc 1 752 0
+	js	.L755
+	.loc 1 759 0
+	movq	%rbx, %rdi
+	call	tmr_prepare_timeval
+.LVL404:
+	.loc 1 761 0
+	testl	%ebp, %ebp
+	je	.L756
+	.loc 1 769 0
+	movq	hs(%rip), %rax
+	testq	%rax, %rax
+	je	.L383
+	.loc 1 769 0 is_stmt 0 discriminator 1
+	movl	76(%rax), %edi
+	cmpl	$-1, %edi
+	je	.L378
+	.loc 1 770 0 is_stmt 1 discriminator 2
+	call	fdwatch_check_fd
+.LVL405:
+	.loc 1 769 0 discriminator 2
+	testl	%eax, %eax
+	jne	.L379
+.L382:
+	.loc 1 779 0
+	movq	hs(%rip), %rax
+	testq	%rax, %rax
+	je	.L383
+.L378:
+	.loc 1 779 0 is_stmt 0 discriminator 1
+	movl	72(%rax), %edi
+	cmpl	$-1, %edi
+	je	.L383
+	.loc 1 780 0 is_stmt 1 discriminator 2
+	call	fdwatch_check_fd
+.LVL406:
+	.loc 1 779 0 discriminator 2
 	testl	%eax, %eax
-	je	.L215
+	jne	.L757
+.LVL407:
+.L383:
+	.loc 1 791 0
+	call	fdwatch_get_next_client_data
+.LVL408:
+	cmpq	$-1, %rax
+	movq	%rax, %rbp
+.LVL409:
+	je	.L758
+	.loc 1 793 0
+	testq	%rbp, %rbp
+	je	.L383
+.LVL410:
+	.loc 1 796 0
+	movq	8(%rbp), %rax
+.LVL411:
+	movl	704(%rax), %edi
+	call	fdwatch_check_fd
+.LVL412:
+	testl	%eax, %eax
+	je	.L690
+	.loc 1 800 0
+	movl	0(%rbp), %eax
 	cmpl	$2, %eax
-	je	.L216
-	jmp	.L220
-.L215:
-	subl	$12, %esp
-	pushl	8(%ebp)
-	call	tmr_run
-	addl	$16, %esp
-	movl	$0, %eax
-	jmp	.L219
-.L216:
-	movl	$1, %eax
-	jmp	.L219
-.L220:
-	movl	-12(%ebp), %eax
-	movl	$1, (%eax)
-	movl	-12(%ebp), %eax
-	movl	4(%eax), %eax
-	movl	%eax, first_free_connect
-	movl	-12(%ebp), %eax
-	movl	$-1, 4(%eax)
-	movl	num_connects, %eax
-	addl	$1, %eax
-	movl	%eax, num_connects
-	movl	-12(%ebp), %eax
-	movl	%eax, -16(%ebp)
-	movl	8(%ebp), %eax
-	movl	(%eax), %edx
-	movl	-12(%ebp), %eax
-	movl	%edx, 68(%eax)
-	movl	-12(%ebp), %eax
-	movl	$0, 72(%eax)
-	movl	-12(%ebp), %eax
-	movl	$0, 76(%eax)
-	movl	-12(%ebp), %eax
-	movl	$0, 92(%eax)
-	movl	-12(%ebp), %eax
-	movl	$0, 52(%eax)
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	httpd_set_ndelay
-	addl	$16, %esp
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	$0
-	pushl	-12(%ebp)
-	pushl	%eax
-	call	fdwatch_add_fd
-	addl	$16, %esp
-	movl	stats_connections, %eax
-	addl	$1, %eax
-	movl	%eax, stats_connections
-	movl	num_connects, %edx
-	movl	stats_simultaneous, %eax
-	cmpl	%eax, %edx
-	jle	.L217
-	movl	num_connects, %eax
-	movl	%eax, stats_simultaneous
-.L217:
-	jmp	.L218
-.L219:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE17:
-	.size	handle_newconnect, .-handle_newconnect
-	.type	handle_read, @function
-handle_read:
-.LFB18:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%ebx
-	subl	$20, %esp
-	.cfi_offset 3, -12
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	%eax, -16(%ebp)
-	movl	-16(%ebp), %eax
-	movl	144(%eax), %edx
-	movl	-16(%ebp), %eax
-	movl	140(%eax), %eax
-	cmpl	%eax, %edx
-	jb	.L222
-	movl	-16(%ebp), %eax
-	movl	140(%eax), %eax
-	cmpl	$5000, %eax
-	jbe	.L223
-	movl	httpd_err400form, %edx
-	movl	httpd_err400title, %eax
-	subl	$8, %esp
-	pushl	$.LC45
-	pushl	%edx
-	pushl	$.LC45
-	pushl	%eax
-	pushl	$400
-	pushl	-16(%ebp)
+	je	.L386
+	cmpl	$4, %eax
+	je	.L387
+	cmpl	$1, %eax
+	jne	.L383
+.LVL413:
+.LBB603:
+.LBB604:
+	.loc 1 1585 0
+	movq	8(%rbp), %r12
+.LVL414:
+	.loc 1 1588 0
+	movq	160(%r12), %rax
+	movq	152(%r12), %rdx
+	cmpq	%rdx, %rax
+	jb	.L389
+	.loc 1 1590 0
+	cmpq	$5000, %rdx
+	jbe	.L390
+.L691:
+	.loc 1 1592 0
+	movq	httpd_err400form(%rip), %r8
+	movq	httpd_err400title(%rip), %rdx
+	movl	$.LC26, %r9d
+	movq	%r9, %rcx
+	movl	$400, %esi
+.L694:
+	movq	%r12, %rdi
 	call	httpd_send_err
-	addl	$32, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L223:
-	movl	-16(%ebp), %eax
-	movl	140(%eax), %eax
-	leal	1000(%eax), %ecx
-	movl	-16(%ebp), %eax
-	leal	140(%eax), %edx
-	movl	-16(%ebp), %eax
-	addl	$136, %eax
-	subl	$4, %esp
-	pushl	%ecx
-	pushl	%edx
-	pushl	%eax
+.LVL415:
+.L692:
+.LBB605:
+.LBB606:
+	.loc 1 1983 0
+	movq	8(%rbp), %rdi
+.LVL416:
+.L693:
+	call	httpd_write_response
+.LVL417:
+.L690:
+	.loc 1 1986 0
+	movq	%rbx, %rsi
+	movq	%rbp, %rdi
+	call	clear_connection
+.LVL418:
+	jmp	.L383
+.LVL419:
+.L752:
+.LBE606:
+.LBE605:
+.LBE604:
+.LBE603:
+	.loc 1 669 0
+	movl	$2, %edi
+	movl	$.LC119, %esi
+	call	syslog
+.LVL420:
+	.loc 1 670 0
+	movl	$1, %edi
+	call	exit
+.LVL421:
+.L757:
+	.loc 1 782 0
+	movq	hs(%rip), %rax
+	movq	%rbx, %rdi
+	movl	72(%rax), %esi
+	call	handle_newconnect
+.LVL422:
+	testl	%eax, %eax
+	jne	.L366
+	jmp	.L383
+.LVL423:
+.L390:
+.LBB615:
+.LBB612:
+	.loc 1 1596 0
+	leaq	152(%r12), %rsi
+	leaq	144(%r12), %rdi
+	addq	$1000, %rdx
 	call	httpd_realloc_str
-	addl	$16, %esp
-.L222:
-	movl	-16(%ebp), %eax
-	movl	140(%eax), %edx
-	movl	-16(%ebp), %eax
-	movl	136(%eax), %ecx
-	movl	-16(%ebp), %eax
-	movl	144(%eax), %eax
-	addl	%eax, %ecx
-	movl	-16(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	%ecx
-	pushl	%eax
+.LVL424:
+	movq	152(%r12), %rdx
+	movq	160(%r12), %rax
+.L389:
+	.loc 1 1601 0
+	addq	144(%r12), %rax
+	movl	704(%r12), %edi
+	movq	%rax, %rsi
 	call	read
-	addl	$16, %esp
-	movl	%eax, -12(%ebp)
-	cmpl	$0, -12(%ebp)
-	jne	.L225
-	movl	httpd_err400form, %edx
-	movl	httpd_err400title, %eax
-	subl	$8, %esp
-	pushl	$.LC45
-	pushl	%edx
-	pushl	$.LC45
-	pushl	%eax
-	pushl	$400
-	pushl	-16(%ebp)
-	call	httpd_send_err
-	addl	$32, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L225:
-	cmpl	$0, -12(%ebp)
-	jns	.L226
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$4, %eax
-	je	.L227
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$11, %eax
-	je	.L227
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$11, %eax
-	jne	.L228
-.L227:
-	jmp	.L221
-.L228:
-	movl	httpd_err400form, %edx
-	movl	httpd_err400title, %eax
-	subl	$8, %esp
-	pushl	$.LC45
-	pushl	%edx
-	pushl	$.LC45
-	pushl	%eax
-	pushl	$400
-	pushl	-16(%ebp)
-	call	httpd_send_err
-	addl	$32, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L226:
-	movl	-16(%ebp), %eax
-	movl	144(%eax), %edx
-	movl	-12(%ebp), %eax
-	addl	%eax, %edx
-	movl	-16(%ebp), %eax
-	movl	%edx, 144(%eax)
-	movl	12(%ebp), %eax
-	movl	(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 68(%eax)
-	subl	$12, %esp
-	pushl	-16(%ebp)
+.LVL425:
+	.loc 1 1604 0
+	testl	%eax, %eax
+	je	.L691
+	.loc 1 1610 0
+	js	.L759
+	.loc 1 1624 0
+	cltq
+	addq	%rax, 160(%r12)
+	.loc 1 1628 0
+	movq	%r12, %rdi
+	.loc 1 1625 0
+	movq	320(%rsp), %rax
+.LVL426:
+	movq	%rax, 88(%rbp)
+	.loc 1 1628 0
 	call	httpd_got_request
-	addl	$16, %esp
+.LVL427:
 	testl	%eax, %eax
-	je	.L244
+	je	.L383
 	cmpl	$2, %eax
-	jne	.L243
-	movl	httpd_err400form, %edx
-	movl	httpd_err400title, %eax
-	subl	$8, %esp
-	pushl	$.LC45
-	pushl	%edx
-	pushl	$.LC45
-	pushl	%eax
-	pushl	$400
-	pushl	-16(%ebp)
-	call	httpd_send_err
-	addl	$32, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L243:
-	subl	$12, %esp
-	pushl	-16(%ebp)
+	je	.L691
+	.loc 1 1639 0
+	movq	%r12, %rdi
 	call	httpd_parse_request
-	addl	$16, %esp
+.LVL428:
 	testl	%eax, %eax
-	jns	.L232
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L232:
-	subl	$12, %esp
-	pushl	8(%ebp)
-	call	check_throttles
-	addl	$16, %esp
+	js	.L692
+.LVL429:
+.LBB607:
+.LBB608:
+	.loc 1 1885 0
+	movl	numthrottles(%rip), %edi
+	.loc 1 1883 0
+	movl	$0, 56(%rbp)
+	.loc 1 1884 0
+	movq	$-1, 72(%rbp)
+	movq	$-1, 64(%rbp)
+.LVL430:
+	.loc 1 1885 0
+	testl	%edi, %edi
+	jle	.L396
+	xorl	%r14d, %r14d
+	xorl	%r15d, %r15d
+.LVL431:
+.L404:
+	.loc 1 1887 0
+	movq	8(%rbp), %rax
+	movq	240(%rax), %rsi
+	movq	throttles(%rip), %rax
+	movq	(%rax,%r14), %rdi
+	call	match
+.LVL432:
 	testl	%eax, %eax
-	jne	.L233
-	movl	-16(%ebp), %eax
-	movl	172(%eax), %ecx
-	movl	httpd_err503form, %edx
-	movl	httpd_err503title, %eax
-	subl	$8, %esp
-	pushl	%ecx
-	pushl	%edx
-	pushl	$.LC45
-	pushl	%eax
-	pushl	$503
-	pushl	-16(%ebp)
-	call	httpd_send_err
-	addl	$32, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L233:
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	-16(%ebp)
+	je	.L397
+	.loc 1 1890 0
+	movq	%r14, %rdx
+	addq	throttles(%rip), %rdx
+	movq	8(%rdx), %rax
+	movq	24(%rdx), %rsi
+	leaq	(%rax,%rax), %rcx
+	cmpq	%rcx, %rsi
+	jg	.L398
+	.loc 1 1893 0
+	movq	16(%rdx), %rcx
+	cmpq	%rcx, %rsi
+	jl	.L398
+	.loc 1 1895 0
+	movl	40(%rdx), %esi
+	testl	%esi, %esi
+	js	.L399
+	addl	$1, %esi
+	movslq	%esi, %r8
+.L400:
+	.loc 1 1900 0
+	movslq	56(%rbp), %rdi
+	leal	1(%rdi), %r9d
+	movl	%r9d, 56(%rbp)
+	movl	%r15d, 16(%rbp,%rdi,4)
+	.loc 1 1901 0
+	movl	%esi, 40(%rdx)
+	.loc 1 1902 0
+	cqto
+	idivq	%r8
+.LVL433:
+	.loc 1 1903 0
+	movq	64(%rbp), %rdx
+	cmpq	$-1, %rdx
+	je	.L685
+	.loc 1 1906 0
+	cmpq	%rdx, %rax
+	cmovg	%rdx, %rax
+.LVL434:
+.L685:
+	movq	%rax, 64(%rbp)
+.LVL435:
+	.loc 1 1908 0
+	movq	72(%rbp), %rax
+	cmpq	$-1, %rax
+	je	.L686
+	.loc 1 1911 0
+	cmpq	%rax, %rcx
+	cmovl	%rax, %rcx
+.LVL436:
+.L686:
+	movq	%rcx, 72(%rbp)
+.L397:
+	.loc 1 1886 0
+	addl	$1, %r15d
+.LVL437:
+	.loc 1 1885 0
+	cmpl	numthrottles(%rip), %r15d
+	jge	.L396
+	addq	$48, %r14
+	cmpl	$9, 56(%rbp)
+	jle	.L404
+.LVL438:
+.L396:
+.LBE608:
+.LBE607:
+	.loc 1 1655 0
+	movq	%rbx, %rsi
+	movq	%r12, %rdi
 	call	httpd_start_request
-	addl	$16, %esp
-	testl	%eax, %eax
-	jns	.L234
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L234:
-	movl	-16(%ebp), %eax
-	movl	336(%eax), %eax
-	testl	%eax, %eax
-	je	.L235
-	movl	-16(%ebp), %eax
-	movl	344(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 92(%eax)
-	movl	-16(%ebp), %eax
-	movl	348(%eax), %eax
-	leal	1(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 88(%eax)
-	jmp	.L236
-.L235:
-	movl	-16(%ebp), %eax
-	movl	164(%eax), %eax
+.LVL439:
 	testl	%eax, %eax
-	jns	.L237
-	movl	8(%ebp), %eax
-	movl	$0, 88(%eax)
-	jmp	.L236
-.L237:
-	movl	-16(%ebp), %eax
-	movl	164(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 88(%eax)
-.L236:
-	movl	-16(%ebp), %eax
-	movl	452(%eax), %eax
-	testl	%eax, %eax
-	jne	.L238
-	movl	$0, -20(%ebp)
-	jmp	.L239
-.L240:
-	movl	throttles, %ecx
-	movl	8(%ebp), %eax
-	movl	-20(%ebp), %edx
-	movl	12(%eax,%edx,4), %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%eax, %ecx
-	movl	throttles, %ebx
-	movl	8(%ebp), %eax
-	movl	-20(%ebp), %edx
-	movl	12(%eax,%edx,4), %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	16(%eax), %edx
-	movl	-16(%ebp), %eax
-	movl	168(%eax), %eax
-	addl	%edx, %eax
-	movl	%eax, 16(%ecx)
-	addl	$1, -20(%ebp)
-.L239:
-	movl	8(%ebp), %eax
-	movl	52(%eax), %eax
-	cmpl	-20(%ebp), %eax
-	jg	.L240
-	movl	-16(%ebp), %eax
-	movl	168(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 92(%eax)
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L238:
-	movl	8(%ebp), %eax
-	movl	92(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	88(%eax), %eax
-	cmpl	%eax, %edx
-	jl	.L241
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L221
-.L241:
-	movl	8(%ebp), %eax
-	movl	$2, (%eax)
-	movl	12(%ebp), %eax
-	movl	(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 64(%eax)
-	movl	8(%ebp), %eax
-	movl	$0, 80(%eax)
-	movl	8(%ebp), %eax
-	movl	%eax, -24(%ebp)
-	movl	-16(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
+	js	.L692
+	.loc 1 1663 0
+	movl	528(%r12), %esi
+	testl	%esi, %esi
+	je	.L405
+	.loc 1 1665 0
+	movq	536(%r12), %rax
+	movq	%rax, 136(%rbp)
+	.loc 1 1666 0
+	movq	544(%r12), %rax
+	addq	$1, %rax
+	movq	%rax, 128(%rbp)
+.L406:
+	.loc 1 1674 0
+	cmpq	$0, 712(%r12)
+	je	.L760
+	.loc 1 1684 0
+	movq	128(%rbp), %rax
+	cmpq	%rax, 136(%rbp)
+	jge	.L692
+	.loc 1 1693 0
+	movq	320(%rsp), %rax
+	.loc 1 1697 0
+	movl	704(%r12), %edi
+	.loc 1 1692 0
+	movl	$2, 0(%rbp)
+	.loc 1 1694 0
+	movq	$0, 112(%rbp)
+.LVL440:
+	.loc 1 1693 0
+	movq	%rax, 80(%rbp)
+	.loc 1 1697 0
 	call	fdwatch_del_fd
-	addl	$16, %esp
-	movl	-16(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	$1
-	pushl	8(%ebp)
-	pushl	%eax
+.LVL441:
+	.loc 1 1698 0
+	movl	704(%r12), %edi
+	movl	$1, %edx
+	movq	%rbp, %rsi
 	call	fdwatch_add_fd
-	addl	$16, %esp
-	jmp	.L221
-.L244:
-	nop
-.L221:
-	movl	-4(%ebp), %ebx
-	leave
-	.cfi_restore 5
-	.cfi_restore 3
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE18:
-	.size	handle_read, .-handle_read
-	.section	.rodata
-	.align 4
-.LC118:
-	.string	"replacing non-null wakeup_timer!"
-	.align 4
-.LC119:
-	.string	"tmr_create(wakeup_connection) failed"
-.LC120:
-	.string	"write - %m sending %.80s"
-	.text
-	.type	handle_send, @function
-handle_send:
-.LFB19:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%ebx
-	subl	$52, %esp
-	.cfi_offset 3, -12
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	%eax, -36(%ebp)
-	movl	8(%ebp), %eax
-	movl	56(%eax), %eax
-	cmpl	$-1, %eax
-	jne	.L246
-	movl	$1000000000, -52(%ebp)
-	jmp	.L247
-.L246:
-	movl	8(%ebp), %eax
-	movl	56(%eax), %eax
-	leal	3(%eax), %edx
-	testl	%eax, %eax
-	cmovs	%edx, %eax
-	sarl	$2, %eax
-	movl	%eax, -52(%ebp)
-.L247:
-	movl	-36(%ebp), %eax
-	movl	304(%eax), %eax
-	testl	%eax, %eax
-	jne	.L248
-	movl	8(%ebp), %eax
-	movl	88(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	92(%eax), %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, %edx
-	movl	-52(%ebp), %eax
-	cmpl	%eax, %edx
-	cmova	%eax, %edx
-	movl	-36(%ebp), %eax
-	movl	452(%eax), %ecx
-	movl	8(%ebp), %eax
-	movl	92(%eax), %eax
-	addl	%eax, %ecx
-	movl	-36(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	%ecx
-	pushl	%eax
-	call	write
-	addl	$16, %esp
-	movl	%eax, -48(%ebp)
-	jmp	.L249
+.LVL442:
+	jmp	.L383
+.LVL443:
+.L399:
+.LBB610:
+.LBB609:
+	.loc 1 1897 0
+	movl	$.LC129, %esi
+	xorl	%eax, %eax
+	movl	$3, %edi
+	call	syslog
+.LVL444:
+	.loc 1 1898 0
+	movq	%r14, %rdx
+	addq	throttles(%rip), %rdx
+	movl	$1, %esi
+	movl	$1, %r8d
+	movl	$0, 40(%rdx)
+	movq	8(%rdx), %rax
+	movq	16(%rdx), %rcx
+	jmp	.L400
+.LVL445:
+.L744:
+.LBE609:
+.LBE610:
+.LBE612:
+.LBE615:
+	.loc 1 403 0
+	movq	user(%rip), %rdi
+	call	getpwnam
+.LVL446:
+	.loc 1 404 0
+	testq	%rax, %rax
+	je	.L761
+	.loc 1 410 0
+	movl	16(%rax), %ecx
+	.loc 1 411 0
+	movl	20(%rax), %r13d
+	.loc 1 410 0
+	movl	%ecx, 8(%rsp)
+.LVL447:
+	jmp	.L319
+.LVL448:
+.L745:
+	.loc 1 460 0
+	movl	$.LC103, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL449:
+	.loc 1 461 0
+	movl	$.LC104, %edi
+	call	perror
+.LVL450:
+	.loc 1 462 0
+	movl	$1, %edi
+	call	exit
+.LVL451:
+.L761:
+	.loc 1 406 0
+	movq	user(%rip), %rdx
+	movl	$.LC95, %esi
+	movl	$2, %edi
+	call	syslog
+.LVL452:
+	.loc 1 407 0
+	movq	user(%rip), %rcx
+	movq	argv0(%rip), %rdx
+	movl	$.LC96, %esi
+.LVL453:
+.L718:
+	movq	stderr(%rip), %rdi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL454:
+	jmp	.L719
+.LVL455:
+.L307:
+.LBB616:
+.LBB590:
+	.loc 1 1410 0
+	movq	%rbx, %rcx
+	movq	%r12, %rdx
+	xorl	%eax, %eax
+	movl	$.LC90, %esi
+	movl	$2, %edi
+	call	syslog
+.LVL456:
+	.loc 1 1412 0
+	movq	argv0(%rip), %rdx
+	movq	stderr(%rip), %rdi
+	movq	%rbx, %r8
+	movq	%r12, %rcx
+	movl	$.LC91, %esi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL457:
+	jmp	.L317
+.L315:
+	.loc 1 1439 0
+	movl	$.LC93, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL458:
+	.loc 1 1440 0
+	movq	argv0(%rip), %rdx
+	movl	$.LC94, %esi
+	jmp	.L713
+.L313:
+	.loc 1 1434 0
+	addl	%eax, %eax
+	.loc 1 1435 0
+	movq	throttles(%rip), %rdi
+	.loc 1 1434 0
+	movl	%eax, maxthrottles(%rip)
+	.loc 1 1435 0
+	cltq
+	leaq	(%rax,%rax,2), %rsi
+	salq	$4, %rsi
+	call	realloc
+.LVL459:
+	movq	%rax, throttles(%rip)
+	jmp	.L314
+.L312:
+	movq	throttles(%rip), %rax
+	jmp	.L316
+.LVL460:
+.L741:
+	.loc 1 1378 0
+	movq	%r12, %rdx
+	movl	$.LC87, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+.LVL461:
+	call	syslog
+.LVL462:
+	.loc 1 1379 0
+	movq	%r12, %rdi
+	call	perror
+.LVL463:
+	.loc 1 1380 0
+	movl	$1, %edi
+	call	exit
+.LVL464:
+.L740:
+.LBE590:
+.LBE616:
+.LBB617:
+.LBB579:
+	.loc 1 1300 0
+	movq	hostname(%rip), %rdx
+	movl	$2, %edi
+	movl	$128, %ecx
+	movl	$.LC84, %esi
+	xorl	%eax, %eax
+	call	syslog
+.LVL465:
+	.loc 1 1304 0
+	movl	$1, %edi
+	call	exit
+.LVL466:
+.L291:
+	.loc 1 1311 0
+	movq	%r13, %rdi
+	.loc 1 1291 0
+	movl	$1, %r14d
+	.loc 1 1311 0
+	call	freeaddrinfo
+.LVL467:
+	.loc 1 1295 0
+	movl	$0, 20(%rsp)
+	jmp	.L293
+.LVL468:
+.L739:
+	.loc 1 1283 0
+	movq	hostname(%rip), %rdx
+	movl	$2, %edi
+	movl	$128, %ecx
+	movl	$.LC84, %esi
+.LVL469:
+	call	syslog
+.LVL470:
+	.loc 1 1287 0
+	movl	$1, %edi
+	call	exit
+.LVL471:
+.L289:
+	.loc 1 1294 0
+	testq	%r12, %r12
+	je	.L454
+	.loc 1 1278 0
+	xorl	%r14d, %r14d
+	jmp	.L455
+.LVL472:
 .L248:
-	movl	-36(%ebp), %eax
-	movl	252(%eax), %eax
-	movl	%eax, -24(%ebp)
-	movl	-36(%ebp), %eax
-	movl	304(%eax), %eax
-	movl	%eax, -20(%ebp)
-	movl	-36(%ebp), %eax
-	movl	452(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	92(%eax), %eax
-	addl	%edx, %eax
-	movl	%eax, -16(%ebp)
-	movl	8(%ebp), %eax
-	movl	88(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	92(%eax), %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, %edx
-	movl	-52(%ebp), %eax
-	cmpl	%eax, %edx
-	cmovbe	%edx, %eax
-	movl	%eax, -12(%ebp)
-	movl	-36(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	$2
-	leal	-24(%ebp), %edx
-	pushl	%edx
-	pushl	%eax
-	call	writev
-	addl	$16, %esp
-	movl	%eax, -48(%ebp)
-.L249:
-	cmpl	$0, -48(%ebp)
-	jns	.L250
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$4, %eax
+.LBE579:
+.LBE617:
+.LBB618:
+.LBB573:
+.LBB520:
+.LBB521:
+	.loc 1 911 0
+	testl	%r8d, %r8d
+	jne	.L249
+	movzbl	1(%r9), %edx
+.LVL473:
+	cmpb	$100, %dl
 	jne	.L250
-	jmp	.L245
+.LVL474:
+	cmpb	$100, 2(%r9)
+	jne	.L249
+.LVL475:
+.LBE521:
+.LBE520:
+	cmpb	$0, 3(%r9)
+	jne	.L249
+	leal	1(%rax), %edx
+	cmpl	%edx, %ebp
+	jle	.L249
+.LVL476:
+	.loc 1 914 0
+	movslq	%edx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, data_dir(%rip)
+	movl	%edx, %eax
+	jmp	.L244
+.LVL477:
+.L213:
+.LBB522:
+.LBB493:
+	.loc 1 1107 0
+	movl	$.LC63, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL478:
+	testl	%eax, %eax
+	jne	.L215
+.LVL479:
+.LBB449:
+.LBB450:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE450:
+.LBE449:
+	.loc 1 1110 0
+	movl	$1, no_empty_referers(%rip)
+	jmp	.L188
+.LVL480:
+.L454:
+.LBE493:
+.LBE522:
+.LBE573:
+.LBE618:
+.LBB619:
+.LBB580:
+	.loc 1 1311 0
+	movq	%r13, %rdi
+	call	freeaddrinfo
+.LVL481:
+	jmp	.L448
+.LVL482:
+.L215:
+.LBE580:
+.LBE619:
+.LBB620:
+.LBB574:
+.LBB523:
+.LBB494:
+	.loc 1 1112 0
+	movl	$.LC64, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL483:
+	testl	%eax, %eax
+	jne	.L217
+.LVL484:
+.LBB451:
+.LBB452:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL485:
+.LBE452:
+.LBE451:
+.LBB453:
+.LBB454:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL486:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE454:
+.LBE453:
+	.loc 1 1115 0
+	movq	%rax, local_pattern(%rip)
+	jmp	.L188
+.LVL487:
 .L250:
-	cmpl	$0, -48(%ebp)
-	je	.L252
-	cmpl	$0, -48(%ebp)
-	jns	.L253
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$11, %eax
-	je	.L252
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$11, %eax
-	jne	.L253
+.LBE494:
+.LBE523:
+.LBB524:
+.LBB525:
+	.loc 1 916 0
+	cmpb	$115, %dl
+	jne	.L251
+.LVL488:
+.LBE525:
+.LBE524:
+	cmpb	$0, 2(%r9)
+	jne	.L249
+	.loc 1 917 0
+	movl	$0, no_symlink_check(%rip)
+	jmp	.L244
+.LVL489:
+.L249:
+.LBB526:
+	.loc 1 918 0
+	movl	$.LC78, %edi
+	movl	$5, %ecx
+	movq	%r9, %rsi
+.LBE526:
+	repz; cmpsb
+	jne	.L252
+.L460:
+	.loc 1 919 0
+	movl	$1, no_symlink_check(%rip)
+	jmp	.L244
+.LVL490:
+.L217:
+.LBB527:
+.LBB495:
+	.loc 1 1117 0
+	movl	$.LC65, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL491:
+	testl	%eax, %eax
+	jne	.L219
+.LVL492:
+.LBB455:
+.LBB456:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL493:
+.LBE456:
+.LBE455:
+.LBB457:
+.LBB458:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL494:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE458:
+.LBE457:
+	.loc 1 1120 0
+	movq	%rax, throttlefile(%rip)
+	jmp	.L188
+.LVL495:
+.L251:
+.LBE495:
+.LBE527:
+.LBB528:
+	.loc 1 918 0
+	movl	$.LC78, %edi
+	movl	$5, %ecx
+	movq	%r9, %rsi
+.LBE528:
+	repz; cmpsb
+	je	.L460
+.LVL496:
+.L461:
+.LBB529:
+.LBB530:
+	.loc 1 920 0
+	cmpb	$117, %dl
+	jne	.L254
+.LVL497:
+.LBE530:
+.LBE529:
+	cmpb	$0, 2(%r9)
+	jne	.L262
+	leal	1(%rax), %edx
+	cmpl	%edx, %ebp
+	jle	.L262
+.LVL498:
+	.loc 1 923 0
+	movslq	%edx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, user(%rip)
+	movl	%edx, %eax
+	jmp	.L244
+.LVL499:
 .L252:
-	movl	8(%ebp), %eax
-	movl	80(%eax), %eax
-	leal	100(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 80(%eax)
-	movl	8(%ebp), %eax
-	movl	$3, (%eax)
-	movl	-36(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	%eax, -24(%ebp)
-	movl	8(%ebp), %eax
-	movl	72(%eax), %eax
-	testl	%eax, %eax
-	je	.L254
-	subl	$8, %esp
-	pushl	$.LC118
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-.L254:
-	movl	8(%ebp), %eax
-	movl	80(%eax), %eax
-	subl	$12, %esp
-	pushl	$0
-	pushl	%eax
-	pushl	-24(%ebp)
-	pushl	$wakeup_connection
-	pushl	12(%ebp)
-	call	tmr_create
-	addl	$32, %esp
-	movl	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 72(%eax)
-	movl	8(%ebp), %eax
-	movl	72(%eax), %eax
-	testl	%eax, %eax
-	jne	.L255
-	subl	$8, %esp
-	pushl	$.LC119
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L255:
-	jmp	.L245
+.LBB533:
+.LBB531:
+	.loc 1 920 0
+	testl	%r8d, %r8d
+	jne	.L471
+	movzbl	1(%r9), %edx
+	jmp	.L461
+.LVL500:
+.L219:
+.LBE531:
+.LBE533:
+.LBB534:
+.LBB496:
+	.loc 1 1122 0
+	movl	$.LC66, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL501:
+	testl	%eax, %eax
+	jne	.L221
+.LVL502:
+.LBB459:
+.LBB460:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL503:
+.LBE460:
+.LBE459:
+.LBB461:
+.LBB462:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL504:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE462:
+.LBE461:
+	.loc 1 1125 0
+	movq	%rax, hostname(%rip)
+	jmp	.L188
+.LVL505:
+.L471:
+.LBE496:
+.LBE534:
+.LBB535:
+.LBB532:
+	.loc 1 920 0
+	movl	%r8d, %edx
+.LVL506:
 .L253:
-	cmpl	$0, -48(%ebp)
-	jns	.L256
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$32, %eax
-	je	.L257
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$22, %eax
-	je	.L257
-	call	__errno_location
-	movl	(%eax), %eax
-	cmpl	$104, %eax
-	je	.L257
-	movl	-36(%ebp), %eax
-	movl	172(%eax), %eax
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC120
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-.L257:
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	clear_connection
-	addl	$16, %esp
-	jmp	.L245
-.L256:
-	movl	12(%ebp), %eax
-	movl	(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 68(%eax)
-	movl	-36(%ebp), %eax
-	movl	304(%eax), %eax
-	testl	%eax, %eax
-	je	.L258
-	movl	-48(%ebp), %edx
-	movl	-36(%ebp), %eax
-	movl	304(%eax), %eax
-	cmpl	%eax, %edx
-	jae	.L259
-	movl	-36(%ebp), %eax
-	movl	304(%eax), %edx
-	movl	-48(%ebp), %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, -32(%ebp)
-	movl	-32(%ebp), %edx
-	movl	-36(%ebp), %eax
-	movl	252(%eax), %ecx
-	movl	-48(%ebp), %eax
-	addl	%eax, %ecx
-	movl	-36(%ebp), %eax
-	movl	252(%eax), %eax
-	subl	$4, %esp
-	pushl	%edx
-	pushl	%ecx
-	pushl	%eax
-	call	memmove
-	addl	$16, %esp
-	movl	-32(%ebp), %edx
-	movl	-36(%ebp), %eax
-	movl	%edx, 304(%eax)
-	movl	$0, -48(%ebp)
-	jmp	.L258
-.L259:
-	movl	-48(%ebp), %edx
-	movl	-36(%ebp), %eax
-	movl	304(%eax), %eax
-	subl	%eax, %edx
+.LBE532:
+.LBE535:
+	.loc 1 945 0
+	testl	%edx, %edx
+	jne	.L262
+	.loc 1 946 0
+	movl	$1, do_vhost(%rip)
+	jmp	.L244
+.LVL507:
+.L221:
+.LBB536:
+.LBB497:
+	.loc 1 1127 0
+	movl	$.LC67, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL508:
+	testl	%eax, %eax
+	jne	.L223
+.LVL509:
+.LBB463:
+.LBB464:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL510:
+.LBE464:
+.LBE463:
+.LBB465:
+.LBB466:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL511:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE466:
+.LBE465:
+	.loc 1 1130 0
+	movq	%rax, logfile(%rip)
+	jmp	.L188
+.LVL512:
+.L262:
+.LBE497:
+.LBE536:
+.LBB537:
+	.loc 1 947 0
+	movl	$.LC79, %edi
+	movl	$5, %ecx
+	movq	%r9, %rsi
+.LBE537:
+	repz; cmpsb
+	jne	.L268
+	.loc 1 948 0
+	movl	$0, do_vhost(%rip)
+	jmp	.L244
+.LVL513:
+.L254:
+.LBB538:
+.LBB539:
+	.loc 1 925 0
+	cmpb	$99, %dl
+	jne	.L474
+.LVL514:
+.LBE539:
+.LBE538:
+	cmpb	$0, 2(%r9)
+	jne	.L262
+	leal	1(%rax), %edx
+.LVL515:
+	cmpl	%edx, %ebp
+	jle	.L262
+.LVL516:
+	.loc 1 928 0
+	movslq	%edx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, cgi_pattern(%rip)
 	movl	%edx, %eax
-	movl	%eax, -48(%ebp)
-	movl	-36(%ebp), %eax
-	movl	$0, 304(%eax)
-.L258:
-	movl	8(%ebp), %eax
-	movl	92(%eax), %edx
-	movl	-48(%ebp), %eax
-	addl	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 92(%eax)
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	8(%ebp), %edx
-	movl	8(%edx), %edx
-	movl	168(%edx), %ecx
-	movl	-48(%ebp), %edx
-	addl	%ecx, %edx
-	movl	%edx, 168(%eax)
-	movl	$0, -40(%ebp)
-	jmp	.L260
-.L261:
-	movl	throttles, %ecx
-	movl	8(%ebp), %eax
-	movl	-40(%ebp), %edx
-	movl	12(%eax,%edx,4), %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%eax, %ecx
-	movl	throttles, %ebx
-	movl	8(%ebp), %eax
-	movl	-40(%ebp), %edx
-	movl	12(%eax,%edx,4), %eax
-	movl	%eax, %edx
+	jmp	.L244
+.LVL517:
+.L223:
+.LBB540:
+.LBB498:
+	.loc 1 1132 0
+	movl	$.LC68, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL518:
+	testl	%eax, %eax
+	jne	.L225
+.LVL519:
+.LBB467:
+.LBB468:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE468:
+.LBE467:
+	.loc 1 1135 0
+	movl	$1, do_vhost(%rip)
+	jmp	.L188
+.LVL520:
+.L268:
+.LBE498:
+.LBE540:
+.LBB541:
+.LBB542:
+	.loc 1 949 0
+	testl	%r8d, %r8d
+	jne	.L269
+.LVL521:
+	cmpb	$103, 1(%r9)
+	jne	.L270
+.LVL522:
+.LBE542:
+.LBE541:
+	cmpb	$0, 2(%r9)
+	jne	.L270
+	.loc 1 950 0
+	movl	$1, do_global_passwd(%rip)
+	jmp	.L244
+.LVL523:
+.L474:
+.LBB543:
+.LBB544:
+	.loc 1 930 0
+	cmpb	$116, %dl
+	jne	.L259
+.LVL524:
+.LBE544:
+.LBE543:
+	cmpb	$0, 2(%r9)
+	jne	.L262
+	leal	1(%rax), %edx
+.LVL525:
+	cmpl	%edx, %ebp
+	jle	.L262
+.LVL526:
+	.loc 1 933 0
+	movslq	%edx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, throttlefile(%rip)
 	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	16(%eax), %edx
-	movl	-48(%ebp), %eax
-	addl	%edx, %eax
-	movl	%eax, 16(%ecx)
-	addl	$1, -40(%ebp)
-.L260:
-	movl	8(%ebp), %eax
-	movl	52(%eax), %eax
-	cmpl	-40(%ebp), %eax
-	jg	.L261
-	movl	8(%ebp), %eax
-	movl	92(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	88(%eax), %eax
-	cmpl	%eax, %edx
-	jl	.L262
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L245
-.L262:
-	movl	8(%ebp), %eax
-	movl	80(%eax), %eax
-	cmpl	$100, %eax
+	jmp	.L244
+.LVL527:
+.L225:
+.LBB545:
+.LBB499:
+	.loc 1 1137 0
+	movl	$.LC69, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL528:
+	testl	%eax, %eax
+	jne	.L227
+.LVL529:
+.LBB469:
+.LBB470:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE470:
+.LBE469:
+	.loc 1 1140 0
+	movl	$0, do_vhost(%rip)
+	jmp	.L188
+.LVL530:
+.L259:
+.LBE499:
+.LBE545:
+.LBB546:
+.LBB547:
+	.loc 1 935 0
+	cmpb	$104, %dl
+	jne	.L263
+.LVL531:
+.LBE547:
+.LBE546:
+	cmpb	$0, 2(%r9)
+	jne	.L262
+	leal	1(%rax), %ecx
+	cmpl	%ecx, %ebp
 	jle	.L263
-	movl	8(%ebp), %eax
-	movl	80(%eax), %eax
-	leal	-100(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 80(%eax)
+.LVL532:
+	.loc 1 938 0
+	movslq	%ecx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, hostname(%rip)
+	movl	%ecx, %eax
+	jmp	.L244
+.LVL533:
+.L227:
+.LBB548:
+.LBB500:
+	.loc 1 1142 0
+	movl	$.LC70, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL534:
+	testl	%eax, %eax
+	jne	.L229
+.LVL535:
+.LBB471:
+.LBB472:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE472:
+.LBE471:
+	.loc 1 1145 0
+	movl	$1, do_global_passwd(%rip)
+	jmp	.L188
+.LVL536:
 .L263:
-	movl	8(%ebp), %eax
-	movl	56(%eax), %eax
-	cmpl	$-1, %eax
-	je	.L245
-	movl	12(%ebp), %eax
-	movl	(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	64(%eax), %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, -44(%ebp)
-	cmpl	$0, -44(%ebp)
+.LBE500:
+.LBE548:
+.LBB549:
+.LBB550:
+	.loc 1 940 0
+	cmpb	$108, %dl
 	jne	.L265
-	movl	$1, -44(%ebp)
+.LVL537:
+.LBE550:
+.LBE549:
+	cmpb	$0, 2(%r9)
+	jne	.L262
+	leal	1(%rax), %ecx
+	cmpl	%ecx, %ebp
+	jle	.L265
+.LVL538:
+	.loc 1 943 0
+	movslq	%ecx, %rax
+	movq	(%r12,%rax,8), %rax
+	movq	%rax, logfile(%rip)
+	movl	%ecx, %eax
+	jmp	.L244
+.LVL539:
+.L229:
+.LBB551:
+.LBB501:
+	.loc 1 1147 0
+	movl	$.LC71, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL540:
+	testl	%eax, %eax
+	jne	.L231
+.LVL541:
+.LBB473:
+.LBB436:
+	.loc 1 1204 0
+	testq	%r15, %r15
+	jne	.L721
+.LBE436:
+.LBE473:
+	.loc 1 1150 0
+	movl	$0, do_global_passwd(%rip)
+	jmp	.L188
+.LVL542:
 .L265:
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	168(%eax), %eax
-	cltd
-	idivl	-44(%ebp)
-	movl	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	56(%eax), %eax
-	cmpl	%eax, %edx
-	jle	.L245
-	movl	8(%ebp), %eax
-	movl	$3, (%eax)
-	movl	-36(%ebp), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
+.LBE501:
+.LBE551:
+.LBB552:
+.LBB553:
+	.loc 1 945 0
+	cmpb	$118, %dl
+	jne	.L262
+	movzbl	2(%r9), %edx
+.LVL543:
+	jmp	.L253
+.LVL544:
+.L231:
+.LBE553:
+.LBE552:
+.LBB554:
+.LBB502:
+	.loc 1 1152 0
+	movl	$.LC72, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL545:
+	testl	%eax, %eax
+	jne	.L233
+.LVL546:
+.LBB474:
+.LBB475:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL547:
+.LBE475:
+.LBE474:
+.LBB476:
+.LBB477:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL548:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE477:
+.LBE476:
+	.loc 1 1155 0
+	movq	%rax, pidfile(%rip)
+	jmp	.L188
+.LVL549:
+.L270:
+.LBE502:
+.LBE554:
+.LBB555:
+	.loc 1 951 0
+	movl	$.LC80, %edi
+	movl	$5, %ecx
+	movq	%r9, %rsi
+.LBE555:
+	repz; cmpsb
+	jne	.L762
+.L465:
+	.loc 1 952 0
+	movl	$0, do_global_passwd(%rip)
+	jmp	.L244
+.LVL550:
+.L233:
+.LBB556:
+.LBB503:
+	.loc 1 1157 0
+	movl	$.LC73, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL551:
+	testl	%eax, %eax
+	jne	.L235
+.LVL552:
+.LBB478:
+.LBB479:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL553:
+.LBE479:
+.LBE478:
+.LBB480:
+.LBB481:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL554:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE481:
+.LBE480:
+	.loc 1 1160 0
+	movq	%rax, charset(%rip)
+	jmp	.L188
+.LVL555:
+.L762:
+.LBE503:
+.LBE556:
+.LBB557:
+.LBB558:
+	.loc 1 953 0
+	movzbl	1(%r9), %edx
+.LVL556:
+	cmpb	$105, %dl
+	jne	.L273
+.LVL557:
+.LBE558:
+.LBE557:
+	cmpb	$0, 2(%r9)
+	jne	.L453
+	addl	$1, %eax
+.LVL558:
+	cmpl	%eax, %ebp
+	jle	.L453
+.LVL559:
+	.loc 1 956 0
+	movslq	%eax, %rdx
+	movq	(%r12,%rdx,8), %rdx
+	movq	%rdx, pidfile(%rip)
+	jmp	.L244
+.LVL560:
+.L235:
+.LBB559:
+.LBB504:
+	.loc 1 1162 0
+	movl	$.LC74, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL561:
+	testl	%eax, %eax
+	jne	.L237
+.LVL562:
+.LBB482:
+.LBB483:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL563:
+.LBE483:
+.LBE482:
+.LBB484:
+.LBB485:
+	.loc 1 1219 0
+	movq	%r15, %rdi
+	call	__strdup
+.LVL564:
+	.loc 1 1220 0
+	testq	%rax, %rax
+	je	.L200
+.LBE485:
+.LBE484:
+	.loc 1 1165 0
+	movq	%rax, p3p(%rip)
+	jmp	.L188
+.LVL565:
+.L273:
+.LBE504:
+.LBE559:
+.LBB560:
+.LBB561:
+	.loc 1 958 0
+	cmpb	$84, %dl
+	jne	.L477
+.LVL566:
+.LBE561:
+.LBE560:
+	cmpb	$0, 2(%r9)
+	jne	.L453
+	addl	$1, %eax
+.LVL567:
+	cmpl	%eax, %ebp
+	jle	.L453
+.LVL568:
+	.loc 1 961 0
+	movslq	%eax, %rdx
+.LVL569:
+	movq	(%r12,%rdx,8), %rdx
+	movq	%rdx, charset(%rip)
+	jmp	.L244
+.LVL570:
+.L237:
+.LBB562:
+.LBB505:
+	.loc 1 1167 0
+	movl	$.LC75, %esi
+	movq	%rbx, %rdi
+	call	strcasecmp
+.LVL571:
+	testl	%eax, %eax
+	jne	.L239
+.LVL572:
+.LBB486:
+.LBB416:
+	.loc 1 1192 0
+	testq	%r15, %r15
+	je	.L720
+.LVL573:
+.LBE416:
+.LBE486:
+.LBB487:
+.LBB488:
+	.loc 2 286 0
+	movl	$10, %edx
+	xorl	%esi, %esi
+	movq	%r15, %rdi
+	call	strtol
+.LVL574:
+	movl	%eax, max_age(%rip)
+	jmp	.L188
+.LVL575:
+.L477:
+.LBE488:
+.LBE487:
+.LBE505:
+.LBE562:
+.LBB563:
+.LBB564:
+	.loc 1 963 0
+	cmpb	$80, %dl
+	jne	.L278
+.LVL576:
+.LBE564:
+.LBE563:
+	cmpb	$0, 2(%r9)
+	jne	.L453
+	addl	$1, %eax
+.LVL577:
+	cmpl	%eax, %ebp
+	jle	.L453
+.LVL578:
+	.loc 1 966 0
+	movslq	%eax, %rdx
+.LVL579:
+	movq	(%r12,%rdx,8), %rdx
+	movq	%rdx, p3p(%rip)
+	jmp	.L244
+.LVL580:
+.L239:
+.LBB565:
+.LBB506:
+	.loc 1 1174 0
+	movq	%rbx, %rcx
+	movq	argv0(%rip), %rdx
+	movl	$.LC76, %esi
+	jmp	.L718
+.LVL581:
+.L278:
+.LBE506:
+.LBE565:
+.LBB566:
+.LBB567:
+	.loc 1 968 0
+	cmpb	$77, %dl
+	jne	.L280
+.LVL582:
+.LBE567:
+.LBE566:
+	cmpb	$0, 2(%r9)
+	jne	.L453
+	leal	1(%rax), %ebx
+	cmpl	%ebx, %ebp
+	jg	.L763
+.LVL583:
+.L280:
+.LBB568:
+.LBB569:
+	.loc 1 973 0
+	cmpb	$68, %dl
+	jne	.L453
+.LVL584:
+.LBE569:
+.LBE568:
+	cmpb	$0, 2(%r9)
+	jne	.L453
+	.loc 1 974 0
+	movl	$1, debug(%rip)
+	jmp	.L244
+.LVL585:
+.L763:
+	.loc 1 971 0
+	movslq	%ebx, %rax
+.LBB570:
+.LBB571:
+	.loc 2 286 0
+	movl	$10, %edx
+.LVL586:
+	xorl	%esi, %esi
+	movq	(%r12,%rax,8), %rdi
+	call	strtol
+.LVL587:
+	movl	%eax, max_age(%rip)
+.LBE571:
+.LBE570:
+	.loc 1 971 0
+	movl	%ebx, %eax
+	jmp	.L244
+.LVL588:
+.L322:
+.LBE574:
+.LBE620:
+.LBB621:
+.LBB622:
+	.loc 1 422 0
+	cmpb	$45, (%rax)
+	jne	.L323
+.LVL589:
+.LBE622:
+.LBE621:
+	.loc 1 422 0 is_stmt 0 discriminator 3
+	cmpb	$0, 1(%rax)
+	.loc 1 423 0 is_stmt 1 discriminator 3
+	movq	stdout(%rip), %r12
+	.loc 1 422 0 discriminator 3
+	je	.L321
+.LVL590:
+.L323:
+	.loc 1 426 0
+	movl	$.LC98, %esi
+	movq	%rax, %rdi
+	call	fopen
+.LVL591:
+	.loc 1 427 0
+	testq	%rax, %rax
+	.loc 1 426 0
+	movq	%rax, %r12
+.LVL592:
+	.loc 1 427 0
+	je	.L764
+	.loc 1 433 0
+	movq	logfile(%rip), %rax
+.LVL593:
+	cmpb	$47, (%rax)
+	je	.L325
+	.loc 1 435 0
+	movl	$.LC99, %esi
+	movl	$4, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL594:
+	.loc 1 436 0
+	movq	argv0(%rip), %rdx
+	movq	stderr(%rip), %rdi
+	movl	$.LC100, %esi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL595:
+.L325:
+	.loc 1 438 0
+	movq	%r12, %rdi
+	call	fileno
+.LVL596:
+	movl	$1, %edx
+	movl	%eax, %edi
+	movl	$2, %esi
+	xorl	%eax, %eax
+	call	fcntl
+.LVL597:
+	.loc 1 439 0
+	call	getuid
+.LVL598:
+	testl	%eax, %eax
+	jne	.L321
+	.loc 1 444 0
+	movq	%r12, %rdi
+	call	fileno
+.LVL599:
+	movl	8(%rsp), %esi
+	movl	%r13d, %edx
+	movl	%eax, %edi
+	call	fchown
+.LVL600:
+	testl	%eax, %eax
+	jns	.L321
+	.loc 1 446 0
+	movl	$.LC101, %esi
+	movl	$4, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL601:
+	.loc 1 447 0
+	movl	$.LC102, %edi
+	call	perror
+.LVL602:
+	jmp	.L321
+.LVL603:
+.L481:
+	.loc 1 453 0
+	xorl	%r12d, %r12d
+	jmp	.L321
+.LVL604:
+.L764:
+	.loc 1 429 0
+	movq	logfile(%rip), %rdx
+	movl	$.LC87, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+.LVL605:
+	call	syslog
+.LVL606:
+	.loc 1 430 0
+	movq	logfile(%rip), %rdi
+	call	perror
+.LVL607:
+	.loc 1 431 0
+	movl	$1, %edi
+	call	exit
+.LVL608:
+.L330:
+	.loc 1 525 0
+	call	setsid
+.LVL609:
+	jmp	.L332
+.LVL610:
+.L746:
+.LBB623:
+	.loc 1 535 0
+	movq	pidfile(%rip), %rdx
+	movl	$2, %edi
+	movl	$.LC87, %esi
+	xorl	%eax, %eax
+.LVL611:
+	call	syslog
+.LVL612:
+	.loc 1 536 0
+	movl	$1, %edi
+	call	exit
+.LVL613:
+.L419:
+.LBE623:
+.LBB624:
+.LBB601:
+	.loc 1 1755 0
+	addq	$100, 112(%rbp)
+	.loc 1 1757 0
+	movl	704(%r12), %edi
+	.loc 1 1756 0
+	movl	$3, 0(%rbp)
+	.loc 1 1757 0
 	call	fdwatch_del_fd
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	168(%eax), %eax
-	movl	8(%ebp), %edx
-	movl	56(%edx), %ebx
-	cltd
-	idivl	%ebx
-	subl	-44(%ebp), %eax
-	movl	%eax, -28(%ebp)
-	movl	8(%ebp), %eax
-	movl	%eax, -24(%ebp)
-	movl	8(%ebp), %eax
-	movl	72(%eax), %eax
-	testl	%eax, %eax
-	je	.L266
-	subl	$8, %esp
-	pushl	$.LC118
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-.L266:
-	cmpl	$0, -28(%ebp)
-	jle	.L267
-	movl	-28(%ebp), %eax
-	imull	$1000, %eax, %eax
-	jmp	.L268
-.L267:
-	movl	$500, %eax
-.L268:
-	subl	$12, %esp
-	pushl	$0
-	pushl	%eax
-	pushl	-24(%ebp)
-	pushl	$wakeup_connection
-	pushl	12(%ebp)
+.LVL614:
+	.loc 1 1759 0
+	cmpq	$0, 96(%rbp)
+	je	.L422
+	.loc 1 1760 0
+	movl	$.LC130, %esi
+	movl	$3, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL615:
+.L422:
+	.loc 1 1761 0
+	movq	112(%rbp), %rcx
+.LVL616:
+.L688:
+	xorl	%r8d, %r8d
+	movq	%rbp, %rdx
+	movl	$wakeup_connection, %esi
+	movq	%rbx, %rdi
 	call	tmr_create
-	addl	$32, %esp
+.LVL617:
+	.loc 1 1763 0
+	testq	%rax, %rax
+	.loc 1 1761 0
+	movq	%rax, 96(%rbp)
+	.loc 1 1763 0
+	jne	.L383
+	.loc 1 1765 0
+	movl	$.LC131, %esi
+.LVL618:
+.L698:
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL619:
+	jmp	.L719
+.LVL620:
+.L748:
+.LBE601:
+.LBE624:
+	.loc 1 598 0
+	movl	$.LC114, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL621:
+	.loc 1 599 0
+	movl	$.LC115, %edi
+	call	perror
+.LVL622:
+	.loc 1 600 0
+	movl	$1, %edi
+	call	exit
+.LVL623:
+.L747:
+	.loc 1 556 0
+	movq	%rbp, %rdi
+	call	chroot
+.LVL624:
+	testl	%eax, %eax
+	js	.L765
+	.loc 1 567 0
+	movq	logfile(%rip), %rcx
+	testq	%rcx, %rcx
+	je	.L338
+.LVL625:
+.LBB625:
+.LBB626:
+	.loc 1 567 0 is_stmt 0 discriminator 1
+	cmpb	$45, (%rcx)
+	jne	.L339
+.LVL626:
+.LBE626:
+.LBE625:
+	.loc 1 567 0 discriminator 4
+	cmpb	$0, 1(%rcx)
+	je	.L338
+.LVL627:
+.L339:
+	.loc 1 569 0 is_stmt 1
+	movq	%rbp, %r15
+.L340:
+	movl	(%r15), %edx
+	addq	$4, %r15
+	leal	-16843009(%rdx), %eax
+	notl	%edx
+	andl	%edx, %eax
+	andl	$-2139062144, %eax
+	je	.L340
 	movl	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 72(%eax)
-	movl	8(%ebp), %eax
-	movl	72(%eax), %eax
+	movq	%rcx, %rdi
+	movq	%rbp, %rsi
+	shrl	$16, %edx
+	testl	$32896, %eax
+	movq	%rcx, 24(%rsp)
+	cmove	%edx, %eax
+	leaq	2(%r15), %rdx
+	cmove	%rdx, %r15
+	addb	%al, %al
+	sbbq	$3, %r15
+	subq	%rbp, %r15
+	movq	%r15, %rdx
+	call	strncmp
+.LVL628:
 	testl	%eax, %eax
-	jne	.L245
-	subl	$8, %esp
-	pushl	$.LC119
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
+	movq	24(%rsp), %rcx
+	jne	.L342
+.LVL629:
+	.loc 1 571 0
+	leaq	-1(%rcx,%r15), %rsi
+	movq	%rcx, %rdi
+	call	strcpy
+.LVL630:
+.L338:
+	.loc 1 583 0
+	movl	$47, %r15d
+	.loc 1 585 0
+	movq	%rbp, %rdi
+	.loc 1 583 0
+	movw	%r15w, 10336(%rsp)
+	.loc 1 585 0
+	call	chdir
+.LVL631:
+	testl	%eax, %eax
+	jns	.L336
+	.loc 1 587 0
+	movl	$.LC112, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL632:
+	.loc 1 588 0
+	movl	$.LC113, %edi
+	call	perror
+.LVL633:
+	.loc 1 589 0
+	movl	$1, %edi
 	call	exit
-.L245:
-	movl	-4(%ebp), %ebx
-	leave
-	.cfi_restore 5
-	.cfi_restore 3
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE19:
-	.size	handle_send, .-handle_send
-	.type	handle_linger, @function
-handle_linger:
-.LFB20:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$4136, %esp
-	movl	8(%ebp), %eax
-	movl	%eax, -4124(%ebp)
-	movl	12(%ebp), %eax
-	movl	%eax, -4128(%ebp)
-	movl	%gs:20, %eax
-	movl	%eax, -12(%ebp)
-	xorl	%eax, %eax
-	movl	-4124(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	$4096
-	leal	-4108(%ebp), %edx
-	pushl	%edx
-	pushl	%eax
-	call	read
-	addl	$16, %esp
-	movl	%eax, -4112(%ebp)
-	cmpl	$0, -4112(%ebp)
-	jns	.L271
+.LVL634:
+.L342:
+	.loc 1 579 0
+	xorl	%eax, %eax
+	movl	$.LC110, %esi
+	movl	$4, %edi
+	call	syslog
+.LVL635:
+	.loc 1 580 0
+	movq	argv0(%rip), %rdx
+	movq	stderr(%rip), %rdi
+	movl	$.LC111, %esi
+	xorl	%eax, %eax
+	call	fprintf
+.LVL636:
+	jmp	.L338
+.LVL637:
+.L765:
+	.loc 1 558 0
+	movl	$.LC109, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL638:
+	.loc 1 559 0
+	movl	$.LC52, %edi
+	call	perror
+.LVL639:
+	.loc 1 560 0
+	movl	$1, %edi
+	call	exit
+.LVL640:
+.L751:
+	.loc 1 661 0
+	movl	$2, %edi
+	movl	$.LC118, %esi
+	call	syslog
+.LVL641:
+	.loc 1 662 0
+	movl	$1, %edi
+	call	exit
+.LVL642:
+.L756:
+	.loc 1 764 0
+	movq	%rbx, %rdi
+	call	tmr_run
+.LVL643:
+	.loc 1 765 0
+	jmp	.L366
+.LVL644:
+.L755:
+	.loc 1 754 0
 	call	__errno_location
-	movl	(%eax), %eax
+.LVL645:
+	movl	(%rax), %eax
+	cmpl	$11, %eax
+	je	.L366
 	cmpl	$4, %eax
-	je	.L270
+	je	.L366
+	.loc 1 756 0
+	movl	$3, %edi
+	movl	$.LC128, %esi
+	xorl	%eax, %eax
+	call	syslog
+.LVL646:
+	.loc 1 757 0
+	movl	$1, %edi
+	call	exit
+.LVL647:
+.L754:
+.LBB627:
+.LBB628:
+	.loc 1 330 0
+	movl	no_log(%rip), %r8d
+	testl	%r8d, %r8d
+	jne	.L368
+	cmpq	$0, hs(%rip)
+	je	.L368
+	.loc 1 334 0
+	movq	logfile(%rip), %rax
+	testq	%rax, %rax
+	je	.L368
+.LVL648:
+.LBB629:
+.LBB630:
+	cmpb	$45, (%rax)
+	jne	.L369
+.LVL649:
+.LBE630:
+.LBE629:
+	cmpb	$0, 1(%rax)
+	jne	.L369
+.LVL650:
+.L368:
+.LBE628:
+.LBE627:
+	.loc 1 747 0
+	movl	$0, got_hup(%rip)
+	jmp	.L367
+.LVL651:
+.L379:
+	.loc 1 772 0
+	movq	hs(%rip), %rax
+	movq	%rbx, %rdi
+	movl	76(%rax), %esi
+	call	handle_newconnect
+.LVL652:
+	testl	%eax, %eax
+	jne	.L366
+	jmp	.L382
+.LVL653:
+.L369:
+.LBB633:
+.LBB631:
+	.loc 1 336 0
+	xorl	%eax, %eax
+.LVL654:
+	movl	$.LC126, %esi
+	movl	$5, %edi
+	call	syslog
+.LVL655:
+	.loc 1 337 0
+	movq	logfile(%rip), %rdi
+	movl	$.LC98, %esi
+	call	fopen
+.LVL656:
+	.loc 1 338 0
+	testq	%rax, %rax
+	.loc 1 337 0
+	movq	%rax, %rbp
+.LVL657:
+	.loc 1 338 0
+	je	.L766
+	.loc 1 343 0
+	movq	%rax, %rdi
+	call	fileno
+.LVL658:
+	movl	$1, %edx
+	movl	%eax, %edi
+	movl	$2, %esi
+	xorl	%eax, %eax
+	call	fcntl
+.LVL659:
+	.loc 1 344 0
+	movq	hs(%rip), %rdi
+	movq	%rbp, %rsi
+	call	httpd_set_logfp
+.LVL660:
+	jmp	.L368
+.LVL661:
+.L750:
+.LBE631:
+.LBE633:
+	.loc 1 653 0
+	movl	$2, %edi
+	movl	$.LC117, %esi
+	call	syslog
+.LVL662:
+	.loc 1 654 0
+	movl	$1, %edi
+	call	exit
+.LVL663:
+.L358:
+	.loc 1 717 0
+	movl	$.LC125, %esi
+	jmp	.L698
+.LVL664:
+.L753:
+	.loc 1 824 0
+	call	shut_down
+.LVL665:
+	.loc 1 825 0
+	movl	$5, %edi
+	movl	$.LC42, %esi
+	xorl	%eax, %eax
+	call	syslog
+.LVL666:
+	.loc 1 826 0
+	call	closelog
+.LVL667:
+	.loc 1 827 0
+	xorl	%edi, %edi
+	call	exit
+.LVL668:
+.L749:
+	.loc 1 647 0
+	movl	$2, %edi
+	movl	$.LC116, %esi
+	call	syslog
+.LVL669:
+	.loc 1 648 0
+	movl	$1, %edi
+	call	exit
+.LVL670:
+.L766:
+.LBB634:
+.LBB632:
+	.loc 1 340 0
+	movq	logfile(%rip), %rdx
+	movl	$.LC127, %esi
+	movl	$2, %edi
+	xorl	%eax, %eax
+.LVL671:
+	call	syslog
+.LVL672:
+	jmp	.L368
+.LVL673:
+.L759:
+.LBE632:
+.LBE634:
+.LBB635:
+.LBB613:
+	.loc 1 1617 0
 	call	__errno_location
-	movl	(%eax), %eax
+.LVL674:
+	movl	(%rax), %eax
 	cmpl	$11, %eax
-	je	.L270
-.L271:
-	cmpl	$0, -4112(%ebp)
-	jg	.L270
-	subl	$8, %esp
-	pushl	-4128(%ebp)
-	pushl	-4124(%ebp)
+	je	.L383
+	cmpl	$4, %eax
+	jne	.L691
+	jmp	.L383
+.LVL675:
+.L758:
+.LBE613:
+.LBE635:
+	.loc 1 807 0
+	movq	%rbx, %rdi
+	call	tmr_run
+.LVL676:
+	.loc 1 809 0
+	movl	got_usr1(%rip), %eax
+	testl	%eax, %eax
+	je	.L366
+	.loc 1 809 0 is_stmt 0 discriminator 1
+	movl	terminate(%rip), %ecx
+	testl	%ecx, %ecx
+	jne	.L366
+	.loc 1 812 0 is_stmt 1
+	movq	hs(%rip), %rax
+	.loc 1 811 0
+	movl	$1, terminate(%rip)
+	.loc 1 812 0
+	testq	%rax, %rax
+	je	.L366
+	.loc 1 814 0
+	movl	72(%rax), %edi
+	cmpl	$-1, %edi
+	je	.L444
+	.loc 1 815 0
+	call	fdwatch_del_fd
+.LVL677:
+	movq	hs(%rip), %rax
+.L444:
+	.loc 1 816 0
+	movl	76(%rax), %edi
+	cmpl	$-1, %edi
+	je	.L445
+	.loc 1 817 0
+	call	fdwatch_del_fd
+.LVL678:
+	movq	hs(%rip), %rax
+.L445:
+	.loc 1 818 0
+	movq	%rax, %rdi
+	call	httpd_unlisten
+.LVL679:
+	jmp	.L366
+.L387:
+.LVL680:
+.LBB636:
+.LBB637:
+	.loc 1 1869 0
+	movq	8(%rbp), %rax
+	leaq	5328(%rsp), %rsi
+	movl	$4096, %edx
+	movl	704(%rax), %edi
+	call	read
+.LVL681:
+	.loc 1 1870 0
+	testl	%eax, %eax
+	js	.L767
+	.loc 1 1872 0
+	jne	.L383
+.LVL682:
+.L441:
+	.loc 1 1873 0
+	movq	%rbx, %rsi
+	movq	%rbp, %rdi
 	call	really_clear_connection
-	addl	$16, %esp
-.L270:
-	movl	-12(%ebp), %eax
-	xorl	%gs:20, %eax
-	je	.L275
-	call	__stack_chk_fail
-.L275:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE20:
-	.size	handle_linger, .-handle_linger
-	.section	.rodata
-	.align 4
-.LC121:
-	.string	"throttle sending count was negative - shouldn't happen!"
-	.text
-	.type	check_throttles, @function
-check_throttles:
-.LFB21:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%ebx
-	subl	$20, %esp
-	.cfi_offset 3, -12
-	movl	8(%ebp), %eax
-	movl	$0, 52(%eax)
-	movl	8(%ebp), %eax
-	movl	$-1, 60(%eax)
-	movl	8(%ebp), %eax
-	movl	60(%eax), %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 56(%eax)
-	movl	$0, -16(%ebp)
-	jmp	.L277
-.L287:
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	188(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	(%eax), %eax
-	subl	$8, %esp
-	pushl	%ecx
-	pushl	%eax
-	call	match
-	addl	$16, %esp
+.LVL683:
+	jmp	.L383
+.LVL684:
+.L386:
+.LBE637:
+.LBE636:
+.LBB639:
+.LBB602:
+	.loc 1 1712 0
+	movq	64(%rbp), %rdx
+	.loc 1 1709 0
+	movq	8(%rbp), %r12
+.LVL685:
+	.loc 1 1713 0
+	movl	$1000000000, %eax
+	.loc 1 1712 0
+	cmpq	$-1, %rdx
+	je	.L413
+	.loc 1 1715 0
+	leaq	3(%rdx), %rax
+	testq	%rdx, %rdx
+	cmovns	%rdx, %rax
+	sarq	$2, %rax
+.LVL686:
+.L413:
+	.loc 1 1718 0
+	movq	472(%r12), %rdx
+	testq	%rdx, %rdx
+	jne	.L414
+	.loc 1 1723 0
+	movq	136(%rbp), %rcx
+	movq	128(%rbp), %rdx
+	.loc 1 1721 0
+	movl	704(%r12), %edi
+	.loc 1 1723 0
+	subq	%rcx, %rdx
+	.loc 1 1721 0
+	cmpq	%rdx, %rax
+	cmovbe	%rax, %rdx
+	addq	712(%r12), %rcx
+	movq	%rcx, %rsi
+	call	write
+.LVL687:
+.L415:
+	.loc 1 1739 0
+	testl	%eax, %eax
+	js	.L768
+	.loc 1 1742 0
+	je	.L419
+	.loc 1 1791 0
+	movq	320(%rsp), %rdx
+	movq	%rdx, 88(%rbp)
+	.loc 1 1793 0
+	movq	472(%r12), %rdx
+	testq	%rdx, %rdx
+	je	.L689
+	.loc 1 1796 0
+	movslq	%eax, %rcx
+	cmpq	%rcx, %rdx
+	ja	.L769
+	.loc 1 1807 0
+	subl	%edx, %eax
+.LVL688:
+	.loc 1 1808 0
+	movq	$0, 472(%r12)
+.L689:
+	cltq
+.LVL689:
+.L426:
+	.loc 1 1813 0
+	movq	8(%rbp), %rdi
+	.loc 1 1812 0
+	movq	%rax, %r8
+	.loc 1 1813 0
+	movq	%rax, %rdx
+	.loc 1 1812 0
+	addq	136(%rbp), %r8
+	.loc 1 1814 0
+	movl	56(%rbp), %ecx
+	.loc 1 1813 0
+	addq	200(%rdi), %rdx
+	.loc 1 1814 0
+	testl	%ecx, %ecx
+	.loc 1 1812 0
+	movq	%r8, 136(%rbp)
+	.loc 1 1813 0
+	movq	%rdx, 200(%rdi)
+.LVL690:
+	.loc 1 1814 0
+	jle	.L432
+	subl	$1, %ecx
+	movq	throttles(%rip), %r9
+	leaq	16(%rbp), %rsi
+	leaq	20(%rbp,%rcx,4), %r10
+.LVL691:
+.L431:
+	.loc 1 1815 0
+	movslq	(%rsi), %rcx
+	addq	$4, %rsi
+	leaq	(%rcx,%rcx,2), %rcx
+	salq	$4, %rcx
+	addq	%rax, 32(%r9,%rcx)
+	.loc 1 1814 0
+	cmpq	%r10, %rsi
+	jne	.L431
+.L432:
+	.loc 1 1818 0
+	cmpq	128(%rbp), %r8
+	jge	.L693
+	.loc 1 1826 0
+	movq	112(%rbp), %rcx
+	cmpq	$100, %rcx
+	jle	.L433
+	.loc 1 1827 0
+	subq	$100, %rcx
+	movq	%rcx, 112(%rbp)
+.L433:
+	.loc 1 1830 0
+	movq	64(%rbp), %rcx
+	cmpq	$-1, %rcx
+	je	.L383
+	.loc 1 1832 0
+	movq	320(%rsp), %r14
+.LVL692:
+	.loc 1 1834 0
+	subq	80(%rbp), %r14
+.LVL693:
+	.loc 1 1835 0
+	movq	%rdx, %rax
+	.loc 1 1834 0
+	cmove	%r13, %r14
+.LVL694:
+	.loc 1 1835 0
+	cqto
+	idivq	%r14
+	cmpq	%rax, %rcx
+	jge	.L383
+	.loc 1 1838 0
+	movl	704(%r12), %edi
+	.loc 1 1837 0
+	movl	$3, 0(%rbp)
+	.loc 1 1838 0
+	call	fdwatch_del_fd
+.LVL695:
+	.loc 1 1842 0
+	movq	8(%rbp), %rax
+	movq	200(%rax), %rax
+	cqto
+	idivq	64(%rbp)
+	movl	%eax, %r12d
+.LVL696:
+	subl	%r14d, %r12d
+.LVL697:
+	.loc 1 1844 0
+	cmpq	$0, 96(%rbp)
+	je	.L436
+	.loc 1 1845 0
+	movl	$.LC130, %esi
+	movl	$3, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL698:
+.L436:
+	.loc 1 1846 0
+	testl	%r12d, %r12d
+	movl	$500, %ecx
+	jle	.L688
+	.loc 1 1848 0
+	movslq	%r12d, %r12
+	.loc 1 1846 0
+	imulq	$1000, %r12, %rcx
+	jmp	.L688
+.LVL699:
+.L768:
+	.loc 1 1739 0
+	call	__errno_location
+.LVL700:
+	movl	(%rax), %eax
+	cmpl	$4, %eax
+	je	.L383
+	.loc 1 1743 0
+	cmpl	$11, %eax
+	je	.L419
+	.loc 1 1784 0
+	cmpl	$22, %eax
+	setne	%cl
+	cmpl	$32, %eax
+	setne	%dl
+	testb	%dl, %cl
+	je	.L690
+	cmpl	$104, %eax
+	je	.L690
+	.loc 1 1785 0
+	movq	208(%r12), %rdx
+	movl	$.LC132, %esi
+	movl	$3, %edi
+	xorl	%eax, %eax
+	call	syslog
+.LVL701:
+	jmp	.L690
+.LVL702:
+.L414:
+.LBB599:
+	.loc 1 1732 0
+	movq	368(%r12), %rcx
+	.loc 1 1733 0
+	movq	%rdx, 5336(%rsp)
+	.loc 1 1736 0
+	leaq	5328(%rsp), %rsi
+	.loc 1 1734 0
+	movq	136(%rbp), %rdx
+	.loc 1 1736 0
+	movl	704(%r12), %edi
+	.loc 1 1732 0
+	movq	%rcx, 5328(%rsp)
+	.loc 1 1734 0
+	movq	%rdx, %rcx
+	addq	712(%r12), %rcx
+	movq	%rcx, 5344(%rsp)
+	.loc 1 1735 0
+	movq	128(%rbp), %rcx
+	subq	%rdx, %rcx
+	.loc 1 1736 0
+	movl	$2, %edx
+	.loc 1 1735 0
+	cmpq	%rcx, %rax
+	cmova	%rcx, %rax
+.LVL703:
+	movq	%rax, 5352(%rsp)
+	.loc 1 1736 0
+	call	writev
+.LVL704:
+	jmp	.L415
+.L769:
+.LVL705:
+.LBE599:
+.LBB600:
+	.loc 1 1800 0
+	movq	368(%r12), %rdi
+	.loc 1 1799 0
+	subl	%eax, %edx
+.LVL706:
+	.loc 1 1800 0
+	movslq	%edx, %r14
+	movq	%r14, %rdx
+	leaq	(%rdi,%rcx), %rsi
+	call	memmove
+.LVL707:
+	.loc 1 1801 0
+	movq	%r14, 472(%r12)
+.LVL708:
+	xorl	%eax, %eax
+	jmp	.L426
+.LVL709:
+.L767:
+.LBE600:
+.LBE602:
+.LBE639:
+.LBB640:
+.LBB638:
+	.loc 1 1870 0
+	call	__errno_location
+.LVL710:
+	movl	(%rax), %eax
+	cmpl	$11, %eax
+	je	.L383
+	cmpl	$4, %eax
+	jne	.L441
+	jmp	.L383
+.LVL711:
+.L398:
+.LBE638:
+.LBE640:
+.LBB641:
+.LBB614:
+	.loc 1 1648 0
+	movq	208(%r12), %r9
+	movq	httpd_err503form(%rip), %r8
+	movl	$.LC26, %ecx
+	movq	httpd_err503title(%rip), %rdx
+	movl	$503, %esi
+	jmp	.L694
+.LVL712:
+.L760:
+.LBB611:
+	.loc 1 1678 0
+	movl	56(%rbp), %eax
 	testl	%eax, %eax
-	je	.L278
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	4(%eax), %eax
-	addl	%eax, %eax
-	cmpl	%eax, %ecx
-	jle	.L279
-	movl	$0, %eax
-	jmp	.L280
-.L279:
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	8(%eax), %eax
-	cmpl	%eax, %ecx
-	jge	.L281
-	movl	$0, %eax
-	jmp	.L280
-.L281:
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %eax
-	testl	%eax, %eax
-	jns	.L282
-	subl	$8, %esp
-	pushl	$.LC121
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	$0, 20(%eax)
-.L282:
-	movl	8(%ebp), %eax
-	movl	52(%eax), %eax
-	leal	1(%eax), %ecx
-	movl	8(%ebp), %edx
-	movl	%ecx, 52(%edx)
-	movl	8(%ebp), %edx
-	movl	-16(%ebp), %ecx
-	movl	%ecx, 12(%edx,%eax,4)
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %edx
-	addl	$1, %edx
-	movl	%edx, 20(%eax)
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	4(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	20(%eax), %ebx
-	movl	%ecx, %eax
-	cltd
-	idivl	%ebx
-	movl	%eax, -12(%ebp)
-	movl	8(%ebp), %eax
-	movl	56(%eax), %eax
-	cmpl	$-1, %eax
-	jne	.L283
-	movl	8(%ebp), %eax
-	movl	-12(%ebp), %edx
-	movl	%edx, 56(%eax)
-	jmp	.L284
-.L283:
-	movl	8(%ebp), %eax
-	movl	56(%eax), %edx
-	movl	-12(%ebp), %eax
-	cmpl	%eax, %edx
-	cmovg	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 56(%eax)
-.L284:
-	movl	throttles, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	8(%eax), %eax
-	movl	%eax, -12(%ebp)
-	movl	8(%ebp), %eax
-	movl	60(%eax), %eax
-	cmpl	$-1, %eax
-	jne	.L285
-	movl	8(%ebp), %eax
-	movl	-12(%ebp), %edx
-	movl	%edx, 60(%eax)
-	jmp	.L278
-.L285:
-	movl	8(%ebp), %eax
-	movl	60(%eax), %edx
-	movl	-12(%ebp), %eax
-	cmpl	%eax, %edx
-	cmovl	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 60(%eax)
-.L278:
-	addl	$1, -16(%ebp)
-.L277:
-	movl	numthrottles, %eax
-	cmpl	%eax, -16(%ebp)
-	jge	.L286
-	movl	8(%ebp), %eax
-	movl	52(%eax), %eax
-	cmpl	$9, %eax
-	jle	.L287
-.L286:
-	movl	$1, %eax
-.L280:
-	movl	-4(%ebp), %ebx
-	leave
-	.cfi_restore 5
-	.cfi_restore 3
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE21:
-	.size	check_throttles, .-check_throttles
-	.type	clear_throttles, @function
-clear_throttles:
-.LFB22:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$16, %esp
-	movl	$0, -4(%ebp)
-	jmp	.L289
-.L290:
-	movl	throttles, %ecx
-	movl	8(%ebp), %eax
-	movl	-4(%ebp), %edx
-	movl	12(%eax,%edx,4), %eax
-	movl	%eax, %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %edx
-	subl	$1, %edx
-	movl	%edx, 20(%eax)
-	addl	$1, -4(%ebp)
-.L289:
-	movl	8(%ebp), %eax
-	movl	52(%eax), %eax
-	cmpl	-4(%ebp), %eax
-	jg	.L290
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
+	jle	.L770
+	subl	$1, %eax
+	movq	throttles(%rip), %rsi
+	.loc 1 1679 0
+	movq	200(%r12), %rcx
+	leaq	16(%rbp), %rdx
+	leaq	20(%rbp,%rax,4), %rdi
+.LVL713:
+.L410:
+	movslq	(%rdx), %rax
+	addq	$4, %rdx
+	leaq	(%rax,%rax,2), %rax
+	salq	$4, %rax
+	addq	%rcx, 32(%rsi,%rax)
+	.loc 1 1678 0
+	cmpq	%rdi, %rdx
+	jne	.L410
+.L411:
+	.loc 1 1680 0
+	movq	%rcx, 136(%rbp)
+.LVL714:
+	jmp	.L692
+.LVL715:
+.L405:
+.LBE611:
+	.loc 1 1668 0
+	movq	192(%r12), %rax
+	.loc 1 1669 0
+	movl	$0, %edx
+	testq	%rax, %rax
+	cmovs	%rdx, %rax
+	movq	%rax, 128(%rbp)
+	jmp	.L406
+.LVL716:
+.L770:
+	movq	200(%r12), %rcx
+	jmp	.L411
+.LBE614:
+.LBE641:
 	.cfi_endproc
-.LFE22:
-	.size	clear_throttles, .-clear_throttles
-	.section	.rodata
-	.align 4
-.LC122:
-	.string	"throttle #%d '%.80s' rate %ld greatly exceeding limit %ld; %d sending"
-	.align 4
-.LC123:
-	.string	"throttle #%d '%.80s' rate %ld exceeding limit %ld; %d sending"
+.LFE47:
+	.size	main, .-main
+	.section	.text.unlikely
+.LCOLDE133:
+	.section	.text.startup
+.LHOTE133:
+	.local	watchdog_flag
+	.comm	watchdog_flag,4,4
+	.local	got_usr1
+	.comm	got_usr1,4,4
+	.local	got_hup
+	.comm	got_hup,4,4
+	.comm	stats_simultaneous,4,4
+	.comm	stats_bytes,8,8
+	.comm	stats_connections,8,8
+	.comm	stats_time,8,8
+	.comm	start_time,8,8
+	.globl	terminate
+	.bss
 	.align 4
-.LC124:
-	.string	"throttle #%d '%.80s' rate %ld lower than minimum %ld; %d sending"
-	.text
-	.type	update_throttles, @function
-update_throttles:
-.LFB23:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%edi
-	pushl	%esi
-	pushl	%ebx
-	subl	$44, %esp
-	.cfi_offset 7, -12
-	.cfi_offset 6, -16
-	.cfi_offset 3, -20
-	movl	$0, -44(%ebp)
-	jmp	.L292
-.L296:
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	leal	(%ecx,%eax), %ebx
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %eax
-	leal	(%eax,%eax), %esi
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	16(%eax), %eax
-	movl	%eax, %edx
-	shrl	$31, %edx
-	addl	%edx, %eax
-	sarl	%eax
-	leal	(%esi,%eax), %ecx
-	movl	$1431655766, %edx
-	movl	%ecx, %eax
-	imull	%edx
-	movl	%ecx, %eax
-	sarl	$31, %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, 12(%ebx)
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	$0, 16(%eax)
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	4(%eax), %eax
-	cmpl	%eax, %ecx
-	jle	.L293
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %eax
-	testl	%eax, %eax
-	je	.L293
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	4(%eax), %eax
-	addl	%eax, %eax
-	cmpl	%eax, %ecx
-	jle	.L294
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %esi
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	4(%eax), %ebx
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %edi
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%edi, %eax
-	movl	(%eax), %eax
-	subl	$4, %esp
-	pushl	%esi
-	pushl	%ebx
-	pushl	%ecx
-	pushl	%eax
-	pushl	-44(%ebp)
-	pushl	$.LC122
-	pushl	$5
-	call	syslog
-	addl	$32, %esp
-	jmp	.L293
-.L294:
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %esi
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	4(%eax), %ebx
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %edi
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%edi, %eax
-	movl	(%eax), %eax
-	subl	$4, %esp
-	pushl	%esi
-	pushl	%ebx
-	pushl	%ecx
-	pushl	%eax
-	pushl	-44(%ebp)
-	pushl	$.LC123
-	pushl	$6
-	call	syslog
-	addl	$32, %esp
-.L293:
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	8(%eax), %eax
-	cmpl	%eax, %ecx
-	jge	.L295
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %eax
-	testl	%eax, %eax
-	je	.L295
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	20(%eax), %esi
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	8(%eax), %ebx
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	12(%eax), %ecx
-	movl	throttles, %edi
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%edi, %eax
-	movl	(%eax), %eax
-	subl	$4, %esp
-	pushl	%esi
-	pushl	%ebx
-	pushl	%ecx
-	pushl	%eax
-	pushl	-44(%ebp)
-	pushl	$.LC124
-	pushl	$5
-	call	syslog
-	addl	$32, %esp
-.L295:
-	addl	$1, -44(%ebp)
-.L292:
-	movl	numthrottles, %eax
-	cmpl	%eax, -44(%ebp)
-	jl	.L296
-	movl	$0, -36(%ebp)
-	jmp	.L297
-.L304:
-	movl	connects, %ecx
-	movl	-36(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	%eax, -32(%ebp)
-	movl	-32(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$2, %eax
-	je	.L298
-	movl	-32(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$3, %eax
-	jne	.L299
-.L298:
-	movl	-32(%ebp), %eax
-	movl	$-1, 56(%eax)
-	movl	$0, -40(%ebp)
-	jmp	.L300
-.L303:
-	movl	-32(%ebp), %eax
-	movl	-40(%ebp), %edx
-	movl	12(%eax,%edx,4), %eax
-	movl	%eax, -44(%ebp)
-	movl	throttles, %ecx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ecx, %eax
-	movl	4(%eax), %ecx
-	movl	throttles, %ebx
-	movl	-44(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$3, %eax
-	addl	%ebx, %eax
-	movl	20(%eax), %edi
-	movl	%ecx, %eax
-	cltd
-	idivl	%edi
-	movl	%eax, -28(%ebp)
-	movl	-32(%ebp), %eax
-	movl	56(%eax), %eax
-	cmpl	$-1, %eax
-	jne	.L301
-	movl	-32(%ebp), %eax
-	movl	-28(%ebp), %edx
-	movl	%edx, 56(%eax)
-	jmp	.L302
-.L301:
-	movl	-32(%ebp), %eax
-	movl	56(%eax), %edx
-	movl	-28(%ebp), %eax
-	cmpl	%eax, %edx
-	cmovg	%eax, %edx
-	movl	-32(%ebp), %eax
-	movl	%edx, 56(%eax)
-.L302:
-	addl	$1, -40(%ebp)
-.L300:
-	movl	-32(%ebp), %eax
-	movl	52(%eax), %eax
-	cmpl	-40(%ebp), %eax
-	jg	.L303
-.L299:
-	addl	$1, -36(%ebp)
-.L297:
-	movl	max_connects, %eax
-	cmpl	%eax, -36(%ebp)
-	jl	.L304
-	leal	-12(%ebp), %esp
-	popl	%ebx
-	.cfi_restore 3
-	popl	%esi
-	.cfi_restore 6
-	popl	%edi
-	.cfi_restore 7
-	popl	%ebp
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE23:
-	.size	update_throttles, .-update_throttles
-	.type	finish_connection, @function
-finish_connection:
-.LFB24:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	httpd_write_response
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	clear_connection
-	addl	$16, %esp
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE24:
-	.size	finish_connection, .-finish_connection
-	.section	.rodata
-	.align 4
-.LC125:
-	.string	"replacing non-null linger_timer!"
-	.align 4
-.LC126:
-	.string	"tmr_create(linger_clear_connection) failed"
-	.text
-	.type	clear_connection, @function
-clear_connection:
-.LFB25:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	movl	8(%ebp), %eax
-	movl	72(%eax), %eax
-	testl	%eax, %eax
-	je	.L307
-	movl	8(%ebp), %eax
-	movl	72(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	tmr_cancel
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	$0, 72(%eax)
-.L307:
-	movl	8(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$4, %eax
-	jne	.L308
-	movl	8(%ebp), %eax
-	movl	76(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	tmr_cancel
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	$0, 76(%eax)
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	$0, 356(%eax)
-.L308:
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	356(%eax), %eax
-	testl	%eax, %eax
-	je	.L309
-	movl	8(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$3, %eax
-	je	.L310
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-.L310:
-	movl	8(%ebp), %eax
-	movl	$4, (%eax)
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$8, %esp
-	pushl	$1
-	pushl	%eax
-	call	shutdown
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	$0
-	pushl	8(%ebp)
-	pushl	%eax
-	call	fdwatch_add_fd
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	%eax, -12(%ebp)
-	movl	8(%ebp), %eax
-	movl	76(%eax), %eax
-	testl	%eax, %eax
-	je	.L311
-	subl	$8, %esp
-	pushl	$.LC125
-	pushl	$3
-	call	syslog
-	addl	$16, %esp
-.L311:
-	subl	$12, %esp
-	pushl	$0
-	pushl	$500
-	pushl	-12(%ebp)
-	pushl	$linger_clear_connection
-	pushl	12(%ebp)
-	call	tmr_create
-	addl	$32, %esp
-	movl	%eax, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 76(%eax)
-	movl	8(%ebp), %eax
-	movl	76(%eax), %eax
-	testl	%eax, %eax
-	jne	.L306
-	subl	$8, %esp
-	pushl	$.LC126
-	pushl	$2
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	$1
-	call	exit
-.L309:
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	really_clear_connection
-	addl	$16, %esp
-.L306:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE25:
-	.size	clear_connection, .-clear_connection
-	.type	really_clear_connection, @function
-really_clear_connection:
-.LFB26:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	168(%eax), %edx
-	movl	stats_bytes, %eax
-	addl	%edx, %eax
-	movl	%eax, stats_bytes
-	movl	8(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$3, %eax
-	je	.L314
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	fdwatch_del_fd
-	addl	$16, %esp
-.L314:
-	movl	8(%ebp), %eax
-	movl	8(%eax), %eax
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	%eax
-	call	httpd_close_conn
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	8(%ebp)
-	call	clear_throttles
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	76(%eax), %eax
-	testl	%eax, %eax
-	je	.L315
-	movl	8(%ebp), %eax
-	movl	76(%eax), %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	tmr_cancel
-	addl	$16, %esp
-	movl	8(%ebp), %eax
-	movl	$0, 76(%eax)
-.L315:
-	movl	8(%ebp), %eax
-	movl	$0, (%eax)
-	movl	first_free_connect, %edx
-	movl	8(%ebp), %eax
-	movl	%edx, 4(%eax)
-	movl	8(%ebp), %eax
-	movl	connects, %edx
-	subl	%edx, %eax
-	sarl	$5, %eax
-	imull	$-1431655765, %eax, %eax
-	movl	%eax, first_free_connect
-	movl	num_connects, %eax
-	subl	$1, %eax
-	movl	%eax, num_connects
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE26:
-	.size	really_clear_connection, .-really_clear_connection
-	.section	.rodata
-	.align 4
-.LC127:
-	.string	"%.80s connection timed out reading"
-	.align 4
-.LC128:
-	.string	"%.80s connection timed out sending"
-	.text
-	.type	idle, @function
-idle:
-.LFB27:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	movl	$0, -16(%ebp)
-	jmp	.L317
-.L323:
-	movl	connects, %ecx
-	movl	-16(%ebp), %edx
-	movl	%edx, %eax
-	addl	%eax, %eax
-	addl	%edx, %eax
-	sall	$5, %eax
-	addl	%ecx, %eax
-	movl	%eax, -12(%ebp)
-	movl	-12(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$1, %eax
-	je	.L319
-	cmpl	$1, %eax
-	jl	.L318
-	cmpl	$3, %eax
-	jg	.L318
-	jmp	.L324
-.L319:
-	movl	12(%ebp), %eax
-	movl	(%eax), %edx
-	movl	-12(%ebp), %eax
-	movl	68(%eax), %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	cmpl	$59, %eax
-	jle	.L321
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	addl	$8, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	httpd_ntoa
-	addl	$16, %esp
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC127
-	pushl	$6
-	call	syslog
-	addl	$16, %esp
-	movl	httpd_err408form, %ecx
-	movl	httpd_err408title, %edx
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	subl	$8, %esp
-	pushl	$.LC45
-	pushl	%ecx
-	pushl	$.LC45
-	pushl	%edx
-	pushl	$408
-	pushl	%eax
-	call	httpd_send_err
-	addl	$32, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	-12(%ebp)
-	call	finish_connection
-	addl	$16, %esp
-	jmp	.L318
-.L321:
-	jmp	.L318
-.L324:
-	movl	12(%ebp), %eax
-	movl	(%eax), %edx
-	movl	-12(%ebp), %eax
-	movl	68(%eax), %eax
-	subl	%eax, %edx
-	movl	%edx, %eax
-	cmpl	$299, %eax
-	jle	.L322
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	addl	$8, %eax
-	subl	$12, %esp
-	pushl	%eax
-	call	httpd_ntoa
-	addl	$16, %esp
-	subl	$4, %esp
-	pushl	%eax
-	pushl	$.LC128
-	pushl	$6
-	call	syslog
-	addl	$16, %esp
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	-12(%ebp)
-	call	clear_connection
-	addl	$16, %esp
-	jmp	.L325
-.L322:
-.L325:
-	nop
-.L318:
-	addl	$1, -16(%ebp)
-.L317:
-	movl	max_connects, %eax
-	cmpl	%eax, -16(%ebp)
-	jl	.L323
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE27:
-	.size	idle, .-idle
-	.type	wakeup_connection, @function
-wakeup_connection:
-.LFB28:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	movl	8(%ebp), %eax
-	movl	%eax, -12(%ebp)
-	movl	-12(%ebp), %eax
-	movl	$0, 72(%eax)
-	movl	-12(%ebp), %eax
-	movl	(%eax), %eax
-	cmpl	$3, %eax
-	jne	.L326
-	movl	-12(%ebp), %eax
-	movl	$2, (%eax)
-	movl	-12(%ebp), %eax
-	movl	8(%eax), %eax
-	movl	448(%eax), %eax
-	subl	$4, %esp
-	pushl	$1
-	pushl	-12(%ebp)
-	pushl	%eax
-	call	fdwatch_add_fd
-	addl	$16, %esp
-.L326:
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE28:
-	.size	wakeup_connection, .-wakeup_connection
-	.type	linger_clear_connection, @function
-linger_clear_connection:
-.LFB29:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$24, %esp
-	movl	8(%ebp), %eax
-	movl	%eax, -12(%ebp)
-	movl	-12(%ebp), %eax
-	movl	$0, 76(%eax)
-	subl	$8, %esp
-	pushl	12(%ebp)
-	pushl	-12(%ebp)
-	call	really_clear_connection
-	addl	$16, %esp
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE29:
-	.size	linger_clear_connection, .-linger_clear_connection
-	.type	occasional, @function
-occasional:
-.LFB30:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	subl	$12, %esp
-	pushl	12(%ebp)
-	call	mmc_cleanup
-	addl	$16, %esp
-	call	tmr_cleanup
-	movl	$1, watchdog_flag
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE30:
-	.size	occasional, .-occasional
-	.type	show_stats, @function
-show_stats:
-.LFB31:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$8, %esp
-	subl	$12, %esp
-	pushl	12(%ebp)
-	call	logstats
-	addl	$16, %esp
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE31:
-	.size	show_stats, .-show_stats
-	.section	.rodata
-	.align 4
-.LC129:
-	.string	"up %ld seconds, stats for %ld seconds:"
-	.text
-	.type	logstats, @function
-logstats:
-.LFB32:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	subl	$40, %esp
-	cmpl	$0, 8(%ebp)
-	jne	.L332
-	subl	$8, %esp
-	pushl	$0
-	leal	-16(%ebp), %eax
-	pushl	%eax
-	call	gettimeofday
-	addl	$16, %esp
-	leal	-16(%ebp), %eax
-	movl	%eax, 8(%ebp)
-.L332:
-	movl	8(%ebp), %eax
-	movl	(%eax), %eax
-	movl	%eax, -24(%ebp)
-	movl	start_time, %eax
-	movl	-24(%ebp), %edx
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, -20(%ebp)
-	movl	stats_time, %eax
-	movl	-24(%ebp), %edx
-	subl	%eax, %edx
-	movl	%edx, %eax
-	movl	%eax, -28(%ebp)
-	cmpl	$0, -28(%ebp)
-	jne	.L333
-	movl	$1, -28(%ebp)
-.L333:
-	movl	-24(%ebp), %eax
-	movl	%eax, stats_time
-	pushl	-28(%ebp)
-	pushl	-20(%ebp)
-	pushl	$.LC129
-	pushl	$6
-	call	syslog
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-28(%ebp)
-	call	thttpd_logstats
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-28(%ebp)
-	call	httpd_logstats
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-28(%ebp)
-	call	mmc_logstats
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-28(%ebp)
-	call	fdwatch_logstats
-	addl	$16, %esp
-	subl	$12, %esp
-	pushl	-28(%ebp)
-	call	tmr_logstats
-	addl	$16, %esp
-	leave
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE32:
-	.size	logstats, .-logstats
-	.section	.rodata
+	.type	terminate, @object
+	.size	terminate, 4
+terminate:
+	.zero	4
+	.local	hs
+	.comm	hs,8,8
+	.local	httpd_conn_count
+	.comm	httpd_conn_count,4,4
+	.local	first_free_connect
+	.comm	first_free_connect,4,4
+	.local	max_connects
+	.comm	max_connects,4,4
+	.local	num_connects
+	.comm	num_connects,4,4
+	.local	connects
+	.comm	connects,8,8
+	.local	maxthrottles
+	.comm	maxthrottles,4,4
+	.local	numthrottles
+	.comm	numthrottles,4,4
+	.local	throttles
+	.comm	throttles,8,8
+	.local	max_age
+	.comm	max_age,4,4
+	.local	p3p
+	.comm	p3p,8,8
+	.local	charset
+	.comm	charset,8,8
+	.local	user
+	.comm	user,8,8
+	.local	pidfile
+	.comm	pidfile,8,8
+	.local	hostname
+	.comm	hostname,8,8
+	.local	throttlefile
+	.comm	throttlefile,8,8
+	.local	logfile
+	.comm	logfile,8,8
+	.local	local_pattern
+	.comm	local_pattern,8,8
+	.local	no_empty_referers
+	.comm	no_empty_referers,4,4
+	.local	url_pattern
+	.comm	url_pattern,8,8
+	.local	cgi_limit
+	.comm	cgi_limit,4,4
+	.local	cgi_pattern
+	.comm	cgi_pattern,8,8
+	.local	do_global_passwd
+	.comm	do_global_passwd,4,4
+	.local	do_vhost
+	.comm	do_vhost,4,4
+	.local	no_symlink_check
+	.comm	no_symlink_check,4,4
+	.local	no_log
+	.comm	no_log,4,4
+	.local	do_chroot
+	.comm	do_chroot,4,4
+	.local	data_dir
+	.comm	data_dir,8,8
+	.local	dir
+	.comm	dir,8,8
+	.local	port
+	.comm	port,2,2
+	.local	debug
+	.comm	debug,4,4
+	.local	argv0
+	.comm	argv0,8,8
+	.section	.rodata.cst4,"aM",@progbits,4
 	.align 4
-.LC130:
-	.string	"  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated"
+.LC8:
+	.long	1065353216
 	.text
-	.type	thttpd_logstats, @function
-thttpd_logstats:
-.LFB33:
-	.cfi_startproc
-	pushl	%ebp
-	.cfi_def_cfa_offset 8
-	.cfi_offset 5, -8
-	movl	%esp, %ebp
-	.cfi_def_cfa_register 5
-	pushl	%esi
-	pushl	%ebx
-	subl	$16, %esp
-	.cfi_offset 6, -12
-	.cfi_offset 3, -16
-	cmpl	$0, 8(%ebp)
-	jle	.L335
-	movl	httpd_conn_count, %esi
-	movl	stats_bytes, %eax
-	movl	%eax, -12(%ebp)
-	fildl	-12(%ebp)
-	fildl	8(%ebp)
-	fdivrp	%st, %st(1)
-	movl	stats_bytes, %eax
-	cltd
-	movl	stats_simultaneous, %ebx
-	movl	stats_connections, %ecx
-	movl	%ecx, -12(%ebp)
-	fildl	-12(%ebp)
-	fildl	8(%ebp)
-	fdivrp	%st, %st(1)
-	fxch	%st(1)
-	movl	stats_connections, %ecx
-	subl	$4, %esp
-	pushl	%esi
-	leal	-8(%esp), %esp
-	fstpl	(%esp)
-	pushl	%edx
-	pushl	%eax
-	pushl	%ebx
-	leal	-8(%esp), %esp
-	fstpl	(%esp)
-	pushl	%ecx
-	pushl	$.LC130
-	pushl	$6
-	call	syslog
-	addl	$48, %esp
-.L335:
-	movl	$0, stats_connections
-	movl	$0, stats_bytes
-	movl	$0, stats_simultaneous
-	leal	-8(%ebp), %esp
-	popl	%ebx
-	.cfi_restore 3
-	popl	%esi
-	.cfi_restore 6
-	popl	%ebp
-	.cfi_restore 5
-	.cfi_def_cfa 4, 4
-	ret
-	.cfi_endproc
-.LFE33:
-	.size	thttpd_logstats, .-thttpd_logstats
+.Letext0:
+	.section	.text.unlikely
+.Letext_cold0:
+	.file 3 "/usr/include/bits/types.h"
+	.file 4 "/usr/include/sys/types.h"
+	.file 5 "/usr/include/time.h"
+	.file 6 "/usr/local/cs/gcc-4.9.2/lib/gcc/x86_64-unknown-linux-gnu/4.9.2/include/stddef.h"
+	.file 7 "/usr/include/bits/time.h"
+	.file 8 "/usr/include/bits/stat.h"
+	.file 9 "/usr/include/signal.h"
+	.file 10 "/usr/include/bits/uio.h"
+	.file 11 "/usr/include/pwd.h"
+	.file 12 "/usr/include/stdio.h"
+	.file 13 "/usr/include/libio.h"
+	.file 14 "/usr/include/unistd.h"
+	.file 15 "/usr/include/sys/time.h"
+	.file 16 "/usr/include/bits/sockaddr.h"
+	.file 17 "/usr/include/bits/socket.h"
+	.file 18 "/usr/include/stdint.h"
+	.file 19 "/usr/include/netinet/in.h"
+	.file 20 "/usr/include/netdb.h"
+	.file 21 "./libhttpd.h"
+	.file 22 "./timers.h"
+	.file 23 "/usr/include/bits/string2.h"
+	.file 24 "./fdwatch.h"
+	.file 25 "/usr/include/sys/syslog.h"
+	.file 26 "./mmc.h"
+	.file 27 "/usr/include/sys/wait.h"
+	.file 28 "/usr/include/sys/socket.h"
+	.file 29 "<built-in>"
+	.file 30 "/usr/include/string.h"
+	.file 31 "/usr/include/bits/errno.h"
+	.file 32 "/usr/include/sys/uio.h"
+	.file 33 "./match.h"
+	.file 34 "/usr/include/fcntl.h"
+	.file 35 "/usr/include/grp.h"
+	.section	.debug_info,"",@progbits
+.Ldebug_info0:
+	.long	0x6400
+	.value	0x4
+	.long	.Ldebug_abbrev0
+	.byte	0x8
+	.uleb128 0x1
+	.long	.LASF500
+	.byte	0x1
+	.long	.LASF501
+	.long	.LASF502
+	.long	.Ldebug_ranges0+0x540
+	.quad	0
+	.long	.Ldebug_line0
+	.uleb128 0x2
+	.byte	0x1
+	.byte	0x8
+	.long	.LASF0
+	.uleb128 0x2
+	.byte	0x2
+	.byte	0x7
+	.long	.LASF1
+	.uleb128 0x2
+	.byte	0x4
+	.byte	0x7
+	.long	.LASF2
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x7
+	.long	.LASF3
+	.uleb128 0x2
+	.byte	0x1
+	.byte	0x6
+	.long	.LASF4
+	.uleb128 0x2
+	.byte	0x2
+	.byte	0x5
+	.long	.LASF5
+	.uleb128 0x3
+	.byte	0x4
+	.byte	0x5
+	.string	"int"
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x5
+	.long	.LASF6
+	.uleb128 0x4
+	.long	.LASF7
+	.byte	0x3
+	.byte	0x86
+	.long	0x3e
+	.uleb128 0x4
+	.long	.LASF8
+	.byte	0x3
+	.byte	0x87
+	.long	0x37
+	.uleb128 0x4
+	.long	.LASF9
+	.byte	0x3
+	.byte	0x88
+	.long	0x37
+	.uleb128 0x4
+	.long	.LASF10
+	.byte	0x3
+	.byte	0x89
+	.long	0x3e
+	.uleb128 0x4
+	.long	.LASF11
+	.byte	0x3
+	.byte	0x8b
+	.long	0x37
+	.uleb128 0x4
+	.long	.LASF12
+	.byte	0x3
+	.byte	0x8c
+	.long	0x3e
+	.uleb128 0x4
+	.long	.LASF13
+	.byte	0x3
+	.byte	0x8d
+	.long	0x5a
+	.uleb128 0x4
+	.long	.LASF14
+	.byte	0x3
+	.byte	0x8e
+	.long	0x5a
+	.uleb128 0x4
+	.long	.LASF15
+	.byte	0x3
+	.byte	0x8f
+	.long	0x53
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x7
+	.long	.LASF16
+	.uleb128 0x4
+	.long	.LASF17
+	.byte	0x3
+	.byte	0x95
+	.long	0x5a
+	.uleb128 0x4
+	.long	.LASF18
+	.byte	0x3
+	.byte	0x97
+	.long	0x5a
+	.uleb128 0x5
+	.byte	0x8
+	.uleb128 0x4
+	.long	.LASF19
+	.byte	0x3
+	.byte	0xa4
+	.long	0x5a
+	.uleb128 0x4
+	.long	.LASF20
+	.byte	0x3
+	.byte	0xa9
+	.long	0x5a
+	.uleb128 0x4
+	.long	.LASF21
+	.byte	0x3
+	.byte	0xb4
+	.long	0x5a
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x10a
+	.uleb128 0x2
+	.byte	0x1
+	.byte	0x6
+	.long	.LASF22
+	.uleb128 0x4
+	.long	.LASF23
+	.byte	0x3
+	.byte	0xc0
+	.long	0x37
+	.uleb128 0x4
+	.long	.LASF24
+	.byte	0x4
+	.byte	0x42
+	.long	0x77
+	.uleb128 0x4
+	.long	.LASF25
+	.byte	0x4
+	.byte	0x51
+	.long	0x6c
+	.uleb128 0x4
+	.long	.LASF26
+	.byte	0x4
+	.byte	0x57
+	.long	0xa3
+	.uleb128 0x4
+	.long	.LASF27
+	.byte	0x4
+	.byte	0x63
+	.long	0xb9
+	.uleb128 0x4
+	.long	.LASF28
+	.byte	0x4
+	.byte	0x6e
+	.long	0xf9
+	.uleb128 0x4
+	.long	.LASF29
+	.byte	0x5
+	.byte	0x4c
+	.long	0xcb
+	.uleb128 0x4
+	.long	.LASF30
+	.byte	0x6
+	.byte	0xd4
+	.long	0x3e
+	.uleb128 0x4
+	.long	.LASF31
+	.byte	0x4
+	.byte	0xc6
+	.long	0x5a
+	.uleb128 0x7
+	.long	.LASF34
+	.byte	0x10
+	.byte	0x5
+	.byte	0x78
+	.long	0x199
+	.uleb128 0x8
+	.long	.LASF32
+	.byte	0x5
+	.byte	0x7a
+	.long	0xcb
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF33
+	.byte	0x5
+	.byte	0x7b
+	.long	0x5a
+	.byte	0x8
+	.byte	0
+	.uleb128 0x7
+	.long	.LASF35
+	.byte	0x10
+	.byte	0x7
+	.byte	0x4b
+	.long	0x1be
+	.uleb128 0x8
+	.long	.LASF32
+	.byte	0x7
+	.byte	0x4d
+	.long	0xcb
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF36
+	.byte	0x7
+	.byte	0x4e
+	.long	0xd6
+	.byte	0x8
+	.byte	0
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x7
+	.long	.LASF37
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x5
+	.long	.LASF38
+	.uleb128 0x9
+	.long	0x53
+	.uleb128 0x7
+	.long	.LASF39
+	.byte	0x90
+	.byte	0x8
+	.byte	0x2e
+	.long	0x292
+	.uleb128 0x8
+	.long	.LASF40
+	.byte	0x8
+	.byte	0x30
+	.long	0x61
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF41
+	.byte	0x8
+	.byte	0x35
+	.long	0x82
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF42
+	.byte	0x8
+	.byte	0x3d
+	.long	0x98
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF43
+	.byte	0x8
+	.byte	0x3e
+	.long	0x8d
+	.byte	0x18
+	.uleb128 0x8
+	.long	.LASF44
+	.byte	0x8
+	.byte	0x40
+	.long	0x6c
+	.byte	0x1c
+	.uleb128 0x8
+	.long	.LASF45
+	.byte	0x8
+	.byte	0x41
+	.long	0x77
+	.byte	0x20
+	.uleb128 0x8
+	.long	.LASF46
+	.byte	0x8
+	.byte	0x43
+	.long	0x53
+	.byte	0x24
+	.uleb128 0x8
+	.long	.LASF47
+	.byte	0x8
+	.byte	0x45
+	.long	0x61
+	.byte	0x28
+	.uleb128 0x8
+	.long	.LASF48
+	.byte	0x8
+	.byte	0x4a
+	.long	0xa3
+	.byte	0x30
+	.uleb128 0x8
+	.long	.LASF49
+	.byte	0x8
+	.byte	0x4e
+	.long	0xe3
+	.byte	0x38
+	.uleb128 0x8
+	.long	.LASF50
+	.byte	0x8
+	.byte	0x50
+	.long	0xee
+	.byte	0x40
+	.uleb128 0x8
+	.long	.LASF51
+	.byte	0x8
+	.byte	0x5b
+	.long	0x174
+	.byte	0x48
+	.uleb128 0x8
+	.long	.LASF52
+	.byte	0x8
+	.byte	0x5c
+	.long	0x174
+	.byte	0x58
+	.uleb128 0x8
+	.long	.LASF53
+	.byte	0x8
+	.byte	0x5d
+	.long	0x174
+	.byte	0x68
+	.uleb128 0x8
+	.long	.LASF54
+	.byte	0x8
+	.byte	0x6a
+	.long	0x292
+	.byte	0x78
+	.byte	0
+	.uleb128 0xa
+	.long	0x5a
+	.long	0x2a2
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x2
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF55
+	.byte	0x9
+	.byte	0x54
+	.long	0x2ad
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x2b3
+	.uleb128 0xc
+	.long	0x2be
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x53
+	.uleb128 0x7
+	.long	.LASF56
+	.byte	0x10
+	.byte	0xa
+	.byte	0x2c
+	.long	0x2e9
+	.uleb128 0x8
+	.long	.LASF57
+	.byte	0xa
+	.byte	0x2e
+	.long	0xe1
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF58
+	.byte	0xa
+	.byte	0x2f
+	.long	0x15e
+	.byte	0x8
+	.byte	0
+	.uleb128 0x7
+	.long	.LASF59
+	.byte	0x30
+	.byte	0xb
+	.byte	0x32
+	.long	0x34a
+	.uleb128 0x8
+	.long	.LASF60
+	.byte	0xb
+	.byte	0x34
+	.long	0x104
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF61
+	.byte	0xb
+	.byte	0x35
+	.long	0x104
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF62
+	.byte	0xb
+	.byte	0x36
+	.long	0x6c
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF63
+	.byte	0xb
+	.byte	0x37
+	.long	0x77
+	.byte	0x14
+	.uleb128 0x8
+	.long	.LASF64
+	.byte	0xb
+	.byte	0x38
+	.long	0x104
+	.byte	0x18
+	.uleb128 0x8
+	.long	.LASF65
+	.byte	0xb
+	.byte	0x39
+	.long	0x104
+	.byte	0x20
+	.uleb128 0x8
+	.long	.LASF66
+	.byte	0xb
+	.byte	0x3a
+	.long	0x104
+	.byte	0x28
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF67
+	.byte	0xc
+	.byte	0x31
+	.long	0x355
+	.uleb128 0xe
+	.long	.LASF68
+	.byte	0xd8
+	.byte	0xd
+	.value	0x10f
+	.long	0x4dc
+	.uleb128 0xf
+	.long	.LASF69
+	.byte	0xd
+	.value	0x110
+	.long	0x53
+	.byte	0
+	.uleb128 0xf
+	.long	.LASF70
+	.byte	0xd
+	.value	0x115
+	.long	0x104
+	.byte	0x8
+	.uleb128 0xf
+	.long	.LASF71
+	.byte	0xd
+	.value	0x116
+	.long	0x104
+	.byte	0x10
+	.uleb128 0xf
+	.long	.LASF72
+	.byte	0xd
+	.value	0x117
+	.long	0x104
+	.byte	0x18
+	.uleb128 0xf
+	.long	.LASF73
+	.byte	0xd
+	.value	0x118
+	.long	0x104
+	.byte	0x20
+	.uleb128 0xf
+	.long	.LASF74
+	.byte	0xd
+	.value	0x119
+	.long	0x104
+	.byte	0x28
+	.uleb128 0xf
+	.long	.LASF75
+	.byte	0xd
+	.value	0x11a
+	.long	0x104
+	.byte	0x30
+	.uleb128 0xf
+	.long	.LASF76
+	.byte	0xd
+	.value	0x11b
+	.long	0x104
+	.byte	0x38
+	.uleb128 0xf
+	.long	.LASF77
+	.byte	0xd
+	.value	0x11c
+	.long	0x104
+	.byte	0x40
+	.uleb128 0xf
+	.long	.LASF78
+	.byte	0xd
+	.value	0x11e
+	.long	0x104
+	.byte	0x48
+	.uleb128 0xf
+	.long	.LASF79
+	.byte	0xd
+	.value	0x11f
+	.long	0x104
+	.byte	0x50
+	.uleb128 0xf
+	.long	.LASF80
+	.byte	0xd
+	.value	0x120
+	.long	0x104
+	.byte	0x58
+	.uleb128 0xf
+	.long	.LASF81
+	.byte	0xd
+	.value	0x122
+	.long	0x51a
+	.byte	0x60
+	.uleb128 0xf
+	.long	.LASF82
+	.byte	0xd
+	.value	0x124
+	.long	0x520
+	.byte	0x68
+	.uleb128 0xf
+	.long	.LASF83
+	.byte	0xd
+	.value	0x126
+	.long	0x53
+	.byte	0x70
+	.uleb128 0xf
+	.long	.LASF84
+	.byte	0xd
+	.value	0x12a
+	.long	0x53
+	.byte	0x74
+	.uleb128 0xf
+	.long	.LASF85
+	.byte	0xd
+	.value	0x12c
+	.long	0xa3
+	.byte	0x78
+	.uleb128 0xf
+	.long	.LASF86
+	.byte	0xd
+	.value	0x130
+	.long	0x30
+	.byte	0x80
+	.uleb128 0xf
+	.long	.LASF87
+	.byte	0xd
+	.value	0x131
+	.long	0x45
+	.byte	0x82
+	.uleb128 0xf
+	.long	.LASF88
+	.byte	0xd
+	.value	0x132
+	.long	0x526
+	.byte	0x83
+	.uleb128 0xf
+	.long	.LASF89
+	.byte	0xd
+	.value	0x136
+	.long	0x536
+	.byte	0x88
+	.uleb128 0xf
+	.long	.LASF90
+	.byte	0xd
+	.value	0x13f
+	.long	0xae
+	.byte	0x90
+	.uleb128 0xf
+	.long	.LASF91
+	.byte	0xd
+	.value	0x148
+	.long	0xe1
+	.byte	0x98
+	.uleb128 0xf
+	.long	.LASF92
+	.byte	0xd
+	.value	0x149
+	.long	0xe1
+	.byte	0xa0
+	.uleb128 0xf
+	.long	.LASF93
+	.byte	0xd
+	.value	0x14a
+	.long	0xe1
+	.byte	0xa8
+	.uleb128 0xf
+	.long	.LASF94
+	.byte	0xd
+	.value	0x14b
+	.long	0xe1
+	.byte	0xb0
+	.uleb128 0xf
+	.long	.LASF95
+	.byte	0xd
+	.value	0x14c
+	.long	0x15e
+	.byte	0xb8
+	.uleb128 0xf
+	.long	.LASF96
+	.byte	0xd
+	.value	0x14e
+	.long	0x53
+	.byte	0xc0
+	.uleb128 0xf
+	.long	.LASF97
+	.byte	0xd
+	.value	0x150
+	.long	0x53c
+	.byte	0xc4
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x104
+	.uleb128 0x10
+	.long	.LASF503
+	.byte	0xd
+	.byte	0xb4
+	.uleb128 0x7
+	.long	.LASF98
+	.byte	0x18
+	.byte	0xd
+	.byte	0xba
+	.long	0x51a
+	.uleb128 0x8
+	.long	.LASF99
+	.byte	0xd
+	.byte	0xbb
+	.long	0x51a
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF100
+	.byte	0xd
+	.byte	0xbc
+	.long	0x520
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF101
+	.byte	0xd
+	.byte	0xc0
+	.long	0x53
+	.byte	0x10
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x4e9
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x355
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x536
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x4e2
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x54c
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x13
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x552
+	.uleb128 0x11
+	.long	0x10a
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x55d
+	.uleb128 0x12
+	.uleb128 0x11
+	.long	0x53
+	.uleb128 0x13
+	.long	.LASF102
+	.byte	0xe
+	.value	0x113
+	.long	0x111
+	.uleb128 0x7
+	.long	.LASF103
+	.byte	0x8
+	.byte	0xf
+	.byte	0x39
+	.long	0x594
+	.uleb128 0x8
+	.long	.LASF104
+	.byte	0xf
+	.byte	0x3b
+	.long	0x53
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF105
+	.byte	0xf
+	.byte	0x3c
+	.long	0x53
+	.byte	0x4
+	.byte	0
+	.uleb128 0x14
+	.long	.LASF504
+	.byte	0x4
+	.byte	0x11
+	.byte	0x28
+	.long	0x5da
+	.uleb128 0x15
+	.long	.LASF106
+	.sleb128 1
+	.uleb128 0x15
+	.long	.LASF107
+	.sleb128 2
+	.uleb128 0x15
+	.long	.LASF108
+	.sleb128 3
+	.uleb128 0x15
+	.long	.LASF109
+	.sleb128 4
+	.uleb128 0x15
+	.long	.LASF110
+	.sleb128 5
+	.uleb128 0x15
+	.long	.LASF111
+	.sleb128 6
+	.uleb128 0x15
+	.long	.LASF112
+	.sleb128 10
+	.uleb128 0x15
+	.long	.LASF113
+	.sleb128 524288
+	.uleb128 0x15
+	.long	.LASF114
+	.sleb128 2048
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF115
+	.byte	0x10
+	.byte	0x1d
+	.long	0x30
+	.uleb128 0x7
+	.long	.LASF116
+	.byte	0x10
+	.byte	0x11
+	.byte	0xae
+	.long	0x60a
+	.uleb128 0x8
+	.long	.LASF117
+	.byte	0x11
+	.byte	0xb0
+	.long	0x5da
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF118
+	.byte	0x11
+	.byte	0xb1
+	.long	0x60a
+	.byte	0x2
+	.byte	0
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x61a
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0xd
+	.byte	0
+	.uleb128 0x7
+	.long	.LASF119
+	.byte	0x80
+	.byte	0x11
+	.byte	0xbb
+	.long	0x64b
+	.uleb128 0x8
+	.long	.LASF120
+	.byte	0x11
+	.byte	0xbd
+	.long	0x5da
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF121
+	.byte	0x11
+	.byte	0xbe
+	.long	0x3e
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF122
+	.byte	0x11
+	.byte	0xbf
+	.long	0x64b
+	.byte	0x10
+	.byte	0
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x65b
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x6f
+	.byte	0
+	.uleb128 0x16
+	.byte	0x4
+	.byte	0x1c
+	.byte	0x37
+	.long	0x676
+	.uleb128 0x15
+	.long	.LASF123
+	.sleb128 0
+	.uleb128 0x15
+	.long	.LASF124
+	.sleb128 1
+	.uleb128 0x15
+	.long	.LASF125
+	.sleb128 2
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF126
+	.byte	0x12
+	.byte	0x31
+	.long	0x29
+	.uleb128 0x4
+	.long	.LASF127
+	.byte	0x12
+	.byte	0x32
+	.long	0x30
+	.uleb128 0x4
+	.long	.LASF128
+	.byte	0x12
+	.byte	0x34
+	.long	0x37
+	.uleb128 0x4
+	.long	.LASF129
+	.byte	0x13
+	.byte	0x61
+	.long	0x681
+	.uleb128 0x4
+	.long	.LASF130
+	.byte	0x13
+	.byte	0x8d
+	.long	0x68c
+	.uleb128 0x7
+	.long	.LASF131
+	.byte	0x4
+	.byte	0x13
+	.byte	0x8e
+	.long	0x6c6
+	.uleb128 0x8
+	.long	.LASF132
+	.byte	0x13
+	.byte	0x90
+	.long	0x6a2
+	.byte	0
+	.byte	0
+	.uleb128 0x17
+	.byte	0x10
+	.byte	0x13
+	.byte	0xc8
+	.long	0x6f0
+	.uleb128 0x18
+	.long	.LASF133
+	.byte	0x13
+	.byte	0xca
+	.long	0x6f0
+	.uleb128 0x18
+	.long	.LASF134
+	.byte	0x13
+	.byte	0xcc
+	.long	0x700
+	.uleb128 0x18
+	.long	.LASF135
+	.byte	0x13
+	.byte	0xcd
+	.long	0x710
+	.byte	0
+	.uleb128 0xa
+	.long	0x676
+	.long	0x700
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0xf
+	.byte	0
+	.uleb128 0xa
+	.long	0x681
+	.long	0x710
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x7
+	.byte	0
+	.uleb128 0xa
+	.long	0x68c
+	.long	0x720
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x3
+	.byte	0
+	.uleb128 0x7
+	.long	.LASF136
+	.byte	0x10
+	.byte	0x13
+	.byte	0xc6
+	.long	0x739
+	.uleb128 0x8
+	.long	.LASF137
+	.byte	0x13
+	.byte	0xcf
+	.long	0x6c6
+	.byte	0
+	.byte	0
+	.uleb128 0x7
+	.long	.LASF138
+	.byte	0x10
+	.byte	0x13
+	.byte	0xe1
+	.long	0x776
+	.uleb128 0x8
+	.long	.LASF139
+	.byte	0x13
+	.byte	0xe3
+	.long	0x5da
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF140
+	.byte	0x13
+	.byte	0xe4
+	.long	0x697
+	.byte	0x2
+	.uleb128 0x8
+	.long	.LASF141
+	.byte	0x13
+	.byte	0xe5
+	.long	0x6ad
+	.byte	0x4
+	.uleb128 0x8
+	.long	.LASF142
+	.byte	0x13
+	.byte	0xe8
+	.long	0x776
+	.byte	0x8
+	.byte	0
+	.uleb128 0xa
+	.long	0x29
+	.long	0x786
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x7
+	.byte	0
+	.uleb128 0x7
+	.long	.LASF143
+	.byte	0x1c
+	.byte	0x13
+	.byte	0xef
+	.long	0x7cf
+	.uleb128 0x8
+	.long	.LASF144
+	.byte	0x13
+	.byte	0xf1
+	.long	0x5da
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF145
+	.byte	0x13
+	.byte	0xf2
+	.long	0x697
+	.byte	0x2
+	.uleb128 0x8
+	.long	.LASF146
+	.byte	0x13
+	.byte	0xf3
+	.long	0x68c
+	.byte	0x4
+	.uleb128 0x8
+	.long	.LASF147
+	.byte	0x13
+	.byte	0xf4
+	.long	0x720
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF148
+	.byte	0x13
+	.byte	0xf5
+	.long	0x68c
+	.byte	0x18
+	.byte	0
+	.uleb128 0xe
+	.long	.LASF149
+	.byte	0x30
+	.byte	0x14
+	.value	0x239
+	.long	0x845
+	.uleb128 0xf
+	.long	.LASF150
+	.byte	0x14
+	.value	0x23b
+	.long	0x53
+	.byte	0
+	.uleb128 0xf
+	.long	.LASF151
+	.byte	0x14
+	.value	0x23c
+	.long	0x53
+	.byte	0x4
+	.uleb128 0xf
+	.long	.LASF152
+	.byte	0x14
+	.value	0x23d
+	.long	0x53
+	.byte	0x8
+	.uleb128 0xf
+	.long	.LASF153
+	.byte	0x14
+	.value	0x23e
+	.long	0x53
+	.byte	0xc
+	.uleb128 0xf
+	.long	.LASF154
+	.byte	0x14
+	.value	0x23f
+	.long	0x563
+	.byte	0x10
+	.uleb128 0xf
+	.long	.LASF155
+	.byte	0x14
+	.value	0x240
+	.long	0x845
+	.byte	0x18
+	.uleb128 0xf
+	.long	.LASF156
+	.byte	0x14
+	.value	0x241
+	.long	0x104
+	.byte	0x20
+	.uleb128 0xf
+	.long	.LASF157
+	.byte	0x14
+	.value	0x242
+	.long	0x84b
+	.byte	0x28
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x5e5
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x7cf
+	.uleb128 0x17
+	.byte	0x80
+	.byte	0x15
+	.byte	0x3b
+	.long	0x885
+	.uleb128 0x19
+	.string	"sa"
+	.byte	0x15
+	.byte	0x3c
+	.long	0x5e5
+	.uleb128 0x18
+	.long	.LASF158
+	.byte	0x15
+	.byte	0x3d
+	.long	0x739
+	.uleb128 0x18
+	.long	.LASF159
+	.byte	0x15
+	.byte	0x3f
+	.long	0x786
+	.uleb128 0x18
+	.long	.LASF160
+	.byte	0x15
+	.byte	0x40
+	.long	0x61a
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF161
+	.byte	0x15
+	.byte	0x42
+	.long	0x851
+	.uleb128 0x1a
+	.byte	0x88
+	.byte	0x15
+	.byte	0x45
+	.long	0x989
+	.uleb128 0x8
+	.long	.LASF162
+	.byte	0x15
+	.byte	0x46
+	.long	0x104
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF163
+	.byte	0x15
+	.byte	0x47
+	.long	0x104
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF164
+	.byte	0x15
+	.byte	0x48
+	.long	0x30
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF165
+	.byte	0x15
+	.byte	0x49
+	.long	0x104
+	.byte	0x18
+	.uleb128 0x8
+	.long	.LASF166
+	.byte	0x15
+	.byte	0x4a
+	.long	0x53
+	.byte	0x20
+	.uleb128 0x8
+	.long	.LASF167
+	.byte	0x15
+	.byte	0x4a
+	.long	0x53
+	.byte	0x24
+	.uleb128 0x8
+	.long	.LASF168
+	.byte	0x15
+	.byte	0x4b
+	.long	0x104
+	.byte	0x28
+	.uleb128 0x1b
+	.string	"p3p"
+	.byte	0x15
+	.byte	0x4c
+	.long	0x104
+	.byte	0x30
+	.uleb128 0x8
+	.long	.LASF169
+	.byte	0x15
+	.byte	0x4d
+	.long	0x53
+	.byte	0x38
+	.uleb128 0x1b
+	.string	"cwd"
+	.byte	0x15
+	.byte	0x4e
+	.long	0x104
+	.byte	0x40
+	.uleb128 0x8
+	.long	.LASF170
+	.byte	0x15
+	.byte	0x4f
+	.long	0x53
+	.byte	0x48
+	.uleb128 0x8
+	.long	.LASF171
+	.byte	0x15
+	.byte	0x4f
+	.long	0x53
+	.byte	0x4c
+	.uleb128 0x8
+	.long	.LASF172
+	.byte	0x15
+	.byte	0x50
+	.long	0x53
+	.byte	0x50
+	.uleb128 0x8
+	.long	.LASF173
+	.byte	0x15
+	.byte	0x51
+	.long	0x989
+	.byte	0x58
+	.uleb128 0x8
+	.long	.LASF174
+	.byte	0x15
+	.byte	0x52
+	.long	0x53
+	.byte	0x60
+	.uleb128 0x8
+	.long	.LASF175
+	.byte	0x15
+	.byte	0x53
+	.long	0x53
+	.byte	0x64
+	.uleb128 0x8
+	.long	.LASF176
+	.byte	0x15
+	.byte	0x54
+	.long	0x53
+	.byte	0x68
+	.uleb128 0x8
+	.long	.LASF177
+	.byte	0x15
+	.byte	0x55
+	.long	0x104
+	.byte	0x70
+	.uleb128 0x8
+	.long	.LASF178
+	.byte	0x15
+	.byte	0x56
+	.long	0x104
+	.byte	0x78
+	.uleb128 0x8
+	.long	.LASF179
+	.byte	0x15
+	.byte	0x57
+	.long	0x53
+	.byte	0x80
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x34a
+	.uleb128 0x4
+	.long	.LASF180
+	.byte	0x15
+	.byte	0x58
+	.long	0x890
+	.uleb128 0x1c
+	.value	0x2d0
+	.byte	0x15
+	.byte	0x5b
+	.long	0xcb6
+	.uleb128 0x8
+	.long	.LASF181
+	.byte	0x15
+	.byte	0x5c
+	.long	0x53
+	.byte	0
+	.uleb128 0x1b
+	.string	"hs"
+	.byte	0x15
+	.byte	0x5d
+	.long	0xcb6
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF182
+	.byte	0x15
+	.byte	0x5e
+	.long	0x885
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF183
+	.byte	0x15
+	.byte	0x5f
+	.long	0x104
+	.byte	0x90
+	.uleb128 0x8
+	.long	.LASF184
+	.byte	0x15
+	.byte	0x60
+	.long	0x15e
+	.byte	0x98
+	.uleb128 0x8
+	.long	.LASF185
+	.byte	0x15
+	.byte	0x60
+	.long	0x15e
+	.byte	0xa0
+	.uleb128 0x8
+	.long	.LASF186
+	.byte	0x15
+	.byte	0x60
+	.long	0x15e
+	.byte	0xa8
+	.uleb128 0x8
+	.long	.LASF187
+	.byte	0x15
+	.byte	0x61
+	.long	0x53
+	.byte	0xb0
+	.uleb128 0x8
+	.long	.LASF188
+	.byte	0x15
+	.byte	0x62
+	.long	0x53
+	.byte	0xb4
+	.uleb128 0x8
+	.long	.LASF189
+	.byte	0x15
+	.byte	0x63
+	.long	0x53
+	.byte	0xb8
+	.uleb128 0x8
+	.long	.LASF190
+	.byte	0x15
+	.byte	0x64
+	.long	0x132
+	.byte	0xc0
+	.uleb128 0x8
+	.long	.LASF191
+	.byte	0x15
+	.byte	0x65
+	.long	0x132
+	.byte	0xc8
+	.uleb128 0x8
+	.long	.LASF192
+	.byte	0x15
+	.byte	0x66
+	.long	0x104
+	.byte	0xd0
+	.uleb128 0x8
+	.long	.LASF193
+	.byte	0x15
+	.byte	0x67
+	.long	0x104
+	.byte	0xd8
+	.uleb128 0x8
+	.long	.LASF194
+	.byte	0x15
+	.byte	0x68
+	.long	0x104
+	.byte	0xe0
+	.uleb128 0x8
+	.long	.LASF195
+	.byte	0x15
+	.byte	0x69
+	.long	0x104
+	.byte	0xe8
+	.uleb128 0x8
+	.long	.LASF196
+	.byte	0x15
+	.byte	0x6a
+	.long	0x104
+	.byte	0xf0
+	.uleb128 0x8
+	.long	.LASF197
+	.byte	0x15
+	.byte	0x6b
+	.long	0x104
+	.byte	0xf8
+	.uleb128 0x1d
+	.long	.LASF198
+	.byte	0x15
+	.byte	0x6c
+	.long	0x104
+	.value	0x100
+	.uleb128 0x1d
+	.long	.LASF199
+	.byte	0x15
+	.byte	0x6d
+	.long	0x104
+	.value	0x108
+	.uleb128 0x1d
+	.long	.LASF200
+	.byte	0x15
+	.byte	0x6e
+	.long	0x104
+	.value	0x110
+	.uleb128 0x1d
+	.long	.LASF201
+	.byte	0x15
+	.byte	0x6f
+	.long	0x104
+	.value	0x118
+	.uleb128 0x1d
+	.long	.LASF202
+	.byte	0x15
+	.byte	0x70
+	.long	0x104
+	.value	0x120
+	.uleb128 0x1d
+	.long	.LASF203
+	.byte	0x15
+	.byte	0x71
+	.long	0x104
+	.value	0x128
+	.uleb128 0x1d
+	.long	.LASF204
+	.byte	0x15
+	.byte	0x72
+	.long	0x104
+	.value	0x130
+	.uleb128 0x1d
+	.long	.LASF205
+	.byte	0x15
+	.byte	0x73
+	.long	0x104
+	.value	0x138
+	.uleb128 0x1d
+	.long	.LASF206
+	.byte	0x15
+	.byte	0x74
+	.long	0x104
+	.value	0x140
+	.uleb128 0x1d
+	.long	.LASF207
+	.byte	0x15
+	.byte	0x75
+	.long	0x104
+	.value	0x148
+	.uleb128 0x1d
+	.long	.LASF208
+	.byte	0x15
+	.byte	0x76
+	.long	0x104
+	.value	0x150
+	.uleb128 0x1d
+	.long	.LASF209
+	.byte	0x15
+	.byte	0x77
+	.long	0x104
+	.value	0x158
+	.uleb128 0x1d
+	.long	.LASF210
+	.byte	0x15
+	.byte	0x78
+	.long	0x104
+	.value	0x160
+	.uleb128 0x1d
+	.long	.LASF211
+	.byte	0x15
+	.byte	0x79
+	.long	0x104
+	.value	0x168
+	.uleb128 0x1d
+	.long	.LASF212
+	.byte	0x15
+	.byte	0x7a
+	.long	0x104
+	.value	0x170
+	.uleb128 0x1d
+	.long	.LASF213
+	.byte	0x15
+	.byte	0x7b
+	.long	0x15e
+	.value	0x178
+	.uleb128 0x1d
+	.long	.LASF214
+	.byte	0x15
+	.byte	0x7b
+	.long	0x15e
+	.value	0x180
+	.uleb128 0x1d
+	.long	.LASF215
+	.byte	0x15
+	.byte	0x7b
+	.long	0x15e
+	.value	0x188
+	.uleb128 0x1d
+	.long	.LASF216
+	.byte	0x15
+	.byte	0x7b
+	.long	0x15e
+	.value	0x190
+	.uleb128 0x1d
+	.long	.LASF217
+	.byte	0x15
+	.byte	0x7c
+	.long	0x15e
+	.value	0x198
+	.uleb128 0x1d
+	.long	.LASF218
+	.byte	0x15
+	.byte	0x7c
+	.long	0x15e
+	.value	0x1a0
+	.uleb128 0x1d
+	.long	.LASF219
+	.byte	0x15
+	.byte	0x7c
+	.long	0x15e
+	.value	0x1a8
+	.uleb128 0x1d
+	.long	.LASF220
+	.byte	0x15
+	.byte	0x7c
+	.long	0x15e
+	.value	0x1b0
+	.uleb128 0x1d
+	.long	.LASF221
+	.byte	0x15
+	.byte	0x7c
+	.long	0x15e
+	.value	0x1b8
+	.uleb128 0x1d
+	.long	.LASF222
+	.byte	0x15
+	.byte	0x7c
+	.long	0x15e
+	.value	0x1c0
+	.uleb128 0x1d
+	.long	.LASF223
+	.byte	0x15
+	.byte	0x7d
+	.long	0x15e
+	.value	0x1c8
+	.uleb128 0x1d
+	.long	.LASF224
+	.byte	0x15
+	.byte	0x7d
+	.long	0x15e
+	.value	0x1d0
+	.uleb128 0x1d
+	.long	.LASF225
+	.byte	0x15
+	.byte	0x82
+	.long	0x15e
+	.value	0x1d8
+	.uleb128 0x1d
+	.long	.LASF226
+	.byte	0x15
+	.byte	0x83
+	.long	0x153
+	.value	0x1e0
+	.uleb128 0x1d
+	.long	.LASF227
+	.byte	0x15
+	.byte	0x83
+	.long	0x153
+	.value	0x1e8
+	.uleb128 0x1d
+	.long	.LASF228
+	.byte	0x15
+	.byte	0x84
+	.long	0x15e
+	.value	0x1f0
+	.uleb128 0x1d
+	.long	.LASF229
+	.byte	0x15
+	.byte	0x85
+	.long	0x104
+	.value	0x1f8
+	.uleb128 0x1d
+	.long	.LASF230
+	.byte	0x15
+	.byte	0x86
+	.long	0x104
+	.value	0x200
+	.uleb128 0x1d
+	.long	.LASF231
+	.byte	0x15
+	.byte	0x87
+	.long	0x53
+	.value	0x208
+	.uleb128 0x1d
+	.long	.LASF232
+	.byte	0x15
+	.byte	0x88
+	.long	0x53
+	.value	0x20c
+	.uleb128 0x1d
+	.long	.LASF233
+	.byte	0x15
+	.byte	0x89
+	.long	0x53
+	.value	0x210
+	.uleb128 0x1d
+	.long	.LASF234
+	.byte	0x15
+	.byte	0x8a
+	.long	0x53
+	.value	0x214
+	.uleb128 0x1d
+	.long	.LASF235
+	.byte	0x15
+	.byte	0x8b
+	.long	0x132
+	.value	0x218
+	.uleb128 0x1d
+	.long	.LASF236
+	.byte	0x15
+	.byte	0x8b
+	.long	0x132
+	.value	0x220
+	.uleb128 0x1d
+	.long	.LASF237
+	.byte	0x15
+	.byte	0x8c
+	.long	0x53
+	.value	0x228
+	.uleb128 0x1d
+	.long	.LASF238
+	.byte	0x15
+	.byte	0x8d
+	.long	0x53
+	.value	0x22c
+	.uleb128 0x1e
+	.string	"sb"
+	.byte	0x15
+	.byte	0x8e
+	.long	0x1d1
+	.value	0x230
+	.uleb128 0x1d
+	.long	.LASF239
+	.byte	0x15
+	.byte	0x8f
+	.long	0x53
+	.value	0x2c0
+	.uleb128 0x1d
+	.long	.LASF240
+	.byte	0x15
+	.byte	0x90
+	.long	0x104
+	.value	0x2c8
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x98f
+	.uleb128 0x4
+	.long	.LASF241
+	.byte	0x15
+	.byte	0x91
+	.long	0x99a
+	.uleb128 0x17
+	.byte	0x8
+	.byte	0x16
+	.byte	0x2a
+	.long	0xceb
+	.uleb128 0x19
+	.string	"p"
+	.byte	0x16
+	.byte	0x2b
+	.long	0xe1
+	.uleb128 0x19
+	.string	"i"
+	.byte	0x16
+	.byte	0x2c
+	.long	0x53
+	.uleb128 0x19
+	.string	"l"
+	.byte	0x16
+	.byte	0x2d
+	.long	0x5a
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF242
+	.byte	0x16
+	.byte	0x2e
+	.long	0xcc7
+	.uleb128 0x4
+	.long	.LASF243
+	.byte	0x16
+	.byte	0x36
+	.long	0xd01
+	.uleb128 0xc
+	.long	0xd11
+	.uleb128 0xd
+	.long	0xceb
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x199
+	.uleb128 0x7
+	.long	.LASF244
+	.byte	0x48
+	.byte	0x16
+	.byte	0x39
+	.long	0xd84
+	.uleb128 0x8
+	.long	.LASF245
+	.byte	0x16
+	.byte	0x3a
+	.long	0xd84
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF246
+	.byte	0x16
+	.byte	0x3b
+	.long	0xceb
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF247
+	.byte	0x16
+	.byte	0x3c
+	.long	0x5a
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF248
+	.byte	0x16
+	.byte	0x3d
+	.long	0x53
+	.byte	0x18
+	.uleb128 0x8
+	.long	.LASF249
+	.byte	0x16
+	.byte	0x3e
+	.long	0x199
+	.byte	0x20
+	.uleb128 0x8
+	.long	.LASF250
+	.byte	0x16
+	.byte	0x3f
+	.long	0xd8a
+	.byte	0x30
+	.uleb128 0x8
+	.long	.LASF251
+	.byte	0x16
+	.byte	0x40
+	.long	0xd8a
+	.byte	0x38
+	.uleb128 0x8
+	.long	.LASF252
+	.byte	0x16
+	.byte	0x41
+	.long	0x53
+	.byte	0x40
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0xcf6
+	.uleb128 0x6
+	.byte	0x8
+	.long	0xd17
+	.uleb128 0x4
+	.long	.LASF253
+	.byte	0x16
+	.byte	0x42
+	.long	0xd17
+	.uleb128 0x1a
+	.byte	0x30
+	.byte	0x1
+	.byte	0x58
+	.long	0xdec
+	.uleb128 0x8
+	.long	.LASF254
+	.byte	0x1
+	.byte	0x59
+	.long	0x104
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF255
+	.byte	0x1
+	.byte	0x5a
+	.long	0x5a
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF256
+	.byte	0x1
+	.byte	0x5a
+	.long	0x5a
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF257
+	.byte	0x1
+	.byte	0x5b
+	.long	0x5a
+	.byte	0x18
+	.uleb128 0x8
+	.long	.LASF258
+	.byte	0x1
+	.byte	0x5c
+	.long	0x132
+	.byte	0x20
+	.uleb128 0x8
+	.long	.LASF259
+	.byte	0x1
+	.byte	0x5d
+	.long	0x53
+	.byte	0x28
+	.byte	0
+	.uleb128 0x4
+	.long	.LASF260
+	.byte	0x1
+	.byte	0x5e
+	.long	0xd9b
+	.uleb128 0x1a
+	.byte	0x90
+	.byte	0x1
+	.byte	0x65
+	.long	0xeb3
+	.uleb128 0x8
+	.long	.LASF261
+	.byte	0x1
+	.byte	0x66
+	.long	0x53
+	.byte	0
+	.uleb128 0x8
+	.long	.LASF262
+	.byte	0x1
+	.byte	0x67
+	.long	0x53
+	.byte	0x4
+	.uleb128 0x1b
+	.string	"hc"
+	.byte	0x1
+	.byte	0x68
+	.long	0xeb3
+	.byte	0x8
+	.uleb128 0x8
+	.long	.LASF263
+	.byte	0x1
+	.byte	0x69
+	.long	0xeb9
+	.byte	0x10
+	.uleb128 0x8
+	.long	.LASF264
+	.byte	0x1
+	.byte	0x6a
+	.long	0x53
+	.byte	0x38
+	.uleb128 0x8
+	.long	.LASF255
+	.byte	0x1
+	.byte	0x6b
+	.long	0x5a
+	.byte	0x40
+	.uleb128 0x8
+	.long	.LASF256
+	.byte	0x1
+	.byte	0x6b
+	.long	0x5a
+	.byte	0x48
+	.uleb128 0x8
+	.long	.LASF265
+	.byte	0x1
+	.byte	0x6c
+	.long	0x153
+	.byte	0x50
+	.uleb128 0x8
+	.long	.LASF266
+	.byte	0x1
+	.byte	0x6c
+	.long	0x153
+	.byte	0x58
+	.uleb128 0x8
+	.long	.LASF267
+	.byte	0x1
+	.byte	0x6d
+	.long	0xec9
+	.byte	0x60
+	.uleb128 0x8
+	.long	.LASF268
+	.byte	0x1
+	.byte	0x6e
+	.long	0xec9
+	.byte	0x68
+	.uleb128 0x8
+	.long	.LASF269
+	.byte	0x1
+	.byte	0x6f
+	.long	0x5a
+	.byte	0x70
+	.uleb128 0x8
+	.long	.LASF270
+	.byte	0x1
+	.byte	0x70
+	.long	0x132
+	.byte	0x78
+	.uleb128 0x8
+	.long	.LASF271
+	.byte	0x1
+	.byte	0x71
+	.long	0x132
+	.byte	0x80
+	.uleb128 0x8
+	.long	.LASF272
+	.byte	0x1
+	.byte	0x72
+	.long	0x132
+	.byte	0x88
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0xcbc
+	.uleb128 0xa
+	.long	0x53
+	.long	0xec9
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x9
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0xd90
+	.uleb128 0x4
+	.long	.LASF273
+	.byte	0x1
+	.byte	0x73
+	.long	0xdf7
+	.uleb128 0x1f
+	.long	.LASF274
+	.byte	0x1
+	.value	0x77e
+	.byte	0x1
+	.long	0xf0a
+	.uleb128 0x20
+	.string	"c"
+	.byte	0x1
+	.value	0x77e
+	.long	0xf0a
+	.uleb128 0x20
+	.string	"tvP"
+	.byte	0x1
+	.value	0x77e
+	.long	0xd11
+	.uleb128 0x21
+	.long	.LASF280
+	.byte	0x1
+	.value	0x780
+	.long	0x53
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0xecf
+	.uleb128 0x1f
+	.long	.LASF275
+	.byte	0x1
+	.value	0x4b2
+	.byte	0x1
+	.long	0xf36
+	.uleb128 0x22
+	.long	.LASF276
+	.byte	0x1
+	.value	0x4b2
+	.long	0x104
+	.uleb128 0x22
+	.long	.LASF277
+	.byte	0x1
+	.value	0x4b2
+	.long	0x104
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF278
+	.byte	0x1
+	.value	0x4a6
+	.byte	0x1
+	.long	0xf5c
+	.uleb128 0x22
+	.long	.LASF276
+	.byte	0x1
+	.value	0x4a6
+	.long	0x104
+	.uleb128 0x22
+	.long	.LASF277
+	.byte	0x1
+	.value	0x4a6
+	.long	0x104
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF279
+	.byte	0x1
+	.value	0x12b
+	.byte	0x1
+	.long	0xf82
+	.uleb128 0x20
+	.string	"sig"
+	.byte	0x1
+	.value	0x12b
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF281
+	.byte	0x1
+	.value	0x12d
+	.long	0x55e
+	.byte	0
+	.uleb128 0x23
+	.long	.LASF358
+	.byte	0x1
+	.value	0x4bf
+	.long	0x104
+	.byte	0x1
+	.long	0xfac
+	.uleb128 0x22
+	.long	.LASF282
+	.byte	0x1
+	.value	0x4bf
+	.long	0x104
+	.uleb128 0x21
+	.long	.LASF283
+	.byte	0x1
+	.value	0x4c1
+	.long	0x104
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF286
+	.byte	0x17
+	.value	0x417
+	.long	0x15e
+	.byte	0x3
+	.long	0xfe2
+	.uleb128 0x20
+	.string	"__s"
+	.byte	0x17
+	.value	0x417
+	.long	0x54c
+	.uleb128 0x22
+	.long	.LASF284
+	.byte	0x17
+	.value	0x417
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x17
+	.value	0x419
+	.long	0x15e
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF287
+	.byte	0x17
+	.value	0x423
+	.long	0x15e
+	.byte	0x3
+	.long	0x1024
+	.uleb128 0x20
+	.string	"__s"
+	.byte	0x17
+	.value	0x423
+	.long	0x54c
+	.uleb128 0x22
+	.long	.LASF288
+	.byte	0x17
+	.value	0x423
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF289
+	.byte	0x17
+	.value	0x423
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x17
+	.value	0x425
+	.long	0x15e
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF290
+	.byte	0x17
+	.value	0x42f
+	.long	0x15e
+	.byte	0x3
+	.long	0x1072
+	.uleb128 0x20
+	.string	"__s"
+	.byte	0x17
+	.value	0x42f
+	.long	0x54c
+	.uleb128 0x22
+	.long	.LASF288
+	.byte	0x17
+	.value	0x42f
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF289
+	.byte	0x17
+	.value	0x42f
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF291
+	.byte	0x17
+	.value	0x42f
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x17
+	.value	0x431
+	.long	0x15e
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF292
+	.byte	0x17
+	.value	0x3cb
+	.long	0x15e
+	.byte	0x3
+	.long	0x10a8
+	.uleb128 0x20
+	.string	"__s"
+	.byte	0x17
+	.value	0x3cb
+	.long	0x54c
+	.uleb128 0x22
+	.long	.LASF293
+	.byte	0x17
+	.value	0x3cb
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x17
+	.value	0x3cd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF294
+	.byte	0x17
+	.value	0x3d6
+	.long	0x15e
+	.byte	0x3
+	.long	0x10ea
+	.uleb128 0x20
+	.string	"__s"
+	.byte	0x17
+	.value	0x3d6
+	.long	0x54c
+	.uleb128 0x22
+	.long	.LASF295
+	.byte	0x17
+	.value	0x3d6
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF296
+	.byte	0x17
+	.value	0x3d6
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x17
+	.value	0x3d8
+	.long	0x15e
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF297
+	.byte	0x17
+	.value	0x3e2
+	.long	0x15e
+	.byte	0x3
+	.long	0x1138
+	.uleb128 0x20
+	.string	"__s"
+	.byte	0x17
+	.value	0x3e2
+	.long	0x54c
+	.uleb128 0x22
+	.long	.LASF295
+	.byte	0x17
+	.value	0x3e2
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF296
+	.byte	0x17
+	.value	0x3e2
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF298
+	.byte	0x17
+	.value	0x3e3
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x17
+	.value	0x3e5
+	.long	0x15e
+	.byte	0
+	.uleb128 0x24
+	.long	.LASF299
+	.byte	0x2
+	.value	0x11c
+	.long	0x53
+	.byte	0x3
+	.long	0x1156
+	.uleb128 0x22
+	.long	.LASF300
+	.byte	0x2
+	.value	0x11c
+	.long	0x54c
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF301
+	.byte	0x1
+	.value	0x7bc
+	.byte	0x1
+	.long	0x117a
+	.uleb128 0x20
+	.string	"c"
+	.byte	0x1
+	.value	0x7bc
+	.long	0xf0a
+	.uleb128 0x20
+	.string	"tvP"
+	.byte	0x1
+	.value	0x7bc
+	.long	0xd11
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF302
+	.byte	0x1
+	.value	0x100
+	.byte	0x1
+	.long	0x1194
+	.uleb128 0x20
+	.string	"sig"
+	.byte	0x1
+	.value	0x100
+	.long	0x53
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF303
+	.byte	0x1
+	.value	0x4cf
+	.byte	0x1
+	.long	0x123d
+	.uleb128 0x22
+	.long	.LASF304
+	.byte	0x1
+	.value	0x4cf
+	.long	0x123d
+	.uleb128 0x22
+	.long	.LASF305
+	.byte	0x1
+	.value	0x4cf
+	.long	0x15e
+	.uleb128 0x22
+	.long	.LASF306
+	.byte	0x1
+	.value	0x4cf
+	.long	0x2be
+	.uleb128 0x22
+	.long	.LASF307
+	.byte	0x1
+	.value	0x4cf
+	.long	0x123d
+	.uleb128 0x22
+	.long	.LASF308
+	.byte	0x1
+	.value	0x4cf
+	.long	0x15e
+	.uleb128 0x22
+	.long	.LASF309
+	.byte	0x1
+	.value	0x4cf
+	.long	0x2be
+	.uleb128 0x21
+	.long	.LASF310
+	.byte	0x1
+	.value	0x4d3
+	.long	0x7cf
+	.uleb128 0x21
+	.long	.LASF311
+	.byte	0x1
+	.value	0x4d4
+	.long	0x1243
+	.uleb128 0x21
+	.long	.LASF312
+	.byte	0x1
+	.value	0x4d5
+	.long	0x53
+	.uleb128 0x25
+	.string	"ai"
+	.byte	0x1
+	.value	0x4d6
+	.long	0x84b
+	.uleb128 0x25
+	.string	"ai2"
+	.byte	0x1
+	.value	0x4d7
+	.long	0x84b
+	.uleb128 0x21
+	.long	.LASF313
+	.byte	0x1
+	.value	0x4d8
+	.long	0x84b
+	.uleb128 0x21
+	.long	.LASF314
+	.byte	0x1
+	.value	0x4d9
+	.long	0x84b
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x885
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x1253
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x9
+	.byte	0
+	.uleb128 0x26
+	.long	.LASF315
+	.byte	0x1
+	.byte	0xed
+	.quad	.LFB42
+	.quad	.LFE42-.LFB42
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1289
+	.uleb128 0x27
+	.string	"sig"
+	.byte	0x1
+	.byte	0xed
+	.long	0x53
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x28
+	.long	.LASF281
+	.byte	0x1
+	.byte	0xef
+	.long	0x55e
+	.byte	0
+	.uleb128 0x29
+	.long	.LASF316
+	.byte	0x1
+	.value	0x788
+	.quad	.LFB63
+	.quad	.LFE63-.LFB63
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x12fc
+	.uleb128 0x2a
+	.long	.LASF246
+	.byte	0x1
+	.value	0x788
+	.long	0xceb
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2a
+	.long	.LASF317
+	.byte	0x1
+	.value	0x788
+	.long	0xd11
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x21
+	.long	.LASF318
+	.byte	0x1
+	.value	0x78a
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF280
+	.byte	0x1
+	.value	0x78a
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF319
+	.byte	0x1
+	.value	0x78b
+	.long	0x53
+	.uleb128 0x25
+	.string	"c"
+	.byte	0x1
+	.value	0x78c
+	.long	0xf0a
+	.uleb128 0x25
+	.string	"l"
+	.byte	0x1
+	.value	0x78d
+	.long	0x5a
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF320
+	.byte	0x1
+	.value	0x3d9
+	.quad	.LFB49
+	.quad	.LFE49-.LFB49
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x134d
+	.uleb128 0x2c
+	.quad	.LVL1
+	.long	0x5b79
+	.long	0x1339
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC5
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL2
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF321
+	.byte	0x1
+	.value	0x834
+	.quad	.LFB68
+	.quad	.LFE68-.LFB68
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x13ad
+	.uleb128 0x2f
+	.long	.LASF246
+	.byte	0x1
+	.value	0x834
+	.long	0xceb
+	.long	.LLST0
+	.uleb128 0x2f
+	.long	.LASF317
+	.byte	0x1
+	.value	0x834
+	.long	0xd11
+	.long	.LLST1
+	.uleb128 0x30
+	.string	"c"
+	.byte	0x1
+	.value	0x836
+	.long	0xf0a
+	.long	.LLST2
+	.uleb128 0x31
+	.quad	.LVL6
+	.long	0x5ba7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF322
+	.byte	0x1
+	.value	0x87e
+	.byte	0x1
+	.long	0x13c7
+	.uleb128 0x22
+	.long	.LASF323
+	.byte	0x1
+	.value	0x87e
+	.long	0x5a
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF324
+	.byte	0x1
+	.value	0x860
+	.quad	.LFB72
+	.quad	.LFE72-.LFB72
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1543
+	.uleb128 0x2f
+	.long	.LASF317
+	.byte	0x1
+	.value	0x860
+	.long	0xd11
+	.long	.LLST3
+	.uleb128 0x32
+	.string	"tv"
+	.byte	0x1
+	.value	0x862
+	.long	0x199
+	.uleb128 0x2
+	.byte	0x91
+	.sleb128 -32
+	.uleb128 0x30
+	.string	"now"
+	.byte	0x1
+	.value	0x863
+	.long	0x153
+	.long	.LLST4
+	.uleb128 0x33
+	.long	.LASF325
+	.byte	0x1
+	.value	0x864
+	.long	0x5a
+	.long	.LLST5
+	.uleb128 0x33
+	.long	.LASF326
+	.byte	0x1
+	.value	0x864
+	.long	0x5a
+	.long	.LLST6
+	.uleb128 0x34
+	.long	0x13ad
+	.quad	.LBB188
+	.long	.Ldebug_ranges0+0
+	.byte	0x1
+	.value	0x874
+	.long	0x1475
+	.uleb128 0x35
+	.long	0x13ba
+	.long	.LLST7
+	.uleb128 0x2e
+	.quad	.LVL16
+	.long	0x5bc2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x36
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC10
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL14
+	.long	0x5bc2
+	.long	0x149f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x36
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC9
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL17
+	.long	0x5bd9
+	.long	0x14b7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL18
+	.long	0x5beb
+	.long	0x14cf
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL19
+	.long	0x5bfc
+	.long	0x14e7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL20
+	.long	0x5c0d
+	.long	0x14ff
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL25
+	.long	0x5bc2
+	.long	0x1529
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x36
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC9
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL28
+	.long	0x5c1e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x77
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF327
+	.byte	0x1
+	.value	0x857
+	.quad	.LFB71
+	.quad	.LFE71-.LFB71
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1597
+	.uleb128 0x2f
+	.long	.LASF246
+	.byte	0x1
+	.value	0x857
+	.long	0xceb
+	.long	.LLST8
+	.uleb128 0x2f
+	.long	.LASF317
+	.byte	0x1
+	.value	0x857
+	.long	0xd11
+	.long	.LLST9
+	.uleb128 0x31
+	.quad	.LVL31
+	.long	0x13c7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF328
+	.byte	0x1
+	.value	0x119
+	.quad	.LFB44
+	.quad	.LFE44-.LFB44
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x15f6
+	.uleb128 0x36
+	.string	"sig"
+	.byte	0x1
+	.value	0x119
+	.long	0x53
+	.long	.LLST10
+	.uleb128 0x33
+	.long	.LASF281
+	.byte	0x1
+	.value	0x11b
+	.long	0x55e
+	.long	.LLST11
+	.uleb128 0x37
+	.quad	.LVL33
+	.long	0x5c3e
+	.uleb128 0x2e
+	.quad	.LVL35
+	.long	0x13c7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF329
+	.byte	0x1
+	.value	0x84d
+	.quad	.LFB70
+	.quad	.LFE70-.LFB70
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x165b
+	.uleb128 0x2f
+	.long	.LASF246
+	.byte	0x1
+	.value	0x84d
+	.long	0xceb
+	.long	.LLST12
+	.uleb128 0x2f
+	.long	.LASF317
+	.byte	0x1
+	.value	0x84d
+	.long	0xd11
+	.long	.LLST13
+	.uleb128 0x2c
+	.quad	.LVL39
+	.long	0x5c49
+	.long	0x164d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL40
+	.long	0x5c5a
+	.byte	0
+	.uleb128 0x26
+	.long	.LASF330
+	.byte	0x1
+	.byte	0xb8
+	.quad	.LFB41
+	.quad	.LFE41-.LFB41
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1704
+	.uleb128 0x38
+	.string	"sig"
+	.byte	0x1
+	.byte	0xb8
+	.long	0x53
+	.long	.LLST14
+	.uleb128 0x39
+	.long	.LASF281
+	.byte	0x1
+	.byte	0xba
+	.long	0x55e
+	.long	.LLST15
+	.uleb128 0x3a
+	.string	"pid"
+	.byte	0x1
+	.byte	0xbb
+	.long	0x13d
+	.long	.LLST16
+	.uleb128 0x3b
+	.long	.LASF189
+	.byte	0x1
+	.byte	0xbc
+	.long	0x53
+	.uleb128 0x2
+	.byte	0x91
+	.sleb128 -36
+	.uleb128 0x37
+	.quad	.LVL42
+	.long	0x5c3e
+	.uleb128 0x2c
+	.quad	.LVL44
+	.long	0x5c61
+	.long	0x16e3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x9
+	.byte	0xff
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x91
+	.sleb128 -36
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL46
+	.long	0x5bc2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC15
+	.byte	0
+	.byte	0
+	.uleb128 0x3c
+	.long	.LASF505
+	.byte	0x1
+	.value	0x5dc
+	.long	0x53
+	.quad	.LFB57
+	.quad	.LFE57-.LFB57
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1886
+	.uleb128 0x36
+	.string	"tvP"
+	.byte	0x1
+	.value	0x5dc
+	.long	0xd11
+	.long	.LLST17
+	.uleb128 0x2f
+	.long	.LASF331
+	.byte	0x1
+	.value	0x5dc
+	.long	0x53
+	.long	.LLST18
+	.uleb128 0x30
+	.string	"c"
+	.byte	0x1
+	.value	0x5de
+	.long	0xf0a
+	.long	.LLST19
+	.uleb128 0x33
+	.long	.LASF246
+	.byte	0x1
+	.value	0x5df
+	.long	0xceb
+	.long	.LLST20
+	.uleb128 0x2c
+	.quad	.LVL51
+	.long	0x5c80
+	.long	0x177c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL57
+	.long	0x5c9f
+	.uleb128 0x2c
+	.quad	.LVL58
+	.long	0x5ba7
+	.long	0x17a6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL60
+	.long	0x5cb1
+	.long	0x17be
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL65
+	.long	0x5cc2
+	.long	0x17d7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x2d0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL67
+	.long	0x5bc2
+	.long	0x17fb
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC17
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL68
+	.long	0x5cb1
+	.long	0x1813
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL69
+	.long	0x5bc2
+	.long	0x1837
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC18
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL70
+	.long	0x5b95
+	.long	0x184e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL71
+	.long	0x5bc2
+	.long	0x1872
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC19
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL72
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF332
+	.byte	0x1
+	.value	0x7fb
+	.quad	.LFB66
+	.quad	.LFE66-.LFB66
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1935
+	.uleb128 0x36
+	.string	"c"
+	.byte	0x1
+	.value	0x7fb
+	.long	0xf0a
+	.long	.LLST21
+	.uleb128 0x36
+	.string	"tvP"
+	.byte	0x1
+	.value	0x7fb
+	.long	0xd11
+	.long	.LLST22
+	.uleb128 0x3d
+	.long	0xeda
+	.quad	.LBB194
+	.quad	.LBE194-.LBB194
+	.byte	0x1
+	.value	0x801
+	.long	0x190d
+	.uleb128 0x3e
+	.long	0xef1
+	.uleb128 0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.uleb128 0x35
+	.long	0xee7
+	.long	.LLST23
+	.uleb128 0x3f
+	.quad	.LBB195
+	.quad	.LBE195-.LBB195
+	.uleb128 0x40
+	.long	0xefd
+	.long	.LLST24
+	.byte	0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL75
+	.long	0x5cd8
+	.uleb128 0x37
+	.quad	.LVL77
+	.long	0x5ce9
+	.uleb128 0x37
+	.quad	.LVL79
+	.long	0x5cff
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF333
+	.byte	0x1
+	.value	0x7c7
+	.quad	.LFB65
+	.quad	.LFE65-.LFB65
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1a8b
+	.uleb128 0x36
+	.string	"c"
+	.byte	0x1
+	.value	0x7c7
+	.long	0xf0a
+	.long	.LLST25
+	.uleb128 0x36
+	.string	"tvP"
+	.byte	0x1
+	.value	0x7c7
+	.long	0xd11
+	.long	.LLST26
+	.uleb128 0x21
+	.long	.LASF246
+	.byte	0x1
+	.value	0x7c9
+	.long	0xceb
+	.uleb128 0x37
+	.quad	.LVL83
+	.long	0x5cff
+	.uleb128 0x37
+	.quad	.LVL84
+	.long	0x5cd8
+	.uleb128 0x2c
+	.quad	.LVL85
+	.long	0x5d10
+	.long	0x19ae
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL86
+	.long	0x5ba7
+	.long	0x19cb
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL87
+	.long	0x5bc2
+	.long	0x19ef
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC22
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL88
+	.long	0x5d2a
+	.long	0x1a26
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	linger_clear_connection
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x1f4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL92
+	.long	0x5cff
+	.uleb128 0x41
+	.quad	.LVL95
+	.long	0x1886
+	.long	0x1a53
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL96
+	.long	0x5bc2
+	.long	0x1a77
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC23
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL97
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF334
+	.byte	0x1
+	.value	0x80f
+	.quad	.LFB67
+	.quad	.LFE67-.LFB67
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1bed
+	.uleb128 0x2f
+	.long	.LASF246
+	.byte	0x1
+	.value	0x80f
+	.long	0xceb
+	.long	.LLST27
+	.uleb128 0x2f
+	.long	.LASF317
+	.byte	0x1
+	.value	0x80f
+	.long	0xd11
+	.long	.LLST28
+	.uleb128 0x33
+	.long	.LASF319
+	.byte	0x1
+	.value	0x811
+	.long	0x53
+	.long	.LLST29
+	.uleb128 0x30
+	.string	"c"
+	.byte	0x1
+	.value	0x812
+	.long	0xf0a
+	.long	.LLST30
+	.uleb128 0x3d
+	.long	0x1156
+	.quad	.LBB196
+	.quad	.LBE196-.LBB196
+	.byte	0x1
+	.value	0x821
+	.long	0x1b3d
+	.uleb128 0x35
+	.long	0x116d
+	.long	.LLST31
+	.uleb128 0x35
+	.long	0x1163
+	.long	.LLST32
+	.uleb128 0x37
+	.quad	.LVL107
+	.long	0x5d53
+	.uleb128 0x2e
+	.quad	.LVL108
+	.long	0x1935
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL104
+	.long	0x5d64
+	.uleb128 0x2c
+	.quad	.LVL105
+	.long	0x5bc2
+	.long	0x1b6e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x36
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC25
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL106
+	.long	0x5d7a
+	.long	0x1ba1
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x198
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC26
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x59
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC26
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL113
+	.long	0x5d64
+	.uleb128 0x2c
+	.quad	.LVL114
+	.long	0x5bc2
+	.long	0x1bd2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x36
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC27
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL115
+	.long	0x1935
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF335
+	.byte	0x1
+	.value	0x842
+	.quad	.LFB69
+	.quad	.LFE69-.LFB69
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1c4f
+	.uleb128 0x2f
+	.long	.LASF246
+	.byte	0x1
+	.value	0x842
+	.long	0xceb
+	.long	.LLST33
+	.uleb128 0x2f
+	.long	.LASF317
+	.byte	0x1
+	.value	0x842
+	.long	0xd11
+	.long	.LLST34
+	.uleb128 0x30
+	.string	"c"
+	.byte	0x1
+	.value	0x844
+	.long	0xf0a
+	.long	.LLST33
+	.uleb128 0x31
+	.quad	.LVL117
+	.long	0x1886
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.long	.LASF336
+	.byte	0x1
+	.value	0x5b6
+	.quad	.LFB56
+	.quad	.LFE56-.LFB56
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1d7c
+	.uleb128 0x33
+	.long	.LASF319
+	.byte	0x1
+	.value	0x5b8
+	.long	0x53
+	.long	.LLST36
+	.uleb128 0x32
+	.string	"tv"
+	.byte	0x1
+	.value	0x5b9
+	.long	0x199
+	.uleb128 0x2
+	.byte	0x91
+	.sleb128 -48
+	.uleb128 0x42
+	.quad	.LBB198
+	.quad	.LBE198-.LBB198
+	.long	0x1cdf
+	.uleb128 0x30
+	.string	"ths"
+	.byte	0x1
+	.value	0x5cb
+	.long	0xcb6
+	.long	.LLST37
+	.uleb128 0x37
+	.quad	.LVL128
+	.long	0x5cd8
+	.uleb128 0x37
+	.quad	.LVL129
+	.long	0x5cd8
+	.uleb128 0x2e
+	.quad	.LVL130
+	.long	0x5da4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL118
+	.long	0x5c1e
+	.long	0x1cfd
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x77
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL119
+	.long	0x13c7
+	.long	0x1d15
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x77
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL121
+	.long	0x5db5
+	.uleb128 0x37
+	.quad	.LVL122
+	.long	0x5dc6
+	.uleb128 0x2c
+	.quad	.LVL125
+	.long	0x5ce9
+	.long	0x1d47
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x77
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL131
+	.long	0x5dd8
+	.uleb128 0x37
+	.quad	.LVL132
+	.long	0x5ddf
+	.uleb128 0x37
+	.quad	.LVL133
+	.long	0x5dc6
+	.uleb128 0x37
+	.quad	.LVL134
+	.long	0x5dc6
+	.byte	0
+	.uleb128 0x26
+	.long	.LASF337
+	.byte	0x1
+	.byte	0xab
+	.quad	.LFB40
+	.quad	.LFE40-.LFB40
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1e00
+	.uleb128 0x38
+	.string	"sig"
+	.byte	0x1
+	.byte	0xab
+	.long	0x53
+	.long	.LLST38
+	.uleb128 0x37
+	.quad	.LVL136
+	.long	0x1c4f
+	.uleb128 0x2c
+	.quad	.LVL137
+	.long	0x5bc2
+	.long	0x1ddf
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x35
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC31
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL138
+	.long	0x5de6
+	.uleb128 0x2e
+	.quad	.LVL139
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.long	0xf10
+	.quad	.LFB75
+	.quad	.LFE75-.LFB75
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1e6a
+	.uleb128 0x35
+	.long	0xf1d
+	.long	.LLST39
+	.uleb128 0x3e
+	.long	0xf29
+	.uleb128 0x6
+	.byte	0xfa
+	.long	0xf29
+	.byte	0x9f
+	.uleb128 0x2c
+	.quad	.LVL142
+	.long	0x5b79
+	.long	0x1e56
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL143
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.long	0xf36
+	.quad	.LFB76
+	.quad	.LFE76-.LFB76
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1ed4
+	.uleb128 0x35
+	.long	0xf43
+	.long	.LLST40
+	.uleb128 0x3e
+	.long	0xf4f
+	.uleb128 0x6
+	.byte	0xfa
+	.long	0xf4f
+	.byte	0x9f
+	.uleb128 0x2c
+	.quad	.LVL146
+	.long	0x5b79
+	.long	0x1ec0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC35
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL147
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.long	0xf5c
+	.quad	.LFB45
+	.quad	.LFE45-.LFB45
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x1f87
+	.uleb128 0x35
+	.long	0xf69
+	.long	.LLST41
+	.uleb128 0x40
+	.long	0xf75
+	.long	.LLST42
+	.uleb128 0x42
+	.quad	.LBB201
+	.quad	.LBE201-.LBB201
+	.long	0x1f64
+	.uleb128 0x3e
+	.long	0xf69
+	.uleb128 0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.uleb128 0x3f
+	.quad	.LBB202
+	.quad	.LBE202-.LBB202
+	.uleb128 0x44
+	.long	0xf75
+	.uleb128 0x2c
+	.quad	.LVL154
+	.long	0x5ded
+	.long	0x1f55
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC37
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL155
+	.long	0x5e03
+	.byte	0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL149
+	.long	0x5c3e
+	.uleb128 0x2e
+	.quad	.LVL151
+	.long	0x5e0b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x168
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.long	0xf82
+	.quad	.LFB78
+	.quad	.LFE78-.LFB78
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x200a
+	.uleb128 0x44
+	.long	0xf9f
+	.uleb128 0x3e
+	.long	0xf93
+	.uleb128 0x6
+	.byte	0xfa
+	.long	0xf93
+	.byte	0x9f
+	.uleb128 0x2c
+	.quad	.LVL157
+	.long	0x5bc2
+	.long	0x1fd7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC39
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL158
+	.long	0x5b79
+	.long	0x1ff6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC40
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL159
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.long	0x117a
+	.quad	.LFB43
+	.quad	.LFE43-.LFB43
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x209b
+	.uleb128 0x35
+	.long	0x1187
+	.long	.LLST43
+	.uleb128 0x3f
+	.quad	.LBB205
+	.quad	.LBE205-.LBB205
+	.uleb128 0x35
+	.long	0x1187
+	.long	.LLST44
+	.uleb128 0x37
+	.quad	.LVL162
+	.long	0x1c4f
+	.uleb128 0x2c
+	.quad	.LVL163
+	.long	0x5bc2
+	.long	0x2079
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x35
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC42
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL164
+	.long	0x5de6
+	.uleb128 0x2e
+	.quad	.LVL165
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF338
+	.byte	0x1
+	.value	0x340
+	.byte	0x1
+	.long	0x2569
+	.uleb128 0x22
+	.long	.LASF339
+	.byte	0x1
+	.value	0x340
+	.long	0x53
+	.uleb128 0x22
+	.long	.LASF340
+	.byte	0x1
+	.value	0x340
+	.long	0x4dc
+	.uleb128 0x21
+	.long	.LASF341
+	.byte	0x1
+	.value	0x342
+	.long	0x53
+	.uleb128 0x45
+	.long	0x2104
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x371
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x371
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x371
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x371
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x213c
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x376
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x376
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x376
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x376
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2174
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x37b
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x37b
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x37b
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x37b
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x21ac
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x380
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x380
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x380
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x380
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x21e4
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x385
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x385
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x385
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x385
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2202
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x38a
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x38a
+	.long	0x15e
+	.byte	0
+	.uleb128 0x45
+	.long	0x223a
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x38f
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x38f
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x38f
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x38f
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2272
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x394
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x394
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x394
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x394
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2290
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x396
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x396
+	.long	0x15e
+	.byte	0
+	.uleb128 0x45
+	.long	0x22c8
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x398
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x398
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x398
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x398
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2300
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x39d
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x39d
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x39d
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x39d
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2338
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3a2
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3a2
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3a2
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3a2
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2370
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3a7
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3a7
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3a7
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3a7
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x23a8
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3ac
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3ac
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3ac
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3ac
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x23e0
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3b1
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3b1
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3b1
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3b1
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x23fe
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3b3
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3b3
+	.long	0x15e
+	.byte	0
+	.uleb128 0x45
+	.long	0x2436
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3b5
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3b5
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3b5
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3b5
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2454
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3b7
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3b7
+	.long	0x15e
+	.byte	0
+	.uleb128 0x45
+	.long	0x248c
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3b9
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3b9
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3b9
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3b9
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x24c4
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3be
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3be
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3be
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3be
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x24fc
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3c3
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3c3
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3c3
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3c3
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.long	0x2534
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3c8
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3c8
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3c8
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3c8
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x3cd
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x3cd
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x3cd
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x3cd
+	.long	0x53
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x256f
+	.uleb128 0x11
+	.long	0x29
+	.uleb128 0x1f
+	.long	.LASF345
+	.byte	0x1
+	.value	0x3e3
+	.byte	0x1
+	.long	0x264e
+	.uleb128 0x22
+	.long	.LASF346
+	.byte	0x1
+	.value	0x3e3
+	.long	0x104
+	.uleb128 0x25
+	.string	"fp"
+	.byte	0x1
+	.value	0x3e5
+	.long	0x989
+	.uleb128 0x21
+	.long	.LASF347
+	.byte	0x1
+	.value	0x3e6
+	.long	0x264e
+	.uleb128 0x25
+	.string	"cp"
+	.byte	0x1
+	.value	0x3e7
+	.long	0x104
+	.uleb128 0x25
+	.string	"cp2"
+	.byte	0x1
+	.value	0x3e8
+	.long	0x104
+	.uleb128 0x21
+	.long	.LASF276
+	.byte	0x1
+	.value	0x3e9
+	.long	0x104
+	.uleb128 0x21
+	.long	.LASF277
+	.byte	0x1
+	.value	0x3ea
+	.long	0x104
+	.uleb128 0x45
+	.long	0x25fd
+	.uleb128 0x21
+	.long	.LASF348
+	.byte	0x1
+	.value	0x3fb
+	.long	0x10a
+	.uleb128 0x21
+	.long	.LASF349
+	.byte	0x1
+	.value	0x3fb
+	.long	0x10a
+	.uleb128 0x21
+	.long	.LASF350
+	.byte	0x1
+	.value	0x3fb
+	.long	0x10a
+	.byte	0
+	.uleb128 0x45
+	.long	0x2627
+	.uleb128 0x21
+	.long	.LASF351
+	.byte	0x1
+	.value	0x401
+	.long	0x10a
+	.uleb128 0x21
+	.long	.LASF352
+	.byte	0x1
+	.value	0x401
+	.long	0x10a
+	.uleb128 0x21
+	.long	.LASF353
+	.byte	0x1
+	.value	0x401
+	.long	0x10a
+	.byte	0
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF348
+	.byte	0x1
+	.value	0x49d
+	.long	0x10a
+	.uleb128 0x21
+	.long	.LASF349
+	.byte	0x1
+	.value	0x49d
+	.long	0x10a
+	.uleb128 0x21
+	.long	.LASF350
+	.byte	0x1
+	.value	0x49d
+	.long	0x10a
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x265f
+	.uleb128 0x47
+	.long	0xc4
+	.value	0x270f
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF354
+	.byte	0x1
+	.value	0x555
+	.byte	0x1
+	.long	0x26d6
+	.uleb128 0x22
+	.long	.LASF355
+	.byte	0x1
+	.value	0x555
+	.long	0x104
+	.uleb128 0x25
+	.string	"fp"
+	.byte	0x1
+	.value	0x557
+	.long	0x989
+	.uleb128 0x25
+	.string	"buf"
+	.byte	0x1
+	.value	0x558
+	.long	0x26d6
+	.uleb128 0x25
+	.string	"cp"
+	.byte	0x1
+	.value	0x559
+	.long	0x104
+	.uleb128 0x25
+	.string	"len"
+	.byte	0x1
+	.value	0x55a
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF254
+	.byte	0x1
+	.value	0x55b
+	.long	0x26d6
+	.uleb128 0x21
+	.long	.LASF255
+	.byte	0x1
+	.value	0x55c
+	.long	0x5a
+	.uleb128 0x21
+	.long	.LASF256
+	.byte	0x1
+	.value	0x55c
+	.long	0x5a
+	.uleb128 0x25
+	.string	"tv"
+	.byte	0x1
+	.value	0x55d
+	.long	0x199
+	.byte	0
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x26e7
+	.uleb128 0x47
+	.long	0xc4
+	.value	0x1387
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF356
+	.byte	0x1
+	.value	0x146
+	.byte	0x1
+	.long	0x2735
+	.uleb128 0x21
+	.long	.LASF173
+	.byte	0x1
+	.value	0x148
+	.long	0x989
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x14e
+	.long	0x15e
+	.uleb128 0x21
+	.long	.LASF343
+	.byte	0x1
+	.value	0x14e
+	.long	0x15e
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF344
+	.byte	0x1
+	.value	0x14e
+	.long	0x2569
+	.uleb128 0x21
+	.long	.LASF285
+	.byte	0x1
+	.value	0x14e
+	.long	0x53
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF357
+	.byte	0x1
+	.value	0x62d
+	.byte	0x1
+	.long	0x2789
+	.uleb128 0x20
+	.string	"c"
+	.byte	0x1
+	.value	0x62d
+	.long	0xf0a
+	.uleb128 0x20
+	.string	"tvP"
+	.byte	0x1
+	.value	0x62d
+	.long	0xd11
+	.uleb128 0x25
+	.string	"sz"
+	.byte	0x1
+	.value	0x62f
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF246
+	.byte	0x1
+	.value	0x630
+	.long	0xceb
+	.uleb128 0x25
+	.string	"hc"
+	.byte	0x1
+	.value	0x631
+	.long	0xeb3
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF280
+	.byte	0x1
+	.value	0x68d
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0x23
+	.long	.LASF359
+	.byte	0x1
+	.value	0x756
+	.long	0x53
+	.byte	0x1
+	.long	0x27bb
+	.uleb128 0x20
+	.string	"c"
+	.byte	0x1
+	.value	0x756
+	.long	0xf0a
+	.uleb128 0x21
+	.long	.LASF318
+	.byte	0x1
+	.value	0x758
+	.long	0x53
+	.uleb128 0x25
+	.string	"l"
+	.byte	0x1
+	.value	0x759
+	.long	0x5a
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF360
+	.byte	0x1
+	.value	0x6a7
+	.byte	0x1
+	.long	0x2850
+	.uleb128 0x20
+	.string	"c"
+	.byte	0x1
+	.value	0x6a7
+	.long	0xf0a
+	.uleb128 0x20
+	.string	"tvP"
+	.byte	0x1
+	.value	0x6a7
+	.long	0xd11
+	.uleb128 0x21
+	.long	.LASF361
+	.byte	0x1
+	.value	0x6a9
+	.long	0x15e
+	.uleb128 0x25
+	.string	"sz"
+	.byte	0x1
+	.value	0x6aa
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF362
+	.byte	0x1
+	.value	0x6aa
+	.long	0x53
+	.uleb128 0x21
+	.long	.LASF246
+	.byte	0x1
+	.value	0x6ab
+	.long	0xceb
+	.uleb128 0x21
+	.long	.LASF363
+	.byte	0x1
+	.value	0x6ac
+	.long	0x153
+	.uleb128 0x25
+	.string	"hc"
+	.byte	0x1
+	.value	0x6ad
+	.long	0xeb3
+	.uleb128 0x21
+	.long	.LASF280
+	.byte	0x1
+	.value	0x6ae
+	.long	0x53
+	.uleb128 0x45
+	.long	0x2841
+	.uleb128 0x25
+	.string	"iv"
+	.byte	0x1
+	.value	0x6c2
+	.long	0x2850
+	.byte	0
+	.uleb128 0x46
+	.uleb128 0x21
+	.long	.LASF364
+	.byte	0x1
+	.value	0x707
+	.long	0x53
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.long	0x2c4
+	.long	0x2860
+	.uleb128 0xb
+	.long	0xc4
+	.byte	0x1
+	.byte	0
+	.uleb128 0x1f
+	.long	.LASF365
+	.byte	0x1
+	.value	0x745
+	.byte	0x1
+	.long	0x289a
+	.uleb128 0x20
+	.string	"c"
+	.byte	0x1
+	.value	0x745
+	.long	0xf0a
+	.uleb128 0x20
+	.string	"tvP"
+	.byte	0x1
+	.value	0x745
+	.long	0xd11
+	.uleb128 0x25
+	.string	"buf"
+	.byte	0x1
+	.value	0x747
+	.long	0x289a
+	.uleb128 0x25
+	.string	"r"
+	.byte	0x1
+	.value	0x748
+	.long	0x53
+	.byte	0
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x28ab
+	.uleb128 0x47
+	.long	0xc4
+	.value	0xfff
+	.byte	0
+	.uleb128 0x48
+	.long	.LASF506
+	.byte	0x1
+	.value	0x15e
+	.long	0x53
+	.quad	.LFB47
+	.quad	.LFE47-.LFB47
+	.uleb128 0x1
+	.byte	0x9c
+	.long	0x578f
+	.uleb128 0x2f
+	.long	.LASF339
+	.byte	0x1
+	.value	0x15e
+	.long	0x53
+	.long	.LLST45
+	.uleb128 0x2f
+	.long	.LASF340
+	.byte	0x1
+	.value	0x15e
+	.long	0x4dc
+	.long	.LLST46
+	.uleb128 0x30
+	.string	"cp"
+	.byte	0x1
+	.value	0x160
+	.long	0x104
+	.long	.LLST47
+	.uleb128 0x30
+	.string	"pwd"
+	.byte	0x1
+	.value	0x161
+	.long	0x578f
+	.long	.LLST48
+	.uleb128 0x30
+	.string	"uid"
+	.byte	0x1
+	.value	0x162
+	.long	0x127
+	.long	.LLST49
+	.uleb128 0x30
+	.string	"gid"
+	.byte	0x1
+	.value	0x163
+	.long	0x11c
+	.long	.LLST50
+	.uleb128 0x32
+	.string	"cwd"
+	.byte	0x1
+	.value	0x164
+	.long	0x5795
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -10064
+	.uleb128 0x33
+	.long	.LASF173
+	.byte	0x1
+	.value	0x165
+	.long	0x989
+	.long	.LLST51
+	.uleb128 0x33
+	.long	.LASF366
+	.byte	0x1
+	.value	0x166
+	.long	0x53
+	.long	.LLST52
+	.uleb128 0x33
+	.long	.LASF319
+	.byte	0x1
+	.value	0x167
+	.long	0x53
+	.long	.LLST53
+	.uleb128 0x30
+	.string	"c"
+	.byte	0x1
+	.value	0x168
+	.long	0xf0a
+	.long	.LLST54
+	.uleb128 0x30
+	.string	"hc"
+	.byte	0x1
+	.value	0x169
+	.long	0xeb3
+	.long	.LLST55
+	.uleb128 0x32
+	.string	"sa4"
+	.byte	0x1
+	.value	0x16a
+	.long	0x885
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20336
+	.uleb128 0x32
+	.string	"sa6"
+	.byte	0x1
+	.value	0x16b
+	.long	0x885
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20208
+	.uleb128 0x33
+	.long	.LASF367
+	.byte	0x1
+	.value	0x16c
+	.long	0x53
+	.long	.LLST56
+	.uleb128 0x33
+	.long	.LASF368
+	.byte	0x1
+	.value	0x16c
+	.long	0x53
+	.long	.LLST57
+	.uleb128 0x32
+	.string	"tv"
+	.byte	0x1
+	.value	0x16d
+	.long	0x199
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20080
+	.uleb128 0x49
+	.long	.LASF407
+	.byte	0x1
+	.value	0x25e
+	.long	0x53
+	.long	0x29ee
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x34
+	.long	0x209b
+	.quad	.LBB391
+	.long	.Ldebug_ranges0+0x40
+	.byte	0x1
+	.value	0x179
+	.long	0x3fd9
+	.uleb128 0x35
+	.long	0x20b4
+	.long	.LLST58
+	.uleb128 0x35
+	.long	0x20a8
+	.long	.LLST59
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x40
+	.uleb128 0x40
+	.long	0x20c0
+	.long	.LLST60
+	.uleb128 0x42
+	.quad	.LBB393
+	.quad	.LBE393-.LBB393
+	.long	0x2a4a
+	.uleb128 0x44
+	.long	0x21e9
+	.uleb128 0x40
+	.long	0x21f5
+	.long	.LLST61
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB394
+	.quad	.LBE394-.LBB394
+	.long	0x2a92
+	.uleb128 0x44
+	.long	0x20d1
+	.uleb128 0x40
+	.long	0x20dd
+	.long	.LLST62
+	.uleb128 0x3f
+	.quad	.LBB395
+	.quad	.LBE395-.LBB395
+	.uleb128 0x40
+	.long	0x20ea
+	.long	.LLST63
+	.uleb128 0x40
+	.long	0x20f6
+	.long	.LLST64
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB396
+	.quad	.LBE396-.LBB396
+	.long	0x2ada
+	.uleb128 0x44
+	.long	0x2109
+	.uleb128 0x40
+	.long	0x2115
+	.long	.LLST65
+	.uleb128 0x3f
+	.quad	.LBB397
+	.quad	.LBE397-.LBB397
+	.uleb128 0x40
+	.long	0x2122
+	.long	.LLST66
+	.uleb128 0x40
+	.long	0x212e
+	.long	.LLST67
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x2574
+	.quad	.LBB398
+	.long	.Ldebug_ranges0+0x90
+	.byte	0x1
+	.value	0x379
+	.long	0x3a14
+	.uleb128 0x35
+	.long	0x2581
+	.long	.LLST68
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x90
+	.uleb128 0x40
+	.long	0x258d
+	.long	.LLST69
+	.uleb128 0x4c
+	.long	0x2598
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -10064
+	.uleb128 0x40
+	.long	0x25a4
+	.long	.LLST70
+	.uleb128 0x40
+	.long	0x25af
+	.long	.LLST71
+	.uleb128 0x40
+	.long	0x25bb
+	.long	.LLST72
+	.uleb128 0x40
+	.long	0x25c7
+	.long	.LLST73
+	.uleb128 0x42
+	.quad	.LBB400
+	.quad	.LBE400-.LBB400
+	.long	0x2b8b
+	.uleb128 0x40
+	.long	0x25d8
+	.long	.LLST74
+	.uleb128 0x40
+	.long	0x25e4
+	.long	.LLST75
+	.uleb128 0x40
+	.long	0x25f0
+	.long	.LLST76
+	.uleb128 0x2e
+	.quad	.LVL193
+	.long	0x5e21
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -10064
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC48
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB401
+	.quad	.LBE401-.LBB401
+	.long	0x2bdd
+	.uleb128 0x40
+	.long	0x2602
+	.long	.LLST77
+	.uleb128 0x40
+	.long	0x260e
+	.long	.LLST78
+	.uleb128 0x40
+	.long	0x261a
+	.long	.LLST79
+	.uleb128 0x2e
+	.quad	.LVL197
+	.long	0x5e3f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC48
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB402
+	.quad	.LBE402-.LBB402
+	.byte	0x1
+	.value	0x40d
+	.long	0x2c08
+	.uleb128 0x35
+	.long	0xf29
+	.long	.LLST80
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB404
+	.quad	.LBE404-.LBB404
+	.long	0x2c5a
+	.uleb128 0x40
+	.long	0x2628
+	.long	.LLST81
+	.uleb128 0x40
+	.long	0x2634
+	.long	.LLST82
+	.uleb128 0x40
+	.long	0x2640
+	.long	.LLST83
+	.uleb128 0x2e
+	.quad	.LVL207
+	.long	0x5e21
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC48
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB405
+	.quad	.LBE405-.LBB405
+	.byte	0x1
+	.value	0x412
+	.long	0x2c85
+	.uleb128 0x35
+	.long	0xf4f
+	.long	.LLST84
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0x1138
+	.quad	.LBB407
+	.quad	.LBE407-.LBB407
+	.byte	0x1
+	.value	0x413
+	.long	0x2cc9
+	.uleb128 0x35
+	.long	0x1149
+	.long	.LLST85
+	.uleb128 0x2e
+	.quad	.LVL220
+	.long	0x5e5d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x3a
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB409
+	.quad	.LBE409-.LBB409
+	.byte	0x1
+	.value	0x417
+	.long	0x2cf4
+	.uleb128 0x35
+	.long	0xf4f
+	.long	.LLST86
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x34
+	.long	0xf82
+	.quad	.LBB411
+	.long	.Ldebug_ranges0+0x1d0
+	.byte	0x1
+	.value	0x418
+	.long	0x2d4a
+	.uleb128 0x35
+	.long	0xf93
+	.long	.LLST87
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x1d0
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST88
+	.uleb128 0x2c
+	.quad	.LVL225
+	.long	0x5e7c
+	.long	0x2d3b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL256
+	.long	0x1f87
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0xf36
+	.quad	.LBB414
+	.long	.Ldebug_ranges0+0x200
+	.byte	0x1
+	.value	0x491
+	.long	0x2d88
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.uleb128 0x2e
+	.quad	.LVL230
+	.long	0x1e6a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x4e
+	.long	0xf4f
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB417
+	.quad	.LBE417-.LBB417
+	.byte	0x1
+	.value	0x41c
+	.long	0x2db3
+	.uleb128 0x35
+	.long	0xf29
+	.long	.LLST89
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB419
+	.quad	.LBE419-.LBB419
+	.byte	0x1
+	.value	0x422
+	.long	0x2dda
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB421
+	.quad	.LBE421-.LBB421
+	.byte	0x1
+	.value	0x428
+	.long	0x2e01
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB423
+	.quad	.LBE423-.LBB423
+	.byte	0x1
+	.value	0x429
+	.long	0x2e52
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB424
+	.quad	.LBE424-.LBB424
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST90
+	.uleb128 0x2e
+	.quad	.LVL243
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB425
+	.quad	.LBE425-.LBB425
+	.byte	0x1
+	.value	0x43c
+	.long	0x2e79
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB427
+	.quad	.LBE427-.LBB427
+	.byte	0x1
+	.value	0x437
+	.long	0x2ea0
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB429
+	.quad	.LBE429-.LBB429
+	.byte	0x1
+	.value	0x441
+	.long	0x2ec7
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB431
+	.quad	.LBE431-.LBB431
+	.byte	0x1
+	.value	0x442
+	.long	0x2f18
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB432
+	.quad	.LBE432-.LBB432
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST91
+	.uleb128 0x2e
+	.quad	.LVL254
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0xf10
+	.quad	.LBB434
+	.long	.Ldebug_ranges0+0x230
+	.byte	0x1
+	.value	0x47d
+	.long	0x2f4f
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.uleb128 0x2e
+	.quad	.LVL257
+	.long	0x1e00
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB437
+	.quad	.LBE437-.LBB437
+	.byte	0x1
+	.value	0x446
+	.long	0x2f76
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB439
+	.quad	.LBE439-.LBB439
+	.byte	0x1
+	.value	0x447
+	.long	0x2fc7
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB440
+	.quad	.LBE440-.LBB440
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST92
+	.uleb128 0x2e
+	.quad	.LVL261
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB441
+	.quad	.LBE441-.LBB441
+	.byte	0x1
+	.value	0x44b
+	.long	0x2fee
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0x1138
+	.quad	.LBB443
+	.quad	.LBE443-.LBB443
+	.byte	0x1
+	.value	0x44c
+	.long	0x302e
+	.uleb128 0x4d
+	.long	0x1149
+	.uleb128 0x2e
+	.quad	.LVL323
+	.long	0x5e5d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x3a
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB445
+	.quad	.LBE445-.LBB445
+	.byte	0x1
+	.value	0x450
+	.long	0x3055
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB447
+	.quad	.LBE447-.LBB447
+	.byte	0x1
+	.value	0x451
+	.long	0x30a6
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB448
+	.quad	.LBE448-.LBB448
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST93
+	.uleb128 0x2e
+	.quad	.LVL330
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB449
+	.quad	.LBE449-.LBB449
+	.byte	0x1
+	.value	0x455
+	.long	0x30cd
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB451
+	.quad	.LBE451-.LBB451
+	.byte	0x1
+	.value	0x45a
+	.long	0x30f4
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB453
+	.quad	.LBE453-.LBB453
+	.byte	0x1
+	.value	0x45b
+	.long	0x3145
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB454
+	.quad	.LBE454-.LBB454
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST94
+	.uleb128 0x2e
+	.quad	.LVL486
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB455
+	.quad	.LBE455-.LBB455
+	.byte	0x1
+	.value	0x45f
+	.long	0x316c
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB457
+	.quad	.LBE457-.LBB457
+	.byte	0x1
+	.value	0x460
+	.long	0x31bd
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB458
+	.quad	.LBE458-.LBB458
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST95
+	.uleb128 0x2e
+	.quad	.LVL494
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB459
+	.quad	.LBE459-.LBB459
+	.byte	0x1
+	.value	0x464
+	.long	0x31e4
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB461
+	.quad	.LBE461-.LBB461
+	.byte	0x1
+	.value	0x465
+	.long	0x3235
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB462
+	.quad	.LBE462-.LBB462
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST96
+	.uleb128 0x2e
+	.quad	.LVL504
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB463
+	.quad	.LBE463-.LBB463
+	.byte	0x1
+	.value	0x469
+	.long	0x325c
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB465
+	.quad	.LBE465-.LBB465
+	.byte	0x1
+	.value	0x46a
+	.long	0x32ad
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB466
+	.quad	.LBE466-.LBB466
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST97
+	.uleb128 0x2e
+	.quad	.LVL511
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB467
+	.quad	.LBE467-.LBB467
+	.byte	0x1
+	.value	0x46e
+	.long	0x32d4
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB469
+	.quad	.LBE469-.LBB469
+	.byte	0x1
+	.value	0x473
+	.long	0x32fb
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf10
+	.quad	.LBB471
+	.quad	.LBE471-.LBB471
+	.byte	0x1
+	.value	0x478
+	.long	0x3322
+	.uleb128 0x4d
+	.long	0xf29
+	.uleb128 0x4d
+	.long	0xf1d
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB474
+	.quad	.LBE474-.LBB474
+	.byte	0x1
+	.value	0x482
+	.long	0x3349
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB476
+	.quad	.LBE476-.LBB476
+	.byte	0x1
+	.value	0x483
+	.long	0x339a
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB477
+	.quad	.LBE477-.LBB477
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST98
+	.uleb128 0x2e
+	.quad	.LVL548
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB478
+	.quad	.LBE478-.LBB478
+	.byte	0x1
+	.value	0x487
+	.long	0x33c1
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB480
+	.quad	.LBE480-.LBB480
+	.byte	0x1
+	.value	0x488
+	.long	0x3412
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB481
+	.quad	.LBE481-.LBB481
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST99
+	.uleb128 0x2e
+	.quad	.LVL554
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf36
+	.quad	.LBB482
+	.quad	.LBE482-.LBB482
+	.byte	0x1
+	.value	0x48c
+	.long	0x3439
+	.uleb128 0x4d
+	.long	0xf4f
+	.uleb128 0x4d
+	.long	0xf43
+	.byte	0
+	.uleb128 0x3d
+	.long	0xf82
+	.quad	.LBB484
+	.quad	.LBE484-.LBB484
+	.byte	0x1
+	.value	0x48d
+	.long	0x348a
+	.uleb128 0x4d
+	.long	0xf93
+	.uleb128 0x3f
+	.quad	.LBB485
+	.quad	.LBE485-.LBB485
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST100
+	.uleb128 0x2e
+	.quad	.LVL564
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0x1138
+	.quad	.LBB487
+	.quad	.LBE487-.LBB487
+	.byte	0x1
+	.value	0x492
+	.long	0x34ca
+	.uleb128 0x4d
+	.long	0x1149
+	.uleb128 0x2e
+	.quad	.LVL574
+	.long	0x5e5d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x3a
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL186
+	.long	0x5e92
+	.long	0x34ef
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC47
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL189
+	.long	0x5ead
+	.long	0x3516
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -10064
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x2710
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7e
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL190
+	.long	0x5ecd
+	.long	0x3536
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -10064
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x23
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL201
+	.long	0x5ecd
+	.long	0x3554
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x3d
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL203
+	.long	0x5eeb
+	.long	0x3579
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC49
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL217
+	.long	0x5eeb
+	.long	0x359e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC50
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL222
+	.long	0x5eeb
+	.long	0x35c3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC51
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL227
+	.long	0x5eeb
+	.long	0x35e8
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC49
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL228
+	.long	0x5eeb
+	.long	0x360d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC50
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL231
+	.long	0x5eeb
+	.long	0x3632
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC52
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL235
+	.long	0x5eeb
+	.long	0x3657
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC51
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL236
+	.long	0x5eeb
+	.long	0x367c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC52
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL238
+	.long	0x5eeb
+	.long	0x36a1
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC53
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL240
+	.long	0x5eeb
+	.long	0x36c6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC54
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL245
+	.long	0x5eeb
+	.long	0x36eb
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC55
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL246
+	.long	0x5eeb
+	.long	0x3710
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC56
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL249
+	.long	0x5eeb
+	.long	0x3735
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC57
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL250
+	.long	0x5eeb
+	.long	0x375a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC58
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL251
+	.long	0x5eeb
+	.long	0x377f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC59
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL258
+	.long	0x5eeb
+	.long	0x37a4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC60
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL263
+	.long	0x5f06
+	.long	0x37bc
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7e
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL318
+	.long	0x5f1b
+	.long	0x37d4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL319
+	.long	0x5b95
+	.long	0x37eb
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL320
+	.long	0x5eeb
+	.long	0x3810
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC61
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL327
+	.long	0x5eeb
+	.long	0x3835
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC62
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL478
+	.long	0x5eeb
+	.long	0x385a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC63
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL483
+	.long	0x5eeb
+	.long	0x387f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC64
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL491
+	.long	0x5eeb
+	.long	0x38a4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC65
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL501
+	.long	0x5eeb
+	.long	0x38c9
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC66
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL508
+	.long	0x5eeb
+	.long	0x38ee
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC67
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL518
+	.long	0x5eeb
+	.long	0x3913
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC68
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL528
+	.long	0x5eeb
+	.long	0x3938
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC69
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL534
+	.long	0x5eeb
+	.long	0x395d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC70
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL540
+	.long	0x5eeb
+	.long	0x3982
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC71
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL545
+	.long	0x5eeb
+	.long	0x39a7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC72
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL551
+	.long	0x5eeb
+	.long	0x39cc
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC73
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL561
+	.long	0x5eeb
+	.long	0x39f1
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC74
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL571
+	.long	0x5eeb
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC75
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB508
+	.quad	.LBE508-.LBB508
+	.long	0x3a5c
+	.uleb128 0x44
+	.long	0x2141
+	.uleb128 0x40
+	.long	0x214d
+	.long	.LLST101
+	.uleb128 0x3f
+	.quad	.LBB509
+	.quad	.LBE509-.LBB509
+	.uleb128 0x40
+	.long	0x215a
+	.long	.LLST102
+	.uleb128 0x40
+	.long	0x2166
+	.long	.LLST103
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0x1138
+	.quad	.LBB510
+	.quad	.LBE510-.LBB510
+	.byte	0x1
+	.value	0x37e
+	.long	0x3a9a
+	.uleb128 0x35
+	.long	0x1149
+	.long	.LLST104
+	.uleb128 0x2e
+	.quad	.LVL213
+	.long	0x5e5d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x3a
+	.byte	0
+	.byte	0
+	.uleb128 0x4f
+	.long	.Ldebug_ranges0+0x260
+	.long	0x3ab2
+	.uleb128 0x44
+	.long	0x243b
+	.uleb128 0x40
+	.long	0x2447
+	.long	.LLST105
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB514
+	.quad	.LBE514-.LBB514
+	.long	0x3afa
+	.uleb128 0x44
+	.long	0x2179
+	.uleb128 0x40
+	.long	0x2185
+	.long	.LLST106
+	.uleb128 0x3f
+	.quad	.LBB515
+	.quad	.LBE515-.LBB515
+	.uleb128 0x40
+	.long	0x2192
+	.long	.LLST107
+	.uleb128 0x40
+	.long	0x219e
+	.long	.LLST108
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB517
+	.quad	.LBE517-.LBB517
+	.long	0x3b42
+	.uleb128 0x44
+	.long	0x21b1
+	.uleb128 0x40
+	.long	0x21bd
+	.long	.LLST109
+	.uleb128 0x3f
+	.quad	.LBB518
+	.quad	.LBE518-.LBB518
+	.uleb128 0x40
+	.long	0x21ca
+	.long	.LLST110
+	.uleb128 0x40
+	.long	0x21d6
+	.long	.LLST111
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB520
+	.quad	.LBE520-.LBB520
+	.long	0x3b8a
+	.uleb128 0x44
+	.long	0x2207
+	.uleb128 0x40
+	.long	0x2213
+	.long	.LLST112
+	.uleb128 0x3f
+	.quad	.LBB521
+	.quad	.LBE521-.LBB521
+	.uleb128 0x40
+	.long	0x2220
+	.long	.LLST113
+	.uleb128 0x40
+	.long	0x222c
+	.long	.LLST114
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB524
+	.quad	.LBE524-.LBB524
+	.long	0x3bd2
+	.uleb128 0x44
+	.long	0x223f
+	.uleb128 0x40
+	.long	0x224b
+	.long	.LLST115
+	.uleb128 0x3f
+	.quad	.LBB525
+	.quad	.LBE525-.LBB525
+	.uleb128 0x40
+	.long	0x2258
+	.long	.LLST116
+	.uleb128 0x40
+	.long	0x2264
+	.long	.LLST117
+	.byte	0
+	.byte	0
+	.uleb128 0x4f
+	.long	.Ldebug_ranges0+0x290
+	.long	0x3bea
+	.uleb128 0x44
+	.long	0x2277
+	.uleb128 0x40
+	.long	0x2283
+	.long	.LLST118
+	.byte	0
+	.uleb128 0x4f
+	.long	.Ldebug_ranges0+0x2c0
+	.long	0x3c1a
+	.uleb128 0x44
+	.long	0x2295
+	.uleb128 0x40
+	.long	0x22a1
+	.long	.LLST119
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x2c0
+	.uleb128 0x40
+	.long	0x22ae
+	.long	.LLST120
+	.uleb128 0x40
+	.long	0x22ba
+	.long	.LLST121
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB537
+	.quad	.LBE537-.LBB537
+	.long	0x3c3e
+	.uleb128 0x44
+	.long	0x23e5
+	.uleb128 0x40
+	.long	0x23f1
+	.long	.LLST122
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB538
+	.quad	.LBE538-.LBB538
+	.long	0x3c86
+	.uleb128 0x44
+	.long	0x22cd
+	.uleb128 0x40
+	.long	0x22d9
+	.long	.LLST123
+	.uleb128 0x3f
+	.quad	.LBB539
+	.quad	.LBE539-.LBB539
+	.uleb128 0x40
+	.long	0x22e6
+	.long	.LLST124
+	.uleb128 0x40
+	.long	0x22f2
+	.long	.LLST125
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB541
+	.quad	.LBE541-.LBB541
+	.long	0x3cce
+	.uleb128 0x44
+	.long	0x2403
+	.uleb128 0x40
+	.long	0x240f
+	.long	.LLST126
+	.uleb128 0x3f
+	.quad	.LBB542
+	.quad	.LBE542-.LBB542
+	.uleb128 0x40
+	.long	0x241c
+	.long	.LLST127
+	.uleb128 0x40
+	.long	0x2428
+	.long	.LLST128
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB543
+	.quad	.LBE543-.LBB543
+	.long	0x3d16
+	.uleb128 0x44
+	.long	0x2305
+	.uleb128 0x40
+	.long	0x2311
+	.long	.LLST129
+	.uleb128 0x3f
+	.quad	.LBB544
+	.quad	.LBE544-.LBB544
+	.uleb128 0x40
+	.long	0x231e
+	.long	.LLST130
+	.uleb128 0x40
+	.long	0x232a
+	.long	.LLST131
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB546
+	.quad	.LBE546-.LBB546
+	.long	0x3d5e
+	.uleb128 0x44
+	.long	0x233d
+	.uleb128 0x40
+	.long	0x2349
+	.long	.LLST132
+	.uleb128 0x3f
+	.quad	.LBB547
+	.quad	.LBE547-.LBB547
+	.uleb128 0x40
+	.long	0x2356
+	.long	.LLST133
+	.uleb128 0x40
+	.long	0x2362
+	.long	.LLST134
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB549
+	.quad	.LBE549-.LBB549
+	.long	0x3da6
+	.uleb128 0x44
+	.long	0x2375
+	.uleb128 0x40
+	.long	0x2381
+	.long	.LLST135
+	.uleb128 0x3f
+	.quad	.LBB550
+	.quad	.LBE550-.LBB550
+	.uleb128 0x40
+	.long	0x238e
+	.long	.LLST136
+	.uleb128 0x40
+	.long	0x239a
+	.long	.LLST137
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB552
+	.quad	.LBE552-.LBB552
+	.long	0x3dee
+	.uleb128 0x44
+	.long	0x23ad
+	.uleb128 0x40
+	.long	0x23b9
+	.long	.LLST138
+	.uleb128 0x3f
+	.quad	.LBB553
+	.quad	.LBE553-.LBB553
+	.uleb128 0x40
+	.long	0x23c6
+	.long	.LLST139
+	.uleb128 0x40
+	.long	0x23d2
+	.long	.LLST140
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB557
+	.quad	.LBE557-.LBB557
+	.long	0x3e36
+	.uleb128 0x44
+	.long	0x2459
+	.uleb128 0x40
+	.long	0x2465
+	.long	.LLST141
+	.uleb128 0x3f
+	.quad	.LBB558
+	.quad	.LBE558-.LBB558
+	.uleb128 0x40
+	.long	0x2472
+	.long	.LLST142
+	.uleb128 0x40
+	.long	0x247e
+	.long	.LLST143
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB560
+	.quad	.LBE560-.LBB560
+	.long	0x3e7e
+	.uleb128 0x44
+	.long	0x2491
+	.uleb128 0x40
+	.long	0x249d
+	.long	.LLST144
+	.uleb128 0x3f
+	.quad	.LBB561
+	.quad	.LBE561-.LBB561
+	.uleb128 0x40
+	.long	0x24aa
+	.long	.LLST145
+	.uleb128 0x40
+	.long	0x24b6
+	.long	.LLST146
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB563
+	.quad	.LBE563-.LBB563
+	.long	0x3ec6
+	.uleb128 0x44
+	.long	0x24c9
+	.uleb128 0x40
+	.long	0x24d5
+	.long	.LLST147
+	.uleb128 0x3f
+	.quad	.LBB564
+	.quad	.LBE564-.LBB564
+	.uleb128 0x40
+	.long	0x24e2
+	.long	.LLST148
+	.uleb128 0x40
+	.long	0x24ee
+	.long	.LLST149
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB566
+	.quad	.LBE566-.LBB566
+	.long	0x3f0e
+	.uleb128 0x44
+	.long	0x2501
+	.uleb128 0x40
+	.long	0x250d
+	.long	.LLST150
+	.uleb128 0x3f
+	.quad	.LBB567
+	.quad	.LBE567-.LBB567
+	.uleb128 0x40
+	.long	0x251a
+	.long	.LLST151
+	.uleb128 0x40
+	.long	0x2526
+	.long	.LLST152
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB568
+	.quad	.LBE568-.LBB568
+	.long	0x3f56
+	.uleb128 0x44
+	.long	0x2535
+	.uleb128 0x40
+	.long	0x2541
+	.long	.LLST153
+	.uleb128 0x3f
+	.quad	.LBB569
+	.quad	.LBE569-.LBB569
+	.uleb128 0x40
+	.long	0x254e
+	.long	.LLST154
+	.uleb128 0x40
+	.long	0x255a
+	.long	.LLST155
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.long	0x1138
+	.quad	.LBB570
+	.quad	.LBE570-.LBB570
+	.byte	0x1
+	.value	0x3cb
+	.long	0x3f94
+	.uleb128 0x35
+	.long	0x1149
+	.long	.LLST156
+	.uleb128 0x2e
+	.quad	.LVL587
+	.long	0x5e5d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x3a
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL215
+	.long	0x5f2d
+	.long	0x3fb3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC46
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL216
+	.long	0x5b95
+	.long	0x3fca
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL266
+	.long	0x12fc
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x1194
+	.quad	.LBB575
+	.long	.Ldebug_ranges0+0x300
+	.byte	0x1
+	.value	0x17f
+	.long	0x425d
+	.uleb128 0x35
+	.long	0x11ad
+	.long	.LLST157
+	.uleb128 0x35
+	.long	0x11d1
+	.long	.LLST157
+	.uleb128 0x35
+	.long	0x11dd
+	.long	.LLST159
+	.uleb128 0x35
+	.long	0x11c5
+	.long	.LLST160
+	.uleb128 0x35
+	.long	0x11b9
+	.long	.LLST161
+	.uleb128 0x35
+	.long	0x11a1
+	.long	.LLST162
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x300
+	.uleb128 0x4c
+	.long	0x11e9
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -10064
+	.uleb128 0x4c
+	.long	0x11f5
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x40
+	.long	0x1201
+	.long	.LLST163
+	.uleb128 0x4c
+	.long	0x120d
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20080
+	.uleb128 0x40
+	.long	0x1218
+	.long	.LLST164
+	.uleb128 0x40
+	.long	0x1224
+	.long	.LLST165
+	.uleb128 0x40
+	.long	0x1230
+	.long	.LLST166
+	.uleb128 0x2c
+	.quad	.LVL270
+	.long	0x5f46
+	.long	0x409a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x3a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC81
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL271
+	.long	0x5f67
+	.long	0x40c0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL285
+	.long	0x5f9d
+	.long	0x40da
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL288
+	.long	0x5f9d
+	.long	0x40f4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL289
+	.long	0x5fbc
+	.long	0x410c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL332
+	.long	0x5fce
+	.long	0x4124
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL333
+	.long	0x5bc2
+	.long	0x4148
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC82
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL334
+	.long	0x5fce
+	.long	0x4160
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL335
+	.long	0x5b79
+	.long	0x417f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC83
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL336
+	.long	0x5b95
+	.long	0x4196
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL337
+	.long	0x5fbc
+	.long	0x41ad
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL465
+	.long	0x5bc2
+	.long	0x41d7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC84
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x80
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL466
+	.long	0x5b95
+	.long	0x41ee
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL467
+	.long	0x5fbc
+	.long	0x4206
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL470
+	.long	0x5bc2
+	.long	0x4230
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC84
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x80
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL471
+	.long	0x5b95
+	.long	0x4247
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL481
+	.long	0x5fbc
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x265f
+	.quad	.LBB582
+	.long	.Ldebug_ranges0+0x360
+	.byte	0x1
+	.value	0x18c
+	.long	0x4588
+	.uleb128 0x35
+	.long	0x266c
+	.long	.LLST167
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x360
+	.uleb128 0x40
+	.long	0x2678
+	.long	.LLST168
+	.uleb128 0x4c
+	.long	0x2683
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20080
+	.uleb128 0x40
+	.long	0x268f
+	.long	.LLST169
+	.uleb128 0x40
+	.long	0x269a
+	.long	.LLST170
+	.uleb128 0x4c
+	.long	0x26a6
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x4c
+	.long	0x26b2
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20368
+	.uleb128 0x4c
+	.long	0x26be
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20360
+	.uleb128 0x4c
+	.long	0x26ca
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20352
+	.uleb128 0x34
+	.long	0xf82
+	.quad	.LBB584
+	.long	.Ldebug_ranges0+0x3b0
+	.byte	0x1
+	.value	0x5a8
+	.long	0x4317
+	.uleb128 0x35
+	.long	0xf93
+	.long	.LLST171
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x3b0
+	.uleb128 0x40
+	.long	0xf9f
+	.long	.LLST172
+	.uleb128 0x2e
+	.quad	.LVL311
+	.long	0x5e7c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL293
+	.long	0x5e92
+	.long	0x433c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC47
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL295
+	.long	0x5c1e
+	.long	0x435b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20352
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL296
+	.long	0x5ead
+	.long	0x4380
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x1388
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL297
+	.long	0x5ecd
+	.long	0x439e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x23
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL303
+	.long	0x5fe4
+	.long	0x43db
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC88
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20360
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20368
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL304
+	.long	0x6004
+	.long	0x43fe
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x5
+	.byte	0x91
+	.sleb128 -20392
+	.byte	0x6
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL306
+	.long	0x6004
+	.uleb128 0x2c
+	.quad	.LVL307
+	.long	0x601e
+	.long	0x4432
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC92
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL309
+	.long	0x5cc2
+	.long	0x444b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x12c0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL340
+	.long	0x5b79
+	.uleb128 0x2c
+	.quad	.LVL343
+	.long	0x5fe4
+	.long	0x448d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC89
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -20368
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL344
+	.long	0x5f06
+	.long	0x44a5
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL456
+	.long	0x5bc2
+	.long	0x44d5
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC90
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL457
+	.long	0x5b79
+	.long	0x4500
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC91
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL458
+	.long	0x5bc2
+	.long	0x4524
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC93
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL459
+	.long	0x6039
+	.uleb128 0x2c
+	.quad	.LVL462
+	.long	0x5bc2
+	.long	0x455b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC87
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL463
+	.long	0x5f1b
+	.long	0x4573
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL464
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB595
+	.quad	.LBE595-.LBB595
+	.long	0x45ba
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x1a1
+	.long	0x15e
+	.uleb128 0x33
+	.long	.LASF343
+	.byte	0x1
+	.value	0x1a1
+	.long	0x15e
+	.long	.LLST173
+	.byte	0
+	.uleb128 0x4f
+	.long	.Ldebug_ranges0+0x3e0
+	.long	0x4674
+	.uleb128 0x33
+	.long	.LASF369
+	.byte	0x1
+	.value	0x214
+	.long	0x989
+	.long	.LLST174
+	.uleb128 0x2c
+	.quad	.LVL356
+	.long	0x5e92
+	.long	0x45f2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC106
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL358
+	.long	0x6054
+	.uleb128 0x2c
+	.quad	.LVL359
+	.long	0x5b79
+	.long	0x4624
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC107
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL360
+	.long	0x5f06
+	.long	0x463c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL612
+	.long	0x5bc2
+	.long	0x4660
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC87
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL613
+	.long	0x5b95
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x27bb
+	.quad	.LBB597
+	.long	.Ldebug_ranges0+0x410
+	.byte	0x1
+	.value	0x323
+	.long	0x4831
+	.uleb128 0x35
+	.long	0x27d2
+	.long	.LLST175
+	.uleb128 0x35
+	.long	0x27c8
+	.long	.LLST176
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x410
+	.uleb128 0x40
+	.long	0x27de
+	.long	.LLST177
+	.uleb128 0x40
+	.long	0x27ea
+	.long	.LLST178
+	.uleb128 0x40
+	.long	0x27f5
+	.long	.LLST179
+	.uleb128 0x44
+	.long	0x2801
+	.uleb128 0x40
+	.long	0x280d
+	.long	.LLST180
+	.uleb128 0x40
+	.long	0x2819
+	.long	.LLST181
+	.uleb128 0x40
+	.long	0x2824
+	.long	.LLST182
+	.uleb128 0x42
+	.quad	.LBB599
+	.quad	.LBE599-.LBB599
+	.long	0x4719
+	.uleb128 0x4c
+	.long	0x2835
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2e
+	.quad	.LVL704
+	.long	0x6060
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x32
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB600
+	.quad	.LBE600-.LBB600
+	.long	0x474c
+	.uleb128 0x40
+	.long	0x2842
+	.long	.LLST183
+	.uleb128 0x2e
+	.quad	.LVL707
+	.long	0x5f9d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7e
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL614
+	.long	0x5cd8
+	.uleb128 0x2c
+	.quad	.LVL615
+	.long	0x5bc2
+	.long	0x477d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC130
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL617
+	.long	0x5d2a
+	.long	0x47ad
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	wakeup_connection
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL619
+	.long	0x5bc2
+	.long	0x47c4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL687
+	.long	0x608a
+	.uleb128 0x37
+	.quad	.LVL695
+	.long	0x5cd8
+	.uleb128 0x2c
+	.quad	.LVL698
+	.long	0x5bc2
+	.long	0x4802
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC130
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL700
+	.long	0x5c3e
+	.uleb128 0x2e
+	.quad	.LVL701
+	.long	0x5bc2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC132
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x2735
+	.quad	.LBB603
+	.long	.Ldebug_ranges0+0x450
+	.byte	0x1
+	.value	0x322
+	.long	0x4a1f
+	.uleb128 0x35
+	.long	0x274c
+	.long	.LLST184
+	.uleb128 0x35
+	.long	0x2742
+	.long	.LLST185
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x450
+	.uleb128 0x40
+	.long	0x2758
+	.long	.LLST186
+	.uleb128 0x44
+	.long	0x2763
+	.uleb128 0x40
+	.long	0x276f
+	.long	.LLST187
+	.uleb128 0x3d
+	.long	0x1156
+	.quad	.LBB605
+	.quad	.LBE605-.LBB605
+	.byte	0x1
+	.value	0x639
+	.long	0x48cd
+	.uleb128 0x35
+	.long	0x116d
+	.long	.LLST188
+	.uleb128 0x35
+	.long	0x1163
+	.long	.LLST189
+	.uleb128 0x37
+	.quad	.LVL417
+	.long	0x5d53
+	.uleb128 0x2e
+	.quad	.LVL418
+	.long	0x1935
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x2789
+	.quad	.LBB607
+	.long	.Ldebug_ranges0+0x4a0
+	.byte	0x1
+	.value	0x66e
+	.long	0x4934
+	.uleb128 0x35
+	.long	0x279a
+	.long	.LLST190
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x4a0
+	.uleb128 0x40
+	.long	0x27a4
+	.long	.LLST191
+	.uleb128 0x40
+	.long	0x27b0
+	.long	.LLST192
+	.uleb128 0x37
+	.quad	.LVL432
+	.long	0x60aa
+	.uleb128 0x2e
+	.quad	.LVL444
+	.long	0x5bc2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC129
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB611
+	.quad	.LBE611-.LBB611
+	.long	0x4953
+	.uleb128 0x40
+	.long	0x277b
+	.long	.LLST193
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL415
+	.long	0x5d7a
+	.long	0x496b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL424
+	.long	0x60c4
+	.long	0x498b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0x7c
+	.sleb128 144
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0x7c
+	.sleb128 152
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL425
+	.long	0x60e6
+	.uleb128 0x2c
+	.quad	.LVL427
+	.long	0x6106
+	.long	0x49b0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL428
+	.long	0x611b
+	.long	0x49c8
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL439
+	.long	0x6130
+	.long	0x49e6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL441
+	.long	0x5cd8
+	.uleb128 0x2c
+	.quad	.LVL442
+	.long	0x5ba7
+	.long	0x4a10
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL674
+	.long	0x5c3e
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB621
+	.quad	.LBE621-.LBB621
+	.long	0x4a83
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x1a6
+	.long	0x15e
+	.uleb128 0x33
+	.long	.LASF343
+	.byte	0x1
+	.value	0x1a6
+	.long	0x15e
+	.long	.LLST194
+	.uleb128 0x3f
+	.quad	.LBB622
+	.quad	.LBE622-.LBB622
+	.uleb128 0x33
+	.long	.LASF344
+	.byte	0x1
+	.value	0x1a6
+	.long	0x2569
+	.long	.LLST195
+	.uleb128 0x33
+	.long	.LASF285
+	.byte	0x1
+	.value	0x1a6
+	.long	0x53
+	.long	.LLST196
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.quad	.LBB625
+	.quad	.LBE625-.LBB625
+	.long	0x4ae7
+	.uleb128 0x21
+	.long	.LASF342
+	.byte	0x1
+	.value	0x237
+	.long	0x15e
+	.uleb128 0x33
+	.long	.LASF343
+	.byte	0x1
+	.value	0x237
+	.long	0x15e
+	.long	.LLST197
+	.uleb128 0x3f
+	.quad	.LBB626
+	.quad	.LBE626-.LBB626
+	.uleb128 0x33
+	.long	.LASF344
+	.byte	0x1
+	.value	0x237
+	.long	0x2569
+	.long	.LLST198
+	.uleb128 0x33
+	.long	.LASF285
+	.byte	0x1
+	.value	0x237
+	.long	0x53
+	.long	.LLST199
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x26e7
+	.quad	.LBB627
+	.long	.Ldebug_ranges0+0x4d0
+	.byte	0x1
+	.value	0x2ea
+	.long	0x4c06
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x4d0
+	.uleb128 0x40
+	.long	0x26f4
+	.long	.LLST200
+	.uleb128 0x42
+	.quad	.LBB629
+	.quad	.LBE629-.LBB629
+	.long	0x4b55
+	.uleb128 0x44
+	.long	0x2701
+	.uleb128 0x40
+	.long	0x270d
+	.long	.LLST201
+	.uleb128 0x3f
+	.quad	.LBB630
+	.quad	.LBE630-.LBB630
+	.uleb128 0x40
+	.long	0x271a
+	.long	.LLST202
+	.uleb128 0x40
+	.long	0x2726
+	.long	.LLST203
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL655
+	.long	0x5bc2
+	.long	0x4b79
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x35
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC126
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL656
+	.long	0x5e92
+	.long	0x4b98
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC98
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL658
+	.long	0x614a
+	.long	0x4bb0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL659
+	.long	0x6160
+	.long	0x4bcc
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL660
+	.long	0x617b
+	.long	0x4be4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2e
+	.quad	.LVL672
+	.long	0x5bc2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC127
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.long	0x2860
+	.quad	.LBB636
+	.long	.Ldebug_ranges0+0x510
+	.byte	0x1
+	.value	0x324
+	.long	0x4c96
+	.uleb128 0x35
+	.long	0x2877
+	.long	.LLST204
+	.uleb128 0x35
+	.long	0x286d
+	.long	.LLST205
+	.uleb128 0x4b
+	.long	.Ldebug_ranges0+0x510
+	.uleb128 0x4c
+	.long	0x2883
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x40
+	.long	0x288f
+	.long	.LLST206
+	.uleb128 0x2c
+	.quad	.LVL681
+	.long	0x60e6
+	.long	0x4c69
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x4
+	.byte	0x91
+	.sleb128 -15072
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x1000
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL683
+	.long	0x1886
+	.long	0x4c87
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL710
+	.long	0x5c3e
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL169
+	.long	0x6191
+	.long	0x4cb4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x8
+	.byte	0x2f
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL171
+	.long	0x61ac
+	.long	0x4cd6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x39
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x48
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL269
+	.long	0x61c7
+	.uleb128 0x2c
+	.quad	.LVL338
+	.long	0x5bc2
+	.long	0x4d07
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC85
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL341
+	.long	0x5b95
+	.long	0x4d1e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL345
+	.long	0x61cf
+	.uleb128 0x37
+	.quad	.LVL350
+	.long	0x5ded
+	.uleb128 0x2c
+	.quad	.LVL351
+	.long	0x61db
+	.long	0x4d57
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x1000
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL352
+	.long	0x5f06
+	.uleb128 0x37
+	.quad	.LVL353
+	.long	0x5f06
+	.uleb128 0x37
+	.quad	.LVL354
+	.long	0x5f06
+	.uleb128 0x2c
+	.quad	.LVL355
+	.long	0x61f6
+	.long	0x4d9a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL361
+	.long	0x6211
+	.uleb128 0x37
+	.quad	.LVL362
+	.long	0x5ded
+	.uleb128 0x2c
+	.quad	.LVL363
+	.long	0x621c
+	.long	0x4dd8
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x3f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_term
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL364
+	.long	0x621c
+	.long	0x4dfc
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_term
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL365
+	.long	0x621c
+	.long	0x4e20
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x41
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_chld
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL366
+	.long	0x621c
+	.long	0x4e3c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x3d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL367
+	.long	0x621c
+	.long	0x4e60
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_hup
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL368
+	.long	0x621c
+	.long	0x4e84
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x3a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_usr1
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL369
+	.long	0x621c
+	.long	0x4ea8
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x3c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_usr2
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL370
+	.long	0x621c
+	.long	0x4ecc
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x3e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	handle_alrm
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL371
+	.long	0x5e0b
+	.long	0x4ee5
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x168
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL372
+	.long	0x622e
+	.uleb128 0x2c
+	.quad	.LVL377
+	.long	0x6235
+	.long	0x4f2f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x12
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x30
+	.byte	0x91
+	.sleb128 -20380
+	.byte	0x94
+	.byte	0x4
+	.byte	0x30
+	.byte	0x2e
+	.byte	0x28
+	.value	0x1
+	.byte	0x16
+	.byte	0x13
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x11
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x30
+	.byte	0x7e
+	.sleb128 0
+	.byte	0x8
+	.byte	0x20
+	.byte	0x24
+	.byte	0x30
+	.byte	0x2e
+	.byte	0x28
+	.value	0x1
+	.byte	0x16
+	.byte	0x13
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL378
+	.long	0x5d2a
+	.long	0x4f61
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	occasional
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x5
+	.byte	0xc
+	.long	0x1d4c0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL379
+	.long	0x5d2a
+	.long	0x4f91
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	idle
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x1388
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL380
+	.long	0x5d2a
+	.long	0x4fc1
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	update_throttles
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x3
+	.byte	0xa
+	.value	0x7d0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL381
+	.long	0x5d2a
+	.long	0x4ff3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	show_stats
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x52
+	.uleb128 0x5
+	.byte	0xc
+	.long	0x36ee80
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x58
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL382
+	.long	0x629f
+	.long	0x500a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL383
+	.long	0x61cf
+	.uleb128 0x2c
+	.quad	.LVL384
+	.long	0x62ba
+	.long	0x5033
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL385
+	.long	0x62df
+	.long	0x504b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL386
+	.long	0x62f5
+	.long	0x5063
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL387
+	.long	0x5bc2
+	.long	0x5087
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC122
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL388
+	.long	0x630f
+	.long	0x50a3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x6
+	.byte	0x91
+	.sleb128 -20392
+	.byte	0x94
+	.byte	0x4
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL389
+	.long	0x5bc2
+	.long	0x50c7
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC124
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL391
+	.long	0x5cc2
+	.long	0x50df
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL397
+	.long	0x5ba7
+	.long	0x50fb
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL398
+	.long	0x5ba7
+	.long	0x5117
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x30
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL400
+	.long	0x6325
+	.long	0x512f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL401
+	.long	0x6336
+	.long	0x5147
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL402
+	.long	0x634b
+	.uleb128 0x2c
+	.quad	.LVL404
+	.long	0x6325
+	.long	0x516c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL405
+	.long	0x6360
+	.uleb128 0x37
+	.quad	.LVL406
+	.long	0x6360
+	.uleb128 0x37
+	.quad	.LVL408
+	.long	0x6375
+	.uleb128 0x37
+	.quad	.LVL412
+	.long	0x6360
+	.uleb128 0x2c
+	.quad	.LVL420
+	.long	0x5bc2
+	.long	0x51c4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC119
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL421
+	.long	0x5b95
+	.long	0x51db
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL422
+	.long	0x1704
+	.long	0x51f3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL446
+	.long	0x6380
+	.uleb128 0x2c
+	.quad	.LVL449
+	.long	0x5bc2
+	.long	0x5224
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC103
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL450
+	.long	0x5f1b
+	.long	0x5243
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC104
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL451
+	.long	0x5b95
+	.long	0x525a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL452
+	.long	0x5bc2
+	.long	0x527e
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC95
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL454
+	.long	0x5b79
+	.uleb128 0x2c
+	.quad	.LVL591
+	.long	0x5e92
+	.long	0x52aa
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC98
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL594
+	.long	0x5bc2
+	.long	0x52ce
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC99
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL595
+	.long	0x5b79
+	.long	0x52ed
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC100
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL596
+	.long	0x614a
+	.long	0x5305
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL597
+	.long	0x6160
+	.long	0x5321
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL598
+	.long	0x61cf
+	.uleb128 0x2c
+	.quad	.LVL599
+	.long	0x614a
+	.long	0x5346
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x7c
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL600
+	.long	0x6395
+	.long	0x5368
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x6
+	.byte	0x91
+	.sleb128 -20392
+	.byte	0x94
+	.byte	0x4
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7d
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL601
+	.long	0x5bc2
+	.long	0x538c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC101
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL602
+	.long	0x5f1b
+	.long	0x53ab
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC102
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL606
+	.long	0x5bc2
+	.long	0x53cf
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC87
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL607
+	.long	0x5f1b
+	.uleb128 0x2c
+	.quad	.LVL608
+	.long	0x5b95
+	.long	0x53f3
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL609
+	.long	0x63b5
+	.uleb128 0x2c
+	.quad	.LVL621
+	.long	0x5bc2
+	.long	0x5424
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC114
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL622
+	.long	0x5f1b
+	.long	0x5443
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC115
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL623
+	.long	0x5b95
+	.long	0x545a
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL624
+	.long	0x63c1
+	.long	0x5472
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL628
+	.long	0x63d7
+	.long	0x5499
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x5
+	.byte	0x91
+	.sleb128 -20376
+	.byte	0x6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x51
+	.uleb128 0x2
+	.byte	0x7f
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL630
+	.long	0x6004
+	.long	0x54c2
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x5
+	.byte	0x91
+	.sleb128 -20376
+	.byte	0x6
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0xa
+	.byte	0x91
+	.sleb128 -20376
+	.byte	0x6
+	.byte	0x7f
+	.sleb128 0
+	.byte	0x22
+	.byte	0x31
+	.byte	0x1c
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL631
+	.long	0x5ded
+	.long	0x54da
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x76
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL632
+	.long	0x5bc2
+	.long	0x54fe
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC112
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL633
+	.long	0x5f1b
+	.long	0x551d
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC113
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL634
+	.long	0x5b95
+	.long	0x5534
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL635
+	.long	0x5bc2
+	.long	0x5558
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x34
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC110
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL636
+	.long	0x5b79
+	.long	0x5577
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC111
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL638
+	.long	0x5bc2
+	.long	0x559b
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC109
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL639
+	.long	0x5f1b
+	.long	0x55ba
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC52
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL640
+	.long	0x5b95
+	.long	0x55d1
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL641
+	.long	0x5bc2
+	.long	0x55f5
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC118
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL642
+	.long	0x5b95
+	.long	0x560c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL643
+	.long	0x5cb1
+	.long	0x5624
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL645
+	.long	0x5c3e
+	.uleb128 0x2c
+	.quad	.LVL646
+	.long	0x5bc2
+	.long	0x5655
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x33
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC128
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL647
+	.long	0x5b95
+	.long	0x566c
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL652
+	.long	0x1704
+	.long	0x5684
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL662
+	.long	0x5bc2
+	.long	0x56a8
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC117
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL663
+	.long	0x5b95
+	.long	0x56bf
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL665
+	.long	0x1c4f
+	.uleb128 0x2c
+	.quad	.LVL666
+	.long	0x5bc2
+	.long	0x56f0
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x35
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC42
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL667
+	.long	0x5de6
+	.uleb128 0x2c
+	.quad	.LVL668
+	.long	0x5b95
+	.long	0x5714
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x30
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL669
+	.long	0x5bc2
+	.long	0x5738
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x32
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x54
+	.uleb128 0x9
+	.byte	0x3
+	.quad	.LC116
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL670
+	.long	0x5b95
+	.long	0x574f
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x1
+	.byte	0x31
+	.byte	0
+	.uleb128 0x2c
+	.quad	.LVL676
+	.long	0x5cb1
+	.long	0x5767
+	.uleb128 0x2d
+	.uleb128 0x1
+	.byte	0x55
+	.uleb128 0x2
+	.byte	0x73
+	.sleb128 0
+	.byte	0
+	.uleb128 0x37
+	.quad	.LVL677
+	.long	0x5cd8
+	.uleb128 0x37
+	.quad	.LVL678
+	.long	0x5cd8
+	.uleb128 0x37
+	.quad	.LVL679
+	.long	0x63f6
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x2e9
+	.uleb128 0xa
+	.long	0x10a
+	.long	0x57a6
+	.uleb128 0x47
+	.long	0xc4
+	.value	0x1000
+	.byte	0
+	.uleb128 0x3b
+	.long	.LASF370
+	.byte	0x1
+	.byte	0x43
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	argv0
+	.uleb128 0x3b
+	.long	.LASF371
+	.byte	0x1
+	.byte	0x44
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	debug
+	.uleb128 0x3b
+	.long	.LASF164
+	.byte	0x1
+	.byte	0x45
+	.long	0x30
+	.uleb128 0x9
+	.byte	0x3
+	.quad	port
+	.uleb128 0x50
+	.string	"dir"
+	.byte	0x1
+	.byte	0x46
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	dir
+	.uleb128 0x3b
+	.long	.LASF372
+	.byte	0x1
+	.byte	0x47
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	data_dir
+	.uleb128 0x3b
+	.long	.LASF373
+	.byte	0x1
+	.byte	0x48
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	do_chroot
+	.uleb128 0x3b
+	.long	.LASF172
+	.byte	0x1
+	.byte	0x48
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	no_log
+	.uleb128 0x3b
+	.long	.LASF174
+	.byte	0x1
+	.byte	0x48
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	no_symlink_check
+	.uleb128 0x3b
+	.long	.LASF374
+	.byte	0x1
+	.byte	0x48
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	do_vhost
+	.uleb128 0x3b
+	.long	.LASF375
+	.byte	0x1
+	.byte	0x48
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	do_global_passwd
+	.uleb128 0x3b
+	.long	.LASF165
+	.byte	0x1
+	.byte	0x49
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	cgi_pattern
+	.uleb128 0x3b
+	.long	.LASF166
+	.byte	0x1
+	.byte	0x4a
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	cgi_limit
+	.uleb128 0x3b
+	.long	.LASF177
+	.byte	0x1
+	.byte	0x4b
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	url_pattern
+	.uleb128 0x3b
+	.long	.LASF179
+	.byte	0x1
+	.byte	0x4c
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	no_empty_referers
+	.uleb128 0x3b
+	.long	.LASF178
+	.byte	0x1
+	.byte	0x4d
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	local_pattern
+	.uleb128 0x3b
+	.long	.LASF376
+	.byte	0x1
+	.byte	0x4e
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	logfile
+	.uleb128 0x3b
+	.long	.LASF355
+	.byte	0x1
+	.byte	0x4f
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	throttlefile
+	.uleb128 0x3b
+	.long	.LASF230
+	.byte	0x1
+	.byte	0x50
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	hostname
+	.uleb128 0x3b
+	.long	.LASF377
+	.byte	0x1
+	.byte	0x51
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	pidfile
+	.uleb128 0x3b
+	.long	.LASF378
+	.byte	0x1
+	.byte	0x52
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	user
+	.uleb128 0x3b
+	.long	.LASF168
+	.byte	0x1
+	.byte	0x53
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	charset
+	.uleb128 0x50
+	.string	"p3p"
+	.byte	0x1
+	.byte	0x54
+	.long	0x104
+	.uleb128 0x9
+	.byte	0x3
+	.quad	p3p
+	.uleb128 0x3b
+	.long	.LASF169
+	.byte	0x1
+	.byte	0x55
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	max_age
+	.uleb128 0x3b
+	.long	.LASF379
+	.byte	0x1
+	.byte	0x5f
+	.long	0x599e
+	.uleb128 0x9
+	.byte	0x3
+	.quad	throttles
+	.uleb128 0x6
+	.byte	0x8
+	.long	0xdec
+	.uleb128 0x3b
+	.long	.LASF380
+	.byte	0x1
+	.byte	0x60
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	numthrottles
+	.uleb128 0x3b
+	.long	.LASF381
+	.byte	0x1
+	.byte	0x60
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	maxthrottles
+	.uleb128 0x3b
+	.long	.LASF382
+	.byte	0x1
+	.byte	0x74
+	.long	0xf0a
+	.uleb128 0x9
+	.byte	0x3
+	.quad	connects
+	.uleb128 0x3b
+	.long	.LASF383
+	.byte	0x1
+	.byte	0x75
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	num_connects
+	.uleb128 0x3b
+	.long	.LASF384
+	.byte	0x1
+	.byte	0x75
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	max_connects
+	.uleb128 0x3b
+	.long	.LASF385
+	.byte	0x1
+	.byte	0x75
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	first_free_connect
+	.uleb128 0x3b
+	.long	.LASF386
+	.byte	0x1
+	.byte	0x76
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	httpd_conn_count
+	.uleb128 0x50
+	.string	"hs"
+	.byte	0x1
+	.byte	0x80
+	.long	0xcb6
+	.uleb128 0x9
+	.byte	0x3
+	.quad	hs
+	.uleb128 0x3b
+	.long	.LASF387
+	.byte	0x1
+	.byte	0x87
+	.long	0x1cc
+	.uleb128 0x9
+	.byte	0x3
+	.quad	got_hup
+	.uleb128 0x3b
+	.long	.LASF388
+	.byte	0x1
+	.byte	0x87
+	.long	0x1cc
+	.uleb128 0x9
+	.byte	0x3
+	.quad	got_usr1
+	.uleb128 0x3b
+	.long	.LASF389
+	.byte	0x1
+	.byte	0x87
+	.long	0x1cc
+	.uleb128 0x9
+	.byte	0x3
+	.quad	watchdog_flag
+	.uleb128 0x51
+	.long	.LASF390
+	.byte	0xc
+	.byte	0xa5
+	.long	0x520
+	.uleb128 0x51
+	.long	.LASF391
+	.byte	0xc
+	.byte	0xa6
+	.long	0x520
+	.uleb128 0x51
+	.long	.LASF392
+	.byte	0xc
+	.byte	0xa7
+	.long	0x520
+	.uleb128 0x51
+	.long	.LASF393
+	.byte	0x15
+	.byte	0xfd
+	.long	0x104
+	.uleb128 0x51
+	.long	.LASF394
+	.byte	0x15
+	.byte	0xfe
+	.long	0x104
+	.uleb128 0x51
+	.long	.LASF395
+	.byte	0x15
+	.byte	0xff
+	.long	0x104
+	.uleb128 0x52
+	.long	.LASF396
+	.byte	0x15
+	.value	0x100
+	.long	0x104
+	.uleb128 0x52
+	.long	.LASF397
+	.byte	0x15
+	.value	0x101
+	.long	0x104
+	.uleb128 0x52
+	.long	.LASF398
+	.byte	0x15
+	.value	0x102
+	.long	0x104
+	.uleb128 0x51
+	.long	.LASF399
+	.byte	0x16
+	.byte	0x30
+	.long	0xceb
+	.uleb128 0x53
+	.long	.LASF400
+	.byte	0x1
+	.byte	0x81
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	terminate
+	.uleb128 0x53
+	.long	.LASF401
+	.byte	0x1
+	.byte	0x82
+	.long	0x153
+	.uleb128 0x9
+	.byte	0x3
+	.quad	start_time
+	.uleb128 0x53
+	.long	.LASF402
+	.byte	0x1
+	.byte	0x82
+	.long	0x153
+	.uleb128 0x9
+	.byte	0x3
+	.quad	stats_time
+	.uleb128 0x53
+	.long	.LASF403
+	.byte	0x1
+	.byte	0x83
+	.long	0x5a
+	.uleb128 0x9
+	.byte	0x3
+	.quad	stats_connections
+	.uleb128 0x53
+	.long	.LASF404
+	.byte	0x1
+	.byte	0x84
+	.long	0x132
+	.uleb128 0x9
+	.byte	0x3
+	.quad	stats_bytes
+	.uleb128 0x53
+	.long	.LASF405
+	.byte	0x1
+	.byte	0x85
+	.long	0x53
+	.uleb128 0x9
+	.byte	0x3
+	.quad	stats_simultaneous
+	.uleb128 0x54
+	.long	.LASF406
+	.byte	0xc
+	.value	0x163
+	.long	0x53
+	.long	0x5b95
+	.uleb128 0xd
+	.long	0x989
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF408
+	.byte	0x2
+	.value	0x220
+	.long	0x5ba7
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF409
+	.byte	0x18
+	.byte	0x3f
+	.long	0x5bc2
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0xe1
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF410
+	.byte	0x19
+	.byte	0xbe
+	.long	0x5bd9
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF411
+	.byte	0x15
+	.value	0x11a
+	.long	0x5beb
+	.uleb128 0xd
+	.long	0x5a
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF412
+	.byte	0x1a
+	.byte	0x35
+	.long	0x5bfc
+	.uleb128 0xd
+	.long	0x5a
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF413
+	.byte	0x18
+	.byte	0x53
+	.long	0x5c0d
+	.uleb128 0xd
+	.long	0x5a
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF414
+	.byte	0x16
+	.byte	0x6c
+	.long	0x5c1e
+	.uleb128 0xd
+	.long	0x5a
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF415
+	.byte	0xf
+	.byte	0x49
+	.long	0x53
+	.long	0x5c38
+	.uleb128 0xd
+	.long	0xd11
+	.uleb128 0xd
+	.long	0x5c38
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x56f
+	.uleb128 0x58
+	.long	.LASF464
+	.byte	0x1f
+	.byte	0x2f
+	.long	0x2be
+	.uleb128 0x56
+	.long	.LASF416
+	.byte	0x1a
+	.byte	0x2f
+	.long	0x5c5a
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x59
+	.long	.LASF433
+	.byte	0x16
+	.byte	0x66
+	.uleb128 0x57
+	.long	.LASF417
+	.byte	0x1b
+	.byte	0x8b
+	.long	0xb9
+	.long	0x5c80
+	.uleb128 0xd
+	.long	0xb9
+	.uleb128 0xd
+	.long	0x2be
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF418
+	.byte	0x15
+	.byte	0xc6
+	.long	0x53
+	.long	0x5c9f
+	.uleb128 0xd
+	.long	0xcb6
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0xeb3
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF419
+	.byte	0x15
+	.value	0x10e
+	.long	0x5cb1
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF420
+	.byte	0x16
+	.byte	0x5b
+	.long	0x5cc2
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF421
+	.byte	0x2
+	.value	0x1d7
+	.long	0xe1
+	.long	0x5cd8
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF422
+	.byte	0x18
+	.byte	0x42
+	.long	0x5ce9
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF423
+	.byte	0x15
+	.byte	0xf0
+	.long	0x5cff
+	.uleb128 0xd
+	.long	0xeb3
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF424
+	.byte	0x16
+	.byte	0x63
+	.long	0x5d10
+	.uleb128 0xd
+	.long	0xec9
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF425
+	.byte	0x1c
+	.byte	0xe8
+	.long	0x53
+	.long	0x5d2a
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF426
+	.byte	0x16
+	.byte	0x48
+	.long	0xec9
+	.long	0x5d53
+	.uleb128 0xd
+	.long	0xd11
+	.uleb128 0xd
+	.long	0xd84
+	.uleb128 0xd
+	.long	0xceb
+	.uleb128 0xd
+	.long	0x5a
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF427
+	.byte	0x15
+	.byte	0xe9
+	.long	0x5d64
+	.uleb128 0xd
+	.long	0xeb3
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF428
+	.byte	0x15
+	.value	0x10b
+	.long	0x104
+	.long	0x5d7a
+	.uleb128 0xd
+	.long	0x123d
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF429
+	.byte	0x15
+	.byte	0xf9
+	.long	0x5da4
+	.uleb128 0xd
+	.long	0xeb3
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x104
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF430
+	.byte	0x15
+	.byte	0xba
+	.long	0x5db5
+	.uleb128 0xd
+	.long	0xcb6
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF431
+	.byte	0x15
+	.byte	0xf5
+	.long	0x5dc6
+	.uleb128 0xd
+	.long	0xeb3
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF432
+	.byte	0x2
+	.value	0x1e8
+	.long	0x5dd8
+	.uleb128 0xd
+	.long	0xe1
+	.byte	0
+	.uleb128 0x59
+	.long	.LASF434
+	.byte	0x1a
+	.byte	0x32
+	.uleb128 0x59
+	.long	.LASF435
+	.byte	0x16
+	.byte	0x69
+	.uleb128 0x59
+	.long	.LASF436
+	.byte	0x19
+	.byte	0xaf
+	.uleb128 0x54
+	.long	.LASF437
+	.byte	0xe
+	.value	0x1ee
+	.long	0x53
+	.long	0x5e03
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x5a
+	.long	.LASF438
+	.byte	0x2
+	.value	0x202
+	.uleb128 0x54
+	.long	.LASF439
+	.byte	0xe
+	.value	0x1ad
+	.long	0x37
+	.long	0x5e21
+	.uleb128 0xd
+	.long	0x37
+	.byte	0
+	.uleb128 0x5b
+	.long	.LASF440
+	.byte	0x1d
+	.byte	0
+	.long	.LASF442
+	.long	0x3e
+	.long	0x5e3f
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x5b
+	.long	.LASF441
+	.byte	0x1d
+	.byte	0
+	.long	.LASF443
+	.long	0x3e
+	.long	0x5e5d
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF444
+	.byte	0x2
+	.byte	0xb8
+	.long	0x5a
+	.long	0x5e7c
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x4dc
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF445
+	.byte	0x17
+	.value	0x517
+	.long	0x104
+	.long	0x5e92
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF446
+	.byte	0xc
+	.value	0x10f
+	.long	0x989
+	.long	0x5ead
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF447
+	.byte	0xc
+	.value	0x272
+	.long	0x104
+	.long	0x5ecd
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x989
+	.byte	0
+	.uleb128 0x5b
+	.long	.LASF448
+	.byte	0x1d
+	.byte	0
+	.long	.LASF449
+	.long	0x104
+	.long	0x5eeb
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF450
+	.byte	0x1e
+	.value	0x218
+	.long	0x53
+	.long	0x5f06
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF451
+	.byte	0xc
+	.byte	0xec
+	.long	0x53
+	.long	0x5f1b
+	.uleb128 0xd
+	.long	0x989
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF452
+	.byte	0xc
+	.value	0x349
+	.long	0x5f2d
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x5b
+	.long	.LASF453
+	.byte	0x1d
+	.byte	0
+	.long	.LASF454
+	.long	0x53
+	.long	0x5f46
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF455
+	.byte	0xc
+	.value	0x181
+	.long	0x53
+	.long	0x5f67
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x15e
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF456
+	.byte	0x14
+	.value	0x298
+	.long	0x53
+	.long	0x5f8c
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x5f8c
+	.uleb128 0xd
+	.long	0x5f97
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x5f92
+	.uleb128 0x11
+	.long	0x7cf
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x84b
+	.uleb128 0x57
+	.long	.LASF457
+	.byte	0x1e
+	.byte	0x31
+	.long	0xe1
+	.long	0x5fbc
+	.uleb128 0xd
+	.long	0xe1
+	.uleb128 0xd
+	.long	0x557
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF458
+	.byte	0x14
+	.value	0x29e
+	.long	0x5fce
+	.uleb128 0xd
+	.long	0x84b
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF459
+	.byte	0x14
+	.value	0x2a1
+	.long	0x54c
+	.long	0x5fe4
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x5c
+	.long	.LASF460
+	.byte	0xc
+	.value	0x1c4
+	.long	.LASF507
+	.long	0x53
+	.long	0x6004
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF461
+	.byte	0x1e
+	.byte	0x80
+	.long	0x104
+	.long	0x601e
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF462
+	.byte	0x1e
+	.value	0x156
+	.long	0x104
+	.long	0x6039
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF463
+	.byte	0x2
+	.value	0x1e5
+	.long	0xe1
+	.long	0x6054
+	.uleb128 0xd
+	.long	0xe1
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x5d
+	.long	.LASF465
+	.byte	0xe
+	.value	0x271
+	.long	0xb9
+	.uleb128 0x57
+	.long	.LASF466
+	.byte	0x20
+	.byte	0x33
+	.long	0x148
+	.long	0x607f
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x607f
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x6085
+	.uleb128 0x11
+	.long	0x2c4
+	.uleb128 0x54
+	.long	.LASF467
+	.byte	0xe
+	.value	0x16b
+	.long	0x148
+	.long	0x60aa
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x557
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF468
+	.byte	0x21
+	.byte	0x22
+	.long	0x53
+	.long	0x60c4
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x55
+	.long	.LASF469
+	.byte	0x15
+	.value	0x108
+	.long	0x60e0
+	.uleb128 0xd
+	.long	0x4dc
+	.uleb128 0xd
+	.long	0x60e0
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x15e
+	.uleb128 0x54
+	.long	.LASF470
+	.byte	0xe
+	.value	0x165
+	.long	0x148
+	.long	0x6106
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0xe1
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF471
+	.byte	0x15
+	.byte	0xd2
+	.long	0x53
+	.long	0x611b
+	.uleb128 0xd
+	.long	0xeb3
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF472
+	.byte	0x15
+	.byte	0xdc
+	.long	0x53
+	.long	0x6130
+	.uleb128 0xd
+	.long	0xeb3
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF473
+	.byte	0x15
+	.byte	0xe6
+	.long	0x53
+	.long	0x614a
+	.uleb128 0xd
+	.long	0xeb3
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF474
+	.byte	0xc
+	.value	0x355
+	.long	0x53
+	.long	0x6160
+	.uleb128 0xd
+	.long	0x989
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF475
+	.byte	0x22
+	.byte	0x7a
+	.long	0x53
+	.long	0x617b
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF476
+	.byte	0x15
+	.byte	0xb4
+	.long	0x6191
+	.uleb128 0xd
+	.long	0xcb6
+	.uleb128 0xd
+	.long	0x989
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF477
+	.byte	0x1e
+	.value	0x106
+	.long	0x104
+	.long	0x61ac
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF478
+	.byte	0x19
+	.byte	0xb5
+	.long	0x61c7
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x5a
+	.long	.LASF479
+	.byte	0x5
+	.value	0x11f
+	.uleb128 0x5d
+	.long	.LASF480
+	.byte	0xe
+	.value	0x2b6
+	.long	0x6c
+	.uleb128 0x54
+	.long	.LASF481
+	.byte	0xe
+	.value	0x1fc
+	.long	0x104
+	.long	0x61f6
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF482
+	.byte	0xe
+	.value	0x3bc
+	.long	0x53
+	.long	0x6211
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x58
+	.long	.LASF483
+	.byte	0x18
+	.byte	0x3c
+	.long	0x53
+	.uleb128 0x49
+	.long	.LASF407
+	.byte	0x1
+	.value	0x25e
+	.long	0x53
+	.long	0x622e
+	.uleb128 0x4a
+	.byte	0
+	.uleb128 0x59
+	.long	.LASF484
+	.byte	0x16
+	.byte	0x45
+	.uleb128 0x57
+	.long	.LASF485
+	.byte	0x15
+	.byte	0xac
+	.long	0xcb6
+	.long	0x629f
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x123d
+	.uleb128 0xd
+	.long	0x123d
+	.uleb128 0xd
+	.long	0x30
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x989
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x104
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF249
+	.byte	0x5
+	.byte	0xba
+	.long	0x153
+	.long	0x62b4
+	.uleb128 0xd
+	.long	0x62b4
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x153
+	.uleb128 0x57
+	.long	.LASF486
+	.byte	0x23
+	.byte	0xb6
+	.long	0x53
+	.long	0x62d4
+	.uleb128 0xd
+	.long	0x15e
+	.uleb128 0xd
+	.long	0x62d4
+	.byte	0
+	.uleb128 0x6
+	.byte	0x8
+	.long	0x62da
+	.uleb128 0x11
+	.long	0x77
+	.uleb128 0x54
+	.long	.LASF487
+	.byte	0xe
+	.value	0x2e0
+	.long	0x53
+	.long	0x62f5
+	.uleb128 0xd
+	.long	0x77
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF488
+	.byte	0x23
+	.byte	0xcb
+	.long	0x53
+	.long	0x630f
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x77
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF489
+	.byte	0xe
+	.value	0x2cf
+	.long	0x53
+	.long	0x6325
+	.uleb128 0xd
+	.long	0x6c
+	.byte	0
+	.uleb128 0x56
+	.long	.LASF490
+	.byte	0x16
+	.byte	0x6f
+	.long	0x6336
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF491
+	.byte	0x16
+	.byte	0x56
+	.long	0x5a
+	.long	0x634b
+	.uleb128 0xd
+	.long	0xd11
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF492
+	.byte	0x18
+	.byte	0x48
+	.long	0x53
+	.long	0x6360
+	.uleb128 0xd
+	.long	0x5a
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF493
+	.byte	0x18
+	.byte	0x4b
+	.long	0x53
+	.long	0x6375
+	.uleb128 0xd
+	.long	0x53
+	.byte	0
+	.uleb128 0x58
+	.long	.LASF494
+	.byte	0x18
+	.byte	0x50
+	.long	0xe1
+	.uleb128 0x57
+	.long	.LASF495
+	.byte	0xb
+	.byte	0x75
+	.long	0x578f
+	.long	0x6395
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x54
+	.long	.LASF496
+	.byte	0xe
+	.value	0x1db
+	.long	0x53
+	.long	0x63b5
+	.uleb128 0xd
+	.long	0x53
+	.uleb128 0xd
+	.long	0x6c
+	.uleb128 0xd
+	.long	0x77
+	.byte	0
+	.uleb128 0x5d
+	.long	.LASF497
+	.byte	0xe
+	.value	0x2ae
+	.long	0xb9
+	.uleb128 0x54
+	.long	.LASF498
+	.byte	0xe
+	.value	0x3c3
+	.long	0x53
+	.long	0x63d7
+	.uleb128 0xd
+	.long	0x54c
+	.byte	0
+	.uleb128 0x57
+	.long	.LASF499
+	.byte	0x1e
+	.byte	0x92
+	.long	0x53
+	.long	0x63f6
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x54c
+	.uleb128 0xd
+	.long	0x15e
+	.byte	0
+	.uleb128 0x5e
+	.long	.LASF508
+	.byte	0x15
+	.byte	0xb7
+	.uleb128 0xd
+	.long	0xcb6
+	.byte	0
+	.byte	0
+	.section	.debug_abbrev,"",@progbits
+.Ldebug_abbrev0:
+	.uleb128 0x1
+	.uleb128 0x11
+	.byte	0x1
+	.uleb128 0x25
+	.uleb128 0xe
+	.uleb128 0x13
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x1b
+	.uleb128 0xe
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x10
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x2
+	.uleb128 0x24
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3e
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0xe
+	.byte	0
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x24
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3e
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0x8
+	.byte	0
+	.byte	0
+	.uleb128 0x4
+	.uleb128 0x16
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x5
+	.uleb128 0xf
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x6
+	.uleb128 0xf
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x7
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x8
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x9
+	.uleb128 0x35
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xa
+	.uleb128 0x1
+	.byte	0x1
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xb
+	.uleb128 0x21
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2f
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0xc
+	.uleb128 0x15
+	.byte	0x1
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xd
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xe
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0xf
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x10
+	.uleb128 0x16
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x11
+	.uleb128 0x26
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x12
+	.uleb128 0x26
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x13
+	.uleb128 0x16
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x14
+	.uleb128 0x4
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x15
+	.uleb128 0x28
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x1c
+	.uleb128 0xd
+	.byte	0
+	.byte	0
+	.uleb128 0x16
+	.uleb128 0x4
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x17
+	.uleb128 0x17
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x18
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x19
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1a
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0xb
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1b
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0xb
+	.byte	0
+	.byte	0
+	.uleb128 0x1c
+	.uleb128 0x13
+	.byte	0x1
+	.uleb128 0xb
+	.uleb128 0x5
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x1d
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x1e
+	.uleb128 0xd
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x1f
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x20
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x20
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x21
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x22
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x23
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x20
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x24
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x20
+	.uleb128 0xb
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x25
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x26
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x27
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x28
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x29
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2116
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2a
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x2b
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2c
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2d
+	.uleb128 0x410a
+	.byte	0
+	.uleb128 0x2
+	.uleb128 0x18
+	.uleb128 0x2111
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x2e
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x2f
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x30
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x2115
+	.uleb128 0x19
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x32
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x33
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x34
+	.uleb128 0x1d
+	.byte	0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x52
+	.uleb128 0x1
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x58
+	.uleb128 0xb
+	.uleb128 0x59
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x35
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x36
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x37
+	.uleb128 0x4109
+	.byte	0
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x38
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x39
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x3a
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x3b
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x3c
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x3d
+	.uleb128 0x1d
+	.byte	0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x58
+	.uleb128 0xb
+	.uleb128 0x59
+	.uleb128 0x5
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x3e
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.byte	0
+	.byte	0
+	.uleb128 0x40
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x41
+	.uleb128 0x4109
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x2115
+	.uleb128 0x19
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x42
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x43
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x44
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x45
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x46
+	.uleb128 0xb
+	.byte	0x1
+	.byte	0
+	.byte	0
+	.uleb128 0x47
+	.uleb128 0x21
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2f
+	.uleb128 0x5
+	.byte	0
+	.byte	0
+	.uleb128 0x48
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x7
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x49
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x4a
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.byte	0
+	.uleb128 0x4b
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x55
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x4c
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x4d
+	.uleb128 0x5
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x4e
+	.uleb128 0x410a
+	.byte	0
+	.uleb128 0x31
+	.uleb128 0x13
+	.uleb128 0x2111
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x4f
+	.uleb128 0xb
+	.byte	0x1
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x50
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0x8
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x51
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x52
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x53
+	.uleb128 0x34
+	.byte	0
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x2
+	.uleb128 0x18
+	.byte	0
+	.byte	0
+	.uleb128 0x54
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x55
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x56
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x57
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x58
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x59
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x5a
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x5b
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x6e
+	.uleb128 0xe
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x5c
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x6e
+	.uleb128 0xe
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.uleb128 0x1
+	.uleb128 0x13
+	.byte	0
+	.byte	0
+	.uleb128 0x5d
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0x5
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x49
+	.uleb128 0x13
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.uleb128 0x5e
+	.uleb128 0x2e
+	.byte	0x1
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x27
+	.uleb128 0x19
+	.uleb128 0x3c
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.byte	0
+	.section	.debug_loc,"",@progbits
+.Ldebug_loc0:
+.LLST0:
+	.quad	.LVL3
+	.quad	.LVL5
+	.value	0x1
+	.byte	0x55
+	.quad	0
+	.quad	0
+.LLST1:
+	.quad	.LVL3
+	.quad	.LVL4
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL4
+	.quad	.LFE68
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST2:
+	.quad	.LVL3
+	.quad	.LVL5
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL5
+	.quad	.LVL6-1
+	.value	0x1
+	.byte	0x54
+	.quad	0
+	.quad	0
+.LLST3:
+	.quad	.LVL7
+	.quad	.LVL12
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL22
+	.quad	.LVL24
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL26
+	.quad	.LVL27
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL27
+	.quad	.LVL28
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL28
+	.quad	.LFE72
+	.value	0x1
+	.byte	0x57
+	.quad	0
+	.quad	0
+.LLST4:
+	.quad	.LVL8
+	.quad	.LVL13
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL13
+	.quad	.LVL14-1
+	.value	0x9
+	.byte	0x3
+	.quad	stats_time
+	.quad	.LVL22
+	.quad	.LVL23
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL23
+	.quad	.LVL24
+	.value	0x2
+	.byte	0x75
+	.sleb128 0
+	.quad	.LVL24
+	.quad	.LVL25-1
+	.value	0x9
+	.byte	0x3
+	.quad	stats_time
+	.quad	0
+	.quad	0
+.LLST5:
+	.quad	.LVL9
+	.quad	.LVL14-1
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL22
+	.quad	.LVL25-1
+	.value	0x1
+	.byte	0x51
+	.quad	0
+	.quad	0
+.LLST6:
+	.quad	.LVL9
+	.quad	.LVL10
+	.value	0xe
+	.byte	0x70
+	.sleb128 0
+	.byte	0x3
+	.quad	stats_time
+	.byte	0x6
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL10
+	.quad	.LVL11
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL11
+	.quad	.LVL15
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL15
+	.quad	.LVL21
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL22
+	.quad	.LVL26
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST7:
+	.quad	.LVL14
+	.quad	.LVL15
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL15
+	.quad	.LVL21
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL25
+	.quad	.LVL26
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST8:
+	.quad	.LVL29
+	.quad	.LVL30
+	.value	0x1
+	.byte	0x55
+	.quad	0
+	.quad	0
+.LLST9:
+	.quad	.LVL29
+	.quad	.LVL31-1
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL31-1
+	.quad	.LFE71
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST10:
+	.quad	.LVL32
+	.quad	.LVL33-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL33-1
+	.quad	.LFE44
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST11:
+	.quad	.LVL34
+	.quad	.LVL36
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST12:
+	.quad	.LVL37
+	.quad	.LVL38
+	.value	0x1
+	.byte	0x55
+	.quad	0
+	.quad	0
+.LLST13:
+	.quad	.LVL37
+	.quad	.LVL39-1
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL39-1
+	.quad	.LFE70
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST14:
+	.quad	.LVL41
+	.quad	.LVL42-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL42-1
+	.quad	.LFE41
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST15:
+	.quad	.LVL43
+	.quad	.LVL47
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST16:
+	.quad	.LVL44
+	.quad	.LVL45
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST17:
+	.quad	.LVL48
+	.quad	.LVL49
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL49
+	.quad	.LVL54
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL54
+	.quad	.LVL55
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL55
+	.quad	.LVL63
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL63
+	.quad	.LVL64
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL64
+	.quad	.LFE57
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST18:
+	.quad	.LVL48
+	.quad	.LVL49
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL49
+	.quad	.LVL53
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL53
+	.quad	.LVL55
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL55
+	.quad	.LVL62
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL62
+	.quad	.LVL64
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL64
+	.quad	.LFE57
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST19:
+	.quad	.LVL50
+	.quad	.LVL52
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL55
+	.quad	.LVL61
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL64
+	.quad	.LVL66
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL70
+	.quad	.LFE57
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST20:
+	.quad	.LVL56
+	.quad	.LVL59
+	.value	0x3
+	.byte	0x53
+	.byte	0x93
+	.uleb128 0x8
+	.quad	0
+	.quad	0
+.LLST21:
+	.quad	.LVL73
+	.quad	.LVL74
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL74
+	.quad	.LVL80
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL80
+	.quad	.LFE66
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST22:
+	.quad	.LVL73
+	.quad	.LVL75-1
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL75-1
+	.quad	.LVL76
+	.value	0x2
+	.byte	0x91
+	.sleb128 -24
+	.quad	.LVL76
+	.quad	.LFE66
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST23:
+	.quad	.LVL77
+	.quad	.LVL80
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL80
+	.quad	.LFE66
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST24:
+	.quad	.LVL77
+	.quad	.LVL78
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST25:
+	.quad	.LVL81
+	.quad	.LVL82
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL82
+	.quad	.LVL89
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL89
+	.quad	.LVL91
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL91
+	.quad	.LVL93
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL93
+	.quad	.LVL95-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL95-1
+	.quad	.LVL95
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL95
+	.quad	.LFE65
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST26:
+	.quad	.LVL81
+	.quad	.LVL83-1
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL83-1
+	.quad	.LVL90
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL90
+	.quad	.LVL91
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL91
+	.quad	.LVL94
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL94
+	.quad	.LVL95-1
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL95-1
+	.quad	.LVL95
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL95
+	.quad	.LFE65
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST27:
+	.quad	.LVL98
+	.quad	.LVL103
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL109
+	.quad	.LVL112
+	.value	0x1
+	.byte	0x55
+	.quad	0
+	.quad	0
+.LLST28:
+	.quad	.LVL98
+	.quad	.LVL99
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL99
+	.quad	.LVL110
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL110
+	.quad	.LVL111
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL111
+	.quad	.LFE67
+	.value	0x1
+	.byte	0x5d
+	.quad	0
+	.quad	0
+.LLST29:
+	.quad	.LVL98
+	.quad	.LVL99
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL99
+	.quad	.LVL109
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL111
+	.quad	.LFE67
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST30:
+	.quad	.LVL99
+	.quad	.LVL101
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL102
+	.quad	.LVL109
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL111
+	.quad	.LFE67
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST31:
+	.quad	.LVL106
+	.quad	.LVL109
+	.value	0x1
+	.byte	0x5d
+	.quad	0
+	.quad	0
+.LLST32:
+	.quad	.LVL106
+	.quad	.LVL109
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST33:
+	.quad	.LVL116
+	.quad	.LVL117-1
+	.value	0x1
+	.byte	0x55
+	.quad	0
+	.quad	0
+.LLST34:
+	.quad	.LVL116
+	.quad	.LVL117-1
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL117-1
+	.quad	.LFE69
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST36:
+	.quad	.LVL119
+	.quad	.LVL120
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL120
+	.quad	.LVL126
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST37:
+	.quad	.LVL127
+	.quad	.LVL130
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST38:
+	.quad	.LVL135
+	.quad	.LVL136-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL136-1
+	.quad	.LFE40
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST39:
+	.quad	.LVL140
+	.quad	.LVL141
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL141
+	.quad	.LVL142-1
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL142-1
+	.quad	.LFE75
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST40:
+	.quad	.LVL144
+	.quad	.LVL145
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL145
+	.quad	.LVL146-1
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL146-1
+	.quad	.LFE76
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST41:
+	.quad	.LVL148
+	.quad	.LVL149-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL149-1
+	.quad	.LFE45
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST42:
+	.quad	.LVL150
+	.quad	.LVL152
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL153
+	.quad	.LFE45
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST43:
+	.quad	.LVL160
+	.quad	.LVL162-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL162-1
+	.quad	.LFE43
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST44:
+	.quad	.LVL161
+	.quad	.LVL162-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL162-1
+	.quad	.LFE43
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST45:
+	.quad	.LVL166
+	.quad	.LVL168
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL168
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL255
+	.quad	.LVL256
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL268
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL268
+	.quad	.LVL313
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL331
+	.quad	.LVL472
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL480
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL588
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST46:
+	.quad	.LVL166
+	.quad	.LVL167
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL167
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL255
+	.quad	.LVL256
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL272
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL272
+	.quad	.LVL313
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL331
+	.quad	.LVL472
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL480
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL588
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST47:
+	.quad	.LVL169
+	.quad	.LVL170
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL170
+	.quad	.LVL173
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL266
+	.quad	.LVL267
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST48:
+	.quad	.LVL446
+	.quad	.LVL448
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL451
+	.quad	.LVL452-1
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST49:
+	.quad	.LVL166
+	.quad	.LVL340
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL341
+	.quad	.LVL346
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL346
+	.quad	.LVL445
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL445
+	.quad	.LVL447
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL447
+	.quad	.LVL448
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL448
+	.quad	.LVL451
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL451
+	.quad	.LVL588
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	0
+	.quad	0
+.LLST50:
+	.quad	.LVL166
+	.quad	.LVL340
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL341
+	.quad	.LVL346
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL346
+	.quad	.LVL399
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL419
+	.quad	.LVL421
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL445
+	.quad	.LVL447
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL447
+	.quad	.LVL451
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL451
+	.quad	.LVL588
+	.value	0x4
+	.byte	0xa
+	.value	0x7fff
+	.byte	0x9f
+	.quad	.LVL588
+	.quad	.LVL613
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL620
+	.quad	.LVL642
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL661
+	.quad	.LVL664
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL668
+	.quad	.LVL670
+	.value	0x1
+	.byte	0x5d
+	.quad	0
+	.quad	0
+.LLST51:
+	.quad	.LVL348
+	.quad	.LVL349
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL349
+	.quad	.LVL390
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL419
+	.quad	.LVL421
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL448
+	.quad	.LVL451
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL592
+	.quad	.LVL593
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL593
+	.quad	.LVL603
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL604
+	.quad	.LVL605
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL605
+	.quad	.LVL613
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL620
+	.quad	.LVL642
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL661
+	.quad	.LVL663
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL668
+	.quad	.LVL670
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST52:
+	.quad	.LVL403
+	.quad	.LVL404-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL404-1
+	.quad	.LVL407
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL421
+	.quad	.LVL423
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL642
+	.quad	.LVL644
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL644
+	.quad	.LVL645-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL645-1
+	.quad	.LVL647
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL651
+	.quad	.LVL653
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST53:
+	.quad	.LVL392
+	.quad	.LVL393
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL393
+	.quad	.LVL394
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL394
+	.quad	.LVL395
+	.value	0x3
+	.byte	0x72
+	.sleb128 -1
+	.byte	0x9f
+	.quad	.LVL395
+	.quad	.LVL396
+	.value	0x1
+	.byte	0x52
+	.quad	0
+	.quad	0
+.LLST54:
+	.quad	.LVL409
+	.quad	.LVL411
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL411
+	.quad	.LVL419
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL423
+	.quad	.LVL445
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL613
+	.quad	.LVL618
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL673
+	.quad	.LVL675
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL675
+	.quad	.LVL676-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL676-1
+	.quad	.LFE47
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST55:
+	.quad	.LVL410
+	.quad	.LVL411
+	.value	0x2
+	.byte	0x70
+	.sleb128 8
+	.quad	.LVL411
+	.quad	.LVL412-1
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST56:
+	.quad	.LVL288
+	.quad	.LVL290
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL336
+	.quad	.LVL339
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL466
+	.quad	.LVL468
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST57:
+	.quad	.LVL285
+	.quad	.LVL286
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL336
+	.quad	.LVL339
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL466
+	.quad	.LVL468
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL471
+	.quad	.LVL472
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST58:
+	.quad	.LVL171
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL255
+	.quad	.LVL256
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL272
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL272
+	.quad	.LVL313
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL331
+	.quad	.LVL472
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL480
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL588
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x54
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST59:
+	.quad	.LVL171
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL255
+	.quad	.LVL256
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL268
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL268
+	.quad	.LVL313
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL331
+	.quad	.LVL472
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL480
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL588
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x4
+	.byte	0xf3
+	.uleb128 0x1
+	.byte	0x55
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST60:
+	.quad	.LVL172
+	.quad	.LVL173
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL173
+	.quad	.LVL184
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL184
+	.quad	.LVL186-1
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL186-1
+	.quad	.LVL209
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL209
+	.quad	.LVL211
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL211
+	.quad	.LVL214
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL214
+	.quad	.LVL215-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL256
+	.quad	.LVL264
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL266
+	.quad	.LVL267
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL316
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL316
+	.quad	.LVL317
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL317
+	.quad	.LVL324
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL472
+	.quad	.LVL476
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL476
+	.quad	.LVL477
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL487
+	.quad	.LVL490
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL495
+	.quad	.LVL498
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL498
+	.quad	.LVL499
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL499
+	.quad	.LVL500
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL512
+	.quad	.LVL516
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL516
+	.quad	.LVL517
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL520
+	.quad	.LVL526
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL526
+	.quad	.LVL527
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL530
+	.quad	.LVL532
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL532
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL536
+	.quad	.LVL538
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL538
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL555
+	.quad	.LVL558
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL558
+	.quad	.LVL559
+	.value	0x3
+	.byte	0x70
+	.sleb128 -1
+	.byte	0x9f
+	.quad	.LVL559
+	.quad	.LVL560
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL565
+	.quad	.LVL567
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL567
+	.quad	.LVL568
+	.value	0x3
+	.byte	0x70
+	.sleb128 -1
+	.byte	0x9f
+	.quad	.LVL568
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL575
+	.quad	.LVL577
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL577
+	.quad	.LVL578
+	.value	0x3
+	.byte	0x70
+	.sleb128 -1
+	.byte	0x9f
+	.quad	.LVL578
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20392
+	.quad	.LVL581
+	.quad	.LVL585
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL585
+	.quad	.LVL588
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST61:
+	.quad	.LVL174
+	.quad	.LVL175
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL477
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL487
+	.quad	.LVL490
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL495
+	.quad	.LVL500
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST62:
+	.quad	.LVL173
+	.quad	.LVL255
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL331
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL480
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST63:
+	.quad	.LVL173
+	.quad	.LVL175
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL177
+	.quad	.LVL178
+	.value	0x7
+	.byte	0x71
+	.sleb128 0
+	.byte	0x33
+	.byte	0x24
+	.byte	0x7c
+	.sleb128 0
+	.byte	0x22
+	.quad	.LVL178
+	.quad	.LVL186-1
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL209
+	.quad	.LVL213-1
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL214
+	.quad	.LVL215-1
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL313
+	.quad	.LVL317
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL472
+	.quad	.LVL477
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL487
+	.quad	.LVL490
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL495
+	.quad	.LVL500
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST64:
+	.quad	.LVL173
+	.quad	.LVL174
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL179
+	.quad	.LVL180
+	.value	0x3
+	.byte	0x78
+	.sleb128 -45
+	.byte	0x9f
+	.quad	.LVL180
+	.quad	.LVL181
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL181
+	.quad	.LVL182
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x56
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL214
+	.quad	.LVL215-1
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST65:
+	.quad	.LVL182
+	.quad	.LVL214
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL264
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL331
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST66:
+	.quad	.LVL182
+	.quad	.LVL186-1
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL209
+	.quad	.LVL213-1
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL313
+	.quad	.LVL317
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST67:
+	.quad	.LVL182
+	.quad	.LVL183
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x43
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL183
+	.quad	.LVL186-1
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL209
+	.quad	.LVL212
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x43
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL212
+	.quad	.LVL213-1
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x43
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL315
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x43
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL315
+	.quad	.LVL317
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x43
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x43
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST68:
+	.quad	.LVL185
+	.quad	.LVL188
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL317
+	.quad	.LVL319
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST69:
+	.quad	.LVL187
+	.quad	.LVL188
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL188
+	.quad	.LVL209
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL256
+	.quad	.LVL264
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL317
+	.quad	.LVL318-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL318-1
+	.quad	.LVL324
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x1
+	.byte	0x5e
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x1
+	.byte	0x5e
+	.quad	0
+	.quad	0
+.LLST70:
+	.quad	.LVL190
+	.quad	.LVL191
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL191
+	.quad	.LVL192
+	.value	0x5
+	.byte	0x91
+	.sleb128 -10064
+	.byte	0x9f
+	.quad	.LVL192
+	.quad	.LVL193-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL193-1
+	.quad	.LVL194
+	.value	0x5
+	.byte	0x91
+	.sleb128 -10064
+	.byte	0x9f
+	.quad	.LVL194
+	.quad	.LVL195
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL206
+	.quad	.LVL208
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL208
+	.quad	.LVL209
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST71:
+	.quad	.LVL198
+	.quad	.LVL209
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x1
+	.byte	0x5d
+	.quad	0
+	.quad	0
+.LLST72:
+	.quad	.LVL207
+	.quad	.LVL208
+	.value	0x6
+	.byte	0x7d
+	.sleb128 0
+	.byte	0x70
+	.sleb128 0
+	.byte	0x22
+	.byte	0x9f
+	.quad	.LVL208
+	.quad	.LVL209
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST73:
+	.quad	.LVL201
+	.quad	.LVL202
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL202
+	.quad	.LVL205
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL216
+	.quad	.LVL226
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL226
+	.quad	.LVL229
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL230
+	.quad	.LVL233
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL234
+	.quad	.LVL237
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST74:
+	.quad	.LVL191
+	.quad	.LVL209
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST75:
+	.quad	.LVL191
+	.quad	.LVL209
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST76:
+	.quad	.LVL191
+	.quad	.LVL209
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST77:
+	.quad	.LVL196
+	.quad	.LVL209
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST78:
+	.quad	.LVL196
+	.quad	.LVL209
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST79:
+	.quad	.LVL196
+	.quad	.LVL209
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL216
+	.quad	.LVL255
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL256
+	.quad	.LVL262
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL319
+	.quad	.LVL324
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL326
+	.quad	.LVL331
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL477
+	.quad	.LVL480
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL482
+	.quad	.LVL487
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL490
+	.quad	.LVL495
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL500
+	.quad	.LVL505
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL507
+	.quad	.LVL512
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL517
+	.quad	.LVL520
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL527
+	.quad	.LVL530
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL533
+	.quad	.LVL536
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL539
+	.quad	.LVL542
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL544
+	.quad	.LVL549
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL550
+	.quad	.LVL555
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL560
+	.quad	.LVL565
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL570
+	.quad	.LVL575
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	.LVL580
+	.quad	.LVL581
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST80:
+	.quad	.LVL204
+	.quad	.LVL205
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST81:
+	.quad	.LVL206
+	.quad	.LVL209
+	.value	0x3
+	.byte	0x8
+	.byte	0x20
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST82:
+	.quad	.LVL206
+	.quad	.LVL209
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST83:
+	.quad	.LVL206
+	.quad	.LVL209
+	.value	0x2
+	.byte	0x3a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST84:
+	.quad	.LVL218
+	.quad	.LVL221
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST85:
+	.quad	.LVL219
+	.quad	.LVL221
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST86:
+	.quad	.LVL223
+	.quad	.LVL226
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST87:
+	.quad	.LVL224
+	.quad	.LVL226
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST88:
+	.quad	.LVL225
+	.quad	.LVL226
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST89:
+	.quad	.LVL232
+	.quad	.LVL233
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST90:
+	.quad	.LVL243
+	.quad	.LVL244
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST91:
+	.quad	.LVL254
+	.quad	.LVL255
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST92:
+	.quad	.LVL261
+	.quad	.LVL262
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST93:
+	.quad	.LVL330
+	.quad	.LVL331
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST94:
+	.quad	.LVL486
+	.quad	.LVL487
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST95:
+	.quad	.LVL494
+	.quad	.LVL495
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST96:
+	.quad	.LVL504
+	.quad	.LVL505
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST97:
+	.quad	.LVL511
+	.quad	.LVL512
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST98:
+	.quad	.LVL548
+	.quad	.LVL549
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST99:
+	.quad	.LVL554
+	.quad	.LVL555
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST100:
+	.quad	.LVL564
+	.quad	.LVL565
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST101:
+	.quad	.LVL209
+	.quad	.LVL214
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL317
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST102:
+	.quad	.LVL209
+	.quad	.LVL213-1
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL313
+	.quad	.LVL317
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST103:
+	.quad	.LVL209
+	.quad	.LVL210
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x70
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL210
+	.quad	.LVL213-1
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL313
+	.quad	.LVL315
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x70
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL315
+	.quad	.LVL317
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x70
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x70
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST104:
+	.quad	.LVL211
+	.quad	.LVL213-1
+	.value	0xd
+	.byte	0x73
+	.sleb128 0
+	.byte	0x8
+	.byte	0x20
+	.byte	0x24
+	.byte	0x8
+	.byte	0x20
+	.byte	0x26
+	.byte	0x33
+	.byte	0x24
+	.byte	0x7c
+	.sleb128 0
+	.byte	0x22
+	.quad	0
+	.quad	0
+.LLST105:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST106:
+	.quad	.LVL313
+	.quad	.LVL317
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST107:
+	.quad	.LVL313
+	.quad	.LVL317
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST108:
+	.quad	.LVL313
+	.quad	.LVL314
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x64
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL314
+	.quad	.LVL317
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x64
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST109:
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST110:
+	.quad	.LVL324
+	.quad	.LVL326
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST111:
+	.quad	.LVL324
+	.quad	.LVL325
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x72
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL325
+	.quad	.LVL326
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST112:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL472
+	.quad	.LVL477
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL487
+	.quad	.LVL490
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL495
+	.quad	.LVL500
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x33
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST113:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL472
+	.quad	.LVL477
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL487
+	.quad	.LVL490
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL495
+	.quad	.LVL500
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST114:
+	.quad	.LVL472
+	.quad	.LVL473
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL473
+	.quad	.LVL474
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x64
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL474
+	.quad	.LVL475
+	.value	0xb
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x64
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL475
+	.quad	.LVL477
+	.value	0x8
+	.byte	0x79
+	.sleb128 3
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL487
+	.quad	.LVL489
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x64
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL495
+	.quad	.LVL496
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x64
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST115:
+	.quad	.LVL487
+	.quad	.LVL489
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL495
+	.quad	.LVL496
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST116:
+	.quad	.LVL487
+	.quad	.LVL489
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL495
+	.quad	.LVL496
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST117:
+	.quad	.LVL487
+	.quad	.LVL488
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x73
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL488
+	.quad	.LVL489
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST118:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL489
+	.quad	.LVL490
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL495
+	.quad	.LVL500
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST119:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL496
+	.quad	.LVL500
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST120:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL496
+	.quad	.LVL500
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL505
+	.quad	.LVL507
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL512
+	.quad	.LVL517
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL520
+	.quad	.LVL527
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST121:
+	.quad	.LVL496
+	.quad	.LVL497
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x75
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL497
+	.quad	.LVL499
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL499
+	.quad	.LVL500
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL505
+	.quad	.LVL506
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL513
+	.quad	.LVL515
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x75
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL523
+	.quad	.LVL525
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x75
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x75
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x75
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL543
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x75
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST122:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL512
+	.quad	.LVL513
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL520
+	.quad	.LVL523
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x34
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST123:
+	.quad	.LVL513
+	.quad	.LVL517
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL523
+	.quad	.LVL527
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST124:
+	.quad	.LVL513
+	.quad	.LVL517
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL523
+	.quad	.LVL527
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST125:
+	.quad	.LVL513
+	.quad	.LVL514
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x63
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL514
+	.quad	.LVL517
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL523
+	.quad	.LVL525
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x63
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x63
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x63
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL543
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x63
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST126:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL520
+	.quad	.LVL523
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST127:
+	.quad	.LVL264
+	.quad	.LVL265
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL520
+	.quad	.LVL523
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL549
+	.quad	.LVL550
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST128:
+	.quad	.LVL520
+	.quad	.LVL521
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL521
+	.quad	.LVL522
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x67
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL522
+	.quad	.LVL523
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST129:
+	.quad	.LVL523
+	.quad	.LVL527
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST130:
+	.quad	.LVL523
+	.quad	.LVL527
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST131:
+	.quad	.LVL523
+	.quad	.LVL524
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x74
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL524
+	.quad	.LVL527
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x74
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x74
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL543
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x74
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST132:
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST133:
+	.quad	.LVL530
+	.quad	.LVL533
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST134:
+	.quad	.LVL530
+	.quad	.LVL531
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x68
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL531
+	.quad	.LVL533
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST135:
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST136:
+	.quad	.LVL536
+	.quad	.LVL539
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST137:
+	.quad	.LVL536
+	.quad	.LVL537
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x6c
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL537
+	.quad	.LVL539
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST138:
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST139:
+	.quad	.LVL542
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST140:
+	.quad	.LVL506
+	.quad	.LVL507
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL542
+	.quad	.LVL543
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x76
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL543
+	.quad	.LVL544
+	.value	0x1
+	.byte	0x51
+	.quad	0
+	.quad	0
+.LLST141:
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST142:
+	.quad	.LVL555
+	.quad	.LVL560
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST143:
+	.quad	.LVL555
+	.quad	.LVL556
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL556
+	.quad	.LVL557
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL557
+	.quad	.LVL560
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL565
+	.quad	.LVL569
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL569
+	.quad	.LVL570
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL579
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL579
+	.quad	.LVL580
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL586
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL586
+	.quad	.LVL587-1
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x69
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST144:
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST145:
+	.quad	.LVL565
+	.quad	.LVL570
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST146:
+	.quad	.LVL565
+	.quad	.LVL566
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x54
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL566
+	.quad	.LVL570
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL575
+	.quad	.LVL579
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x54
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL579
+	.quad	.LVL580
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x54
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL586
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x54
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL586
+	.quad	.LVL587-1
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x54
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST147:
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST148:
+	.quad	.LVL575
+	.quad	.LVL580
+	.value	0x1
+	.byte	0x59
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST149:
+	.quad	.LVL575
+	.quad	.LVL576
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x50
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL576
+	.quad	.LVL580
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL581
+	.quad	.LVL586
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x50
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL586
+	.quad	.LVL587-1
+	.value	0xb
+	.byte	0x79
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x50
+	.byte	0x1c
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST150:
+	.quad	.LVL581
+	.quad	.LVL588
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST151:
+	.quad	.LVL581
+	.quad	.LVL587-1
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST152:
+	.quad	.LVL581
+	.quad	.LVL582
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x4d
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL582
+	.quad	.LVL583
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	.LVL585
+	.quad	.LVL587-1
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST153:
+	.quad	.LVL583
+	.quad	.LVL585
+	.value	0x2
+	.byte	0x32
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST154:
+	.quad	.LVL583
+	.quad	.LVL585
+	.value	0x1
+	.byte	0x59
+	.quad	0
+	.quad	0
+.LLST155:
+	.quad	.LVL583
+	.quad	.LVL584
+	.value	0x9
+	.byte	0x71
+	.sleb128 0
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x44
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL584
+	.quad	.LVL585
+	.value	0x8
+	.byte	0x79
+	.sleb128 2
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST156:
+	.quad	.LVL585
+	.quad	.LVL587-1
+	.value	0xd
+	.byte	0x73
+	.sleb128 0
+	.byte	0x8
+	.byte	0x20
+	.byte	0x24
+	.byte	0x8
+	.byte	0x20
+	.byte	0x26
+	.byte	0x33
+	.byte	0x24
+	.byte	0x7c
+	.sleb128 0
+	.byte	0x22
+	.quad	0
+	.quad	0
+.LLST157:
+	.quad	.LVL269
+	.quad	.LVL313
+	.value	0x3
+	.byte	0x8
+	.byte	0x80
+	.byte	0x9f
+	.quad	.LVL331
+	.quad	.LVL340
+	.value	0x3
+	.byte	0x8
+	.byte	0x80
+	.byte	0x9f
+	.quad	.LVL341
+	.quad	.LVL453
+	.value	0x3
+	.byte	0x8
+	.byte	0x80
+	.byte	0x9f
+	.quad	.LVL455
+	.quad	.LVL472
+	.value	0x3
+	.byte	0x8
+	.byte	0x80
+	.byte	0x9f
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x3
+	.byte	0x8
+	.byte	0x80
+	.byte	0x9f
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x3
+	.byte	0x8
+	.byte	0x80
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST159:
+	.quad	.LVL269
+	.quad	.LVL313
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10684
+	.sleb128 0
+	.quad	.LVL331
+	.quad	.LVL340
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10684
+	.sleb128 0
+	.quad	.LVL341
+	.quad	.LVL453
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10684
+	.sleb128 0
+	.quad	.LVL455
+	.quad	.LVL472
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10684
+	.sleb128 0
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10684
+	.sleb128 0
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10684
+	.sleb128 0
+	.quad	0
+	.quad	0
+.LLST160:
+	.quad	.LVL269
+	.quad	.LVL283
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL283
+	.quad	.LVL285-1
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL285-1
+	.quad	.LVL313
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL331
+	.quad	.LVL340
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL341
+	.quad	.LVL373
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL373
+	.quad	.LVL375
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL375
+	.quad	.LVL453
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL455
+	.quad	.LVL472
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20208
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST161:
+	.quad	.LVL269
+	.quad	.LVL313
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10668
+	.sleb128 0
+	.quad	.LVL331
+	.quad	.LVL340
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10668
+	.sleb128 0
+	.quad	.LVL341
+	.quad	.LVL453
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10668
+	.sleb128 0
+	.quad	.LVL455
+	.quad	.LVL472
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10668
+	.sleb128 0
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10668
+	.sleb128 0
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x6
+	.byte	0xf2
+	.long	.Ldebug_info0+10668
+	.sleb128 0
+	.quad	0
+	.quad	0
+.LLST162:
+	.quad	.LVL269
+	.quad	.LVL287
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL287
+	.quad	.LVL288-1
+	.value	0x1
+	.byte	0x58
+	.quad	.LVL288-1
+	.quad	.LVL313
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL331
+	.quad	.LVL340
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL341
+	.quad	.LVL374
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL374
+	.quad	.LVL376
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL376
+	.quad	.LVL453
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL455
+	.quad	.LVL472
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	.LVL588
+	.quad	.LFE47
+	.value	0x5
+	.byte	0x91
+	.sleb128 -20336
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST163:
+	.quad	.LVL272
+	.quad	.LVL275
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL275
+	.quad	.LVL276
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL331
+	.quad	.LVL332-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL332-1
+	.quad	.LVL336
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL336
+	.quad	.LVL337-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL337-1
+	.quad	.LVL337
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST164:
+	.quad	.LVL274
+	.quad	.LVL277
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL277
+	.quad	.LVL285-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL336
+	.quad	.LVL337
+	.value	0x1
+	.byte	0x5d
+	.quad	.LVL468
+	.quad	.LVL470-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL471
+	.quad	.LVL472
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL480
+	.quad	.LVL481-1
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST165:
+	.quad	.LVL273
+	.quad	.LVL277
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL277
+	.quad	.LVL284
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL336
+	.quad	.LVL337
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL468
+	.quad	.LVL469
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL471
+	.quad	.LVL472
+	.value	0x1
+	.byte	0x54
+	.quad	.LVL480
+	.quad	.LVL481-1
+	.value	0x1
+	.byte	0x54
+	.quad	0
+	.quad	0
+.LLST166:
+	.quad	.LVL273
+	.quad	.LVL277
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL277
+	.quad	.LVL291
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL336
+	.quad	.LVL337
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL464
+	.quad	.LVL472
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL480
+	.quad	.LVL482
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST167:
+	.quad	.LVL292
+	.quad	.LVL313
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL341
+	.quad	.LVL344
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL455
+	.quad	.LVL464
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST168:
+	.quad	.LVL294
+	.quad	.LVL295-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL295-1
+	.quad	.LVL313
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL341
+	.quad	.LVL344
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL455
+	.quad	.LVL460
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL460
+	.quad	.LVL461
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL461
+	.quad	.LVL464
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST169:
+	.quad	.LVL297
+	.quad	.LVL298
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL305
+	.quad	.LVL306-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL307
+	.quad	.LVL308
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST170:
+	.quad	.LVL299
+	.quad	.LVL301
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL301
+	.quad	.LVL302
+	.value	0x3
+	.byte	0x71
+	.sleb128 1
+	.byte	0x9f
+	.quad	.LVL341
+	.quad	.LVL342
+	.value	0x1
+	.byte	0x51
+	.quad	0
+	.quad	0
+.LLST171:
+	.quad	.LVL310
+	.quad	.LVL311-1
+	.value	0x1
+	.byte	0x55
+	.quad	.LVL311-1
+	.quad	.LVL313
+	.value	0x5
+	.byte	0x91
+	.sleb128 -15072
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST172:
+	.quad	.LVL311
+	.quad	.LVL312
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL312
+	.quad	.LVL313
+	.value	0x2
+	.byte	0x7d
+	.sleb128 0
+	.quad	0
+	.quad	0
+.LLST173:
+	.quad	.LVL347
+	.quad	.LVL349
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL588
+	.quad	.LVL603
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	.LVL604
+	.quad	.LVL608
+	.value	0x2
+	.byte	0x39
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST174:
+	.quad	.LVL357
+	.quad	.LVL358-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL358-1
+	.quad	.LVL360
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL610
+	.quad	.LVL611
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL611
+	.quad	.LVL613
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST175:
+	.quad	.LVL613
+	.quad	.LVL618
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL684
+	.quad	.LVL709
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST176:
+	.quad	.LVL613
+	.quad	.LVL618
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL684
+	.quad	.LVL709
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST177:
+	.quad	.LVL686
+	.quad	.LVL687-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL702
+	.quad	.LVL703
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST178:
+	.quad	.LVL687
+	.quad	.LVL689
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL699
+	.quad	.LVL700-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL704
+	.quad	.LVL707-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL708
+	.quad	.LVL709
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST179:
+	.quad	.LVL697
+	.quad	.LVL699
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST180:
+	.quad	.LVL692
+	.quad	.LVL693
+	.value	0x8
+	.byte	0x7e
+	.sleb128 0
+	.byte	0x76
+	.sleb128 80
+	.byte	0x6
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL693
+	.quad	.LVL699
+	.value	0x1
+	.byte	0x5e
+	.quad	0
+	.quad	0
+.LLST181:
+	.quad	.LVL613
+	.quad	.LVL616
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL685
+	.quad	.LVL696
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL699
+	.quad	.LVL709
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST182:
+	.quad	.LVL690
+	.quad	.LVL691
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST183:
+	.quad	.LVL705
+	.quad	.LVL706
+	.value	0x6
+	.byte	0x71
+	.sleb128 0
+	.byte	0x70
+	.sleb128 0
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL706
+	.quad	.LVL707-1
+	.value	0x1
+	.byte	0x51
+	.quad	.LVL707-1
+	.quad	.LVL709
+	.value	0x1
+	.byte	0x5e
+	.quad	0
+	.quad	0
+.LLST184:
+	.quad	.LVL413
+	.quad	.LVL416
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL423
+	.quad	.LVL445
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL673
+	.quad	.LVL675
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL711
+	.quad	.LFE47
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST185:
+	.quad	.LVL413
+	.quad	.LVL416
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL423
+	.quad	.LVL445
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL673
+	.quad	.LVL675
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL711
+	.quad	.LFE47
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST186:
+	.quad	.LVL425
+	.quad	.LVL426
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL673
+	.quad	.LVL674-1
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST187:
+	.quad	.LVL414
+	.quad	.LVL416
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL423
+	.quad	.LVL445
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL673
+	.quad	.LVL675
+	.value	0x1
+	.byte	0x5c
+	.quad	.LVL711
+	.quad	.LFE47
+	.value	0x1
+	.byte	0x5c
+	.quad	0
+	.quad	0
+.LLST188:
+	.quad	.LVL415
+	.quad	.LVL416
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST189:
+	.quad	.LVL415
+	.quad	.LVL416
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST190:
+	.quad	.LVL429
+	.quad	.LVL445
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL711
+	.quad	.LFE47
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST191:
+	.quad	.LVL430
+	.quad	.LVL431
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL431
+	.quad	.LVL438
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL443
+	.quad	.LVL445
+	.value	0x1
+	.byte	0x5f
+	.quad	.LVL711
+	.quad	.LVL712
+	.value	0x1
+	.byte	0x5f
+	.quad	0
+	.quad	0
+.LLST192:
+	.quad	.LVL433
+	.quad	.LVL434
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL435
+	.quad	.LVL436
+	.value	0x1
+	.byte	0x52
+	.quad	0
+	.quad	0
+.LLST193:
+	.quad	.LVL712
+	.quad	.LVL713
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	.LVL716
+	.quad	.LFE47
+	.value	0x2
+	.byte	0x30
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST194:
+	.quad	.LVL588
+	.quad	.LVL603
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL604
+	.quad	.LVL608
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST195:
+	.quad	.LVL588
+	.quad	.LVL591-1
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+.LLST196:
+	.quad	.LVL588
+	.quad	.LVL589
+	.value	0xb
+	.byte	0x70
+	.sleb128 0
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x2d
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL589
+	.quad	.LVL590
+	.value	0x8
+	.byte	0x70
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST197:
+	.quad	.LVL625
+	.quad	.LVL630
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL634
+	.quad	.LVL637
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST198:
+	.quad	.LVL625
+	.quad	.LVL628-1
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL628-1
+	.quad	.LVL629
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20376
+	.quad	.LVL629
+	.quad	.LVL630-1
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL630-1
+	.quad	.LVL630
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20376
+	.quad	.LVL634
+	.quad	.LVL635-1
+	.value	0x1
+	.byte	0x52
+	.quad	.LVL635-1
+	.quad	.LVL637
+	.value	0x4
+	.byte	0x91
+	.sleb128 -20376
+	.quad	0
+	.quad	0
+.LLST199:
+	.quad	.LVL625
+	.quad	.LVL626
+	.value	0xb
+	.byte	0x72
+	.sleb128 0
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x2d
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL626
+	.quad	.LVL627
+	.value	0x8
+	.byte	0x72
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST200:
+	.quad	.LVL657
+	.quad	.LVL658-1
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL658-1
+	.quad	.LVL661
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL670
+	.quad	.LVL671
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL671
+	.quad	.LVL673
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST201:
+	.quad	.LVL648
+	.quad	.LVL650
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL653
+	.quad	.LVL661
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	.LVL670
+	.quad	.LVL673
+	.value	0x2
+	.byte	0x31
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST202:
+	.quad	.LVL648
+	.quad	.LVL650
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL653
+	.quad	.LVL654
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL654
+	.quad	.LVL655-1
+	.value	0x9
+	.byte	0x3
+	.quad	logfile
+	.quad	0
+	.quad	0
+.LLST203:
+	.quad	.LVL648
+	.quad	.LVL649
+	.value	0xb
+	.byte	0x70
+	.sleb128 0
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x8
+	.byte	0x2d
+	.byte	0x1c
+	.byte	0x9f
+	.quad	.LVL649
+	.quad	.LVL650
+	.value	0x8
+	.byte	0x70
+	.sleb128 1
+	.byte	0x94
+	.byte	0x1
+	.byte	0x8
+	.byte	0xff
+	.byte	0x1a
+	.byte	0x9f
+	.quad	0
+	.quad	0
+.LLST204:
+	.quad	.LVL680
+	.quad	.LVL684
+	.value	0x1
+	.byte	0x53
+	.quad	.LVL709
+	.quad	.LVL711
+	.value	0x1
+	.byte	0x53
+	.quad	0
+	.quad	0
+.LLST205:
+	.quad	.LVL680
+	.quad	.LVL684
+	.value	0x1
+	.byte	0x56
+	.quad	.LVL709
+	.quad	.LVL711
+	.value	0x1
+	.byte	0x56
+	.quad	0
+	.quad	0
+.LLST206:
+	.quad	.LVL681
+	.quad	.LVL682
+	.value	0x1
+	.byte	0x50
+	.quad	.LVL709
+	.quad	.LVL710-1
+	.value	0x1
+	.byte	0x50
+	.quad	0
+	.quad	0
+	.section	.debug_aranges,"",@progbits
+	.long	0x4c
+	.value	0x2
+	.long	.Ldebug_info0
+	.byte	0x8
+	.byte	0
+	.value	0
+	.value	0
+	.quad	.Ltext0
+	.quad	.Letext0-.Ltext0
+	.quad	.Ltext_cold0
+	.quad	.Letext_cold0-.Ltext_cold0
+	.quad	.LFB47
+	.quad	.LFE47-.LFB47
+	.quad	0
+	.quad	0
+	.section	.debug_ranges,"",@progbits
+.Ldebug_ranges0:
+	.quad	.LBB188
+	.quad	.LBE188
+	.quad	.LBB192
+	.quad	.LBE192
+	.quad	.LBB193
+	.quad	.LBE193
+	.quad	0
+	.quad	0
+	.quad	.LBB391
+	.quad	.LBE391
+	.quad	.LBB591
+	.quad	.LBE591
+	.quad	.LBB618
+	.quad	.LBE618
+	.quad	.LBB620
+	.quad	.LBE620
+	.quad	0
+	.quad	0
+	.quad	.LBB398
+	.quad	.LBE398
+	.quad	.LBB507
+	.quad	.LBE507
+	.quad	.LBB512
+	.quad	.LBE512
+	.quad	.LBB516
+	.quad	.LBE516
+	.quad	.LBB519
+	.quad	.LBE519
+	.quad	.LBB522
+	.quad	.LBE522
+	.quad	.LBB523
+	.quad	.LBE523
+	.quad	.LBB527
+	.quad	.LBE527
+	.quad	.LBB534
+	.quad	.LBE534
+	.quad	.LBB536
+	.quad	.LBE536
+	.quad	.LBB540
+	.quad	.LBE540
+	.quad	.LBB545
+	.quad	.LBE545
+	.quad	.LBB548
+	.quad	.LBE548
+	.quad	.LBB551
+	.quad	.LBE551
+	.quad	.LBB554
+	.quad	.LBE554
+	.quad	.LBB556
+	.quad	.LBE556
+	.quad	.LBB559
+	.quad	.LBE559
+	.quad	.LBB562
+	.quad	.LBE562
+	.quad	.LBB565
+	.quad	.LBE565
+	.quad	0
+	.quad	0
+	.quad	.LBB411
+	.quad	.LBE411
+	.quad	.LBB433
+	.quad	.LBE433
+	.quad	0
+	.quad	0
+	.quad	.LBB414
+	.quad	.LBE414
+	.quad	.LBB486
+	.quad	.LBE486
+	.quad	0
+	.quad	0
+	.quad	.LBB434
+	.quad	.LBE434
+	.quad	.LBB473
+	.quad	.LBE473
+	.quad	0
+	.quad	0
+	.quad	.LBB513
+	.quad	.LBE513
+	.quad	.LBB555
+	.quad	.LBE555
+	.quad	0
+	.quad	0
+	.quad	.LBB526
+	.quad	.LBE526
+	.quad	.LBB528
+	.quad	.LBE528
+	.quad	0
+	.quad	0
+	.quad	.LBB529
+	.quad	.LBE529
+	.quad	.LBB533
+	.quad	.LBE533
+	.quad	.LBB535
+	.quad	.LBE535
+	.quad	0
+	.quad	0
+	.quad	.LBB575
+	.quad	.LBE575
+	.quad	.LBB581
+	.quad	.LBE581
+	.quad	.LBB592
+	.quad	.LBE592
+	.quad	.LBB617
+	.quad	.LBE617
+	.quad	.LBB619
+	.quad	.LBE619
+	.quad	0
+	.quad	0
+	.quad	.LBB582
+	.quad	.LBE582
+	.quad	.LBB593
+	.quad	.LBE593
+	.quad	.LBB594
+	.quad	.LBE594
+	.quad	.LBB616
+	.quad	.LBE616
+	.quad	0
+	.quad	0
+	.quad	.LBB584
+	.quad	.LBE584
+	.quad	.LBB587
+	.quad	.LBE587
+	.quad	0
+	.quad	0
+	.quad	.LBB596
+	.quad	.LBE596
+	.quad	.LBB623
+	.quad	.LBE623
+	.quad	0
+	.quad	0
+	.quad	.LBB597
+	.quad	.LBE597
+	.quad	.LBB624
+	.quad	.LBE624
+	.quad	.LBB639
+	.quad	.LBE639
+	.quad	0
+	.quad	0
+	.quad	.LBB603
+	.quad	.LBE603
+	.quad	.LBB615
+	.quad	.LBE615
+	.quad	.LBB635
+	.quad	.LBE635
+	.quad	.LBB641
+	.quad	.LBE641
+	.quad	0
+	.quad	0
+	.quad	.LBB607
+	.quad	.LBE607
+	.quad	.LBB610
+	.quad	.LBE610
+	.quad	0
+	.quad	0
+	.quad	.LBB627
+	.quad	.LBE627
+	.quad	.LBB633
+	.quad	.LBE633
+	.quad	.LBB634
+	.quad	.LBE634
+	.quad	0
+	.quad	0
+	.quad	.LBB636
+	.quad	.LBE636
+	.quad	.LBB640
+	.quad	.LBE640
+	.quad	0
+	.quad	0
+	.quad	.Ltext0
+	.quad	.Letext0
+	.quad	.Ltext_cold0
+	.quad	.Letext_cold0
+	.quad	.LFB47
+	.quad	.LFE47
+	.quad	0
+	.quad	0
+	.section	.debug_line,"",@progbits
+.Ldebug_line0:
+	.section	.debug_str,"MS",@progbits,1
+.LASF102:
+	.string	"socklen_t"
+.LASF53:
+	.string	"st_ctim"
+.LASF244:
+	.string	"TimerStruct"
+.LASF30:
+	.string	"size_t"
+.LASF16:
+	.string	"sizetype"
+.LASF143:
+	.string	"sockaddr_in6"
+.LASF196:
+	.string	"expnfilename"
+.LASF195:
+	.string	"origfilename"
+.LASF49:
+	.string	"st_blksize"
+.LASF50:
+	.string	"st_blocks"
+.LASF21:
+	.string	"__ssize_t"
+.LASF431:
+	.string	"httpd_destroy_conn"
+.LASF378:
+	.string	"user"
+.LASF365:
+	.string	"handle_linger"
+.LASF154:
+	.string	"ai_addrlen"
+.LASF125:
+	.string	"SHUT_RDWR"
+.LASF139:
+	.string	"sin_family"
+.LASF318:
+	.string	"tnum"
+.LASF141:
+	.string	"sin_addr"
+.LASF80:
+	.string	"_IO_save_end"
+.LASF268:
+	.string	"linger_timer"
+.LASF425:
+	.string	"shutdown"
+.LASF332:
+	.string	"really_clear_connection"
+.LASF9:
+	.string	"__gid_t"
+.LASF150:
+	.string	"ai_flags"
+.LASF179:
+	.string	"no_empty_referers"
+.LASF108:
+	.string	"SOCK_RAW"
+.LASF52:
+	.string	"st_mtim"
+.LASF440:
+	.string	"__builtin_strspn"
+.LASF29:
+	.string	"time_t"
+.LASF147:
+	.string	"sin6_addr"
+.LASF173:
+	.string	"logfp"
+.LASF73:
+	.string	"_IO_write_base"
+.LASF165:
+	.string	"cgi_pattern"
+.LASF375:
+	.string	"do_global_passwd"
+.LASF157:
+	.string	"ai_next"
+.LASF89:
+	.string	"_lock"
+.LASF454:
+	.string	"puts"
+.LASF419:
+	.string	"httpd_set_ndelay"
+.LASF266:
+	.string	"active_at"
+.LASF508:
+	.string	"httpd_unlisten"
+.LASF229:
+	.string	"type"
+.LASF39:
+	.string	"stat"
+.LASF479:
+	.string	"tzset"
+.LASF78:
+	.string	"_IO_save_base"
+.LASF273:
+	.string	"connecttab"
+.LASF331:
+	.string	"listen_fd"
+.LASF156:
+	.string	"ai_canonname"
+.LASF471:
+	.string	"httpd_got_request"
+.LASF82:
+	.string	"_chain"
+.LASF28:
+	.string	"ssize_t"
+.LASF500:
+	.string	"GNU C 4.9.2 -mtune=generic -march=x86-64 -g -O2"
+.LASF417:
+	.string	"waitpid"
+.LASF86:
+	.string	"_cur_column"
+.LASF314:
+	.string	"aiv4"
+.LASF313:
+	.string	"aiv6"
+.LASF456:
+	.string	"getaddrinfo"
+.LASF302:
+	.string	"handle_usr1"
+.LASF328:
+	.string	"handle_usr2"
+.LASF242:
+	.string	"ClientData"
+.LASF7:
+	.string	"__dev_t"
+.LASF420:
+	.string	"tmr_run"
+.LASF444:
+	.string	"strtol"
+.LASF25:
+	.string	"uid_t"
+.LASF206:
+	.string	"contenttype"
+.LASF474:
+	.string	"fileno"
+.LASF185:
+	.string	"read_idx"
+.LASF299:
+	.string	"atoi"
+.LASF323:
+	.string	"secs"
+.LASF166:
+	.string	"cgi_limit"
+.LASF438:
+	.string	"abort"
+.LASF403:
+	.string	"stats_connections"
+.LASF489:
+	.string	"setuid"
+.LASF59:
+	.string	"passwd"
+.LASF228:
+	.string	"contentlength"
+.LASF111:
+	.string	"SOCK_DCCP"
+.LASF6:
+	.string	"long int"
+.LASF109:
+	.string	"SOCK_RDM"
+.LASF408:
+	.string	"exit"
+.LASF457:
+	.string	"memmove"
+.LASF181:
+	.string	"initialized"
+.LASF174:
+	.string	"no_symlink_check"
+.LASF231:
+	.string	"mime_flag"
+.LASF282:
+	.string	"oldstr"
+.LASF396:
+	.string	"httpd_err408form"
+.LASF65:
+	.string	"pw_dir"
+.LASF490:
+	.string	"tmr_prepare_timeval"
+.LASF441:
+	.string	"__builtin_strcspn"
+.LASF385:
+	.string	"first_free_connect"
+.LASF98:
+	.string	"_IO_marker"
+.LASF506:
+	.string	"main"
+.LASF343:
+	.string	"__s2_len"
+.LASF345:
+	.string	"read_config"
+.LASF360:
+	.string	"handle_send"
+.LASF325:
+	.string	"up_secs"
+.LASF418:
+	.string	"httpd_get_conn"
+.LASF193:
+	.string	"decodedurl"
+.LASF361:
+	.string	"max_bytes"
+.LASF163:
+	.string	"server_hostname"
+.LASF256:
+	.string	"min_limit"
+.LASF322:
+	.string	"thttpd_logstats"
+.LASF66:
+	.string	"pw_shell"
+.LASF4:
+	.string	"signed char"
+.LASF19:
+	.string	"__blksize_t"
+.LASF126:
+	.string	"uint8_t"
+.LASF397:
+	.string	"httpd_err503title"
+.LASF68:
+	.string	"_IO_FILE"
+.LASF346:
+	.string	"filename"
+.LASF44:
+	.string	"st_uid"
+.LASF498:
+	.string	"chroot"
+.LASF466:
+	.string	"writev"
+.LASF110:
+	.string	"SOCK_SEQPACKET"
+.LASF283:
+	.string	"newstr"
+.LASF473:
+	.string	"httpd_start_request"
+.LASF470:
+	.string	"read"
+.LASF0:
+	.string	"unsigned char"
+.LASF478:
+	.string	"openlog"
+.LASF226:
+	.string	"if_modified_since"
+.LASF47:
+	.string	"st_rdev"
+.LASF451:
+	.string	"fclose"
+.LASF455:
+	.string	"snprintf"
+.LASF400:
+	.string	"terminate"
+.LASF329:
+	.string	"occasional"
+.LASF430:
+	.string	"httpd_terminate"
+.LASF64:
+	.string	"pw_gecos"
+.LASF412:
+	.string	"mmc_logstats"
+.LASF274:
+	.string	"clear_throttles"
+.LASF357:
+	.string	"handle_read"
+.LASF180:
+	.string	"httpd_server"
+.LASF148:
+	.string	"sin6_scope_id"
+.LASF270:
+	.string	"bytes"
+.LASF238:
+	.string	"should_linger"
+.LASF211:
+	.string	"remoteuser"
+.LASF311:
+	.string	"portstr"
+.LASF277:
+	.string	"value"
+.LASF504:
+	.string	"__socket_type"
+.LASF305:
+	.string	"sa4_len"
+.LASF22:
+	.string	"char"
+.LASF106:
+	.string	"SOCK_STREAM"
+.LASF183:
+	.string	"read_buf"
+.LASF121:
+	.string	"__ss_align"
+.LASF169:
+	.string	"max_age"
+.LASF338:
+	.string	"parse_args"
+.LASF388:
+	.string	"got_usr1"
+.LASF222:
+	.string	"maxhostdir"
+.LASF255:
+	.string	"max_limit"
+.LASF210:
+	.string	"authorization"
+.LASF503:
+	.string	"_IO_lock_t"
+.LASF480:
+	.string	"getuid"
+.LASF138:
+	.string	"sockaddr_in"
+.LASF35:
+	.string	"timeval"
+.LASF481:
+	.string	"getcwd"
+.LASF395:
+	.string	"httpd_err408title"
+.LASF413:
+	.string	"fdwatch_logstats"
+.LASF140:
+	.string	"sin_port"
+.LASF103:
+	.string	"timezone"
+.LASF374:
+	.string	"do_vhost"
+.LASF321:
+	.string	"wakeup_connection"
+.LASF11:
+	.string	"__mode_t"
+.LASF411:
+	.string	"httpd_logstats"
+.LASF258:
+	.string	"bytes_since_avg"
+.LASF275:
+	.string	"no_value_required"
+.LASF186:
+	.string	"checked_idx"
+.LASF70:
+	.string	"_IO_read_ptr"
+.LASF214:
+	.string	"maxorigfilename"
+.LASF364:
+	.string	"newlen"
+.LASF145:
+	.string	"sin6_port"
+.LASF101:
+	.string	"_pos"
+.LASF23:
+	.string	"__socklen_t"
+.LASF390:
+	.string	"stdin"
+.LASF487:
+	.string	"setgid"
+.LASF464:
+	.string	"__errno_location"
+.LASF117:
+	.string	"sa_family"
+.LASF142:
+	.string	"sin_zero"
+.LASF363:
+	.string	"elapsed"
+.LASF342:
+	.string	"__s1_len"
+.LASF81:
+	.string	"_markers"
+.LASF355:
+	.string	"throttlefile"
+.LASF167:
+	.string	"cgi_count"
+.LASF175:
+	.string	"vhost"
+.LASF291:
+	.string	"__accept3"
+.LASF421:
+	.string	"malloc"
+.LASF234:
+	.string	"tildemapped"
+.LASF324:
+	.string	"logstats"
+.LASF496:
+	.string	"fchown"
+.LASF468:
+	.string	"match"
+.LASF459:
+	.string	"gai_strerror"
+.LASF306:
+	.string	"gotv4P"
+.LASF36:
+	.string	"tv_usec"
+.LASF130:
+	.string	"in_addr_t"
+.LASF162:
+	.string	"binding_hostname"
+.LASF257:
+	.string	"rate"
+.LASF319:
+	.string	"cnum"
+.LASF239:
+	.string	"conn_fd"
+.LASF188:
+	.string	"method"
+.LASF236:
+	.string	"last_byte_index"
+.LASF90:
+	.string	"_offset"
+.LASF224:
+	.string	"maxresponse"
+.LASF45:
+	.string	"st_gid"
+.LASF484:
+	.string	"tmr_init"
+.LASF450:
+	.string	"strcasecmp"
+.LASF356:
+	.string	"re_open_logfile"
+.LASF261:
+	.string	"conn_state"
+.LASF248:
+	.string	"periodic"
+.LASF393:
+	.string	"httpd_err400title"
+.LASF348:
+	.string	"__a0"
+.LASF349:
+	.string	"__a1"
+.LASF350:
+	.string	"__a2"
+.LASF426:
+	.string	"tmr_create"
+.LASF493:
+	.string	"fdwatch_check_fd"
+.LASF376:
+	.string	"logfile"
+.LASF443:
+	.string	"strcspn"
+.LASF402:
+	.string	"stats_time"
+.LASF3:
+	.string	"long unsigned int"
+.LASF437:
+	.string	"chdir"
+.LASF461:
+	.string	"strcpy"
+.LASF189:
+	.string	"status"
+.LASF84:
+	.string	"_flags2"
+.LASF123:
+	.string	"SHUT_RD"
+.LASF48:
+	.string	"st_size"
+.LASF309:
+	.string	"gotv6P"
+.LASF72:
+	.string	"_IO_read_base"
+.LASF247:
+	.string	"msecs"
+.LASF407:
+	.string	"sigset"
+.LASF469:
+	.string	"httpd_realloc_str"
+.LASF347:
+	.string	"line"
+.LASF439:
+	.string	"alarm"
+.LASF97:
+	.string	"_unused2"
+.LASF505:
+	.string	"handle_newconnect"
+.LASF151:
+	.string	"ai_family"
+.LASF458:
+	.string	"freeaddrinfo"
+.LASF152:
+	.string	"ai_socktype"
+.LASF335:
+	.string	"linger_clear_connection"
+.LASF58:
+	.string	"iov_len"
+.LASF465:
+	.string	"getpid"
+.LASF467:
+	.string	"write"
+.LASF445:
+	.string	"__strdup"
+.LASF168:
+	.string	"charset"
+.LASF339:
+	.string	"argc"
+.LASF233:
+	.string	"got_range"
+.LASF85:
+	.string	"_old_offset"
+.LASF341:
+	.string	"argn"
+.LASF286:
+	.string	"__strspn_c1"
+.LASF287:
+	.string	"__strspn_c2"
+.LASF290:
+	.string	"__strspn_c3"
+.LASF20:
+	.string	"__blkcnt_t"
+.LASF221:
+	.string	"maxreqhost"
+.LASF198:
+	.string	"pathinfo"
+.LASF104:
+	.string	"tz_minuteswest"
+.LASF207:
+	.string	"reqhost"
+.LASF10:
+	.string	"__ino_t"
+.LASF344:
+	.string	"__s1"
+.LASF394:
+	.string	"httpd_err400form"
+.LASF267:
+	.string	"wakeup_timer"
+.LASF133:
+	.string	"__u6_addr8"
+.LASF194:
+	.string	"protocol"
+.LASF398:
+	.string	"httpd_err503form"
+.LASF38:
+	.string	"long long int"
+.LASF424:
+	.string	"tmr_cancel"
+.LASF477:
+	.string	"strrchr"
+.LASF472:
+	.string	"httpd_parse_request"
+.LASF120:
+	.string	"ss_family"
+.LASF501:
+	.string	"thttpd.c"
+.LASF265:
+	.string	"started_at"
+.LASF56:
+	.string	"iovec"
+.LASF259:
+	.string	"num_sending"
+.LASF492:
+	.string	"fdwatch"
+.LASF75:
+	.string	"_IO_write_end"
+.LASF182:
+	.string	"client_addr"
+.LASF386:
+	.string	"httpd_conn_count"
+.LASF310:
+	.string	"hints"
+.LASF453:
+	.string	"__builtin_puts"
+.LASF288:
+	.string	"__accept1"
+.LASF289:
+	.string	"__accept2"
+.LASF284:
+	.string	"__accept"
+.LASF178:
+	.string	"local_pattern"
+.LASF235:
+	.string	"first_byte_index"
+.LASF295:
+	.string	"__reject1"
+.LASF296:
+	.string	"__reject2"
+.LASF298:
+	.string	"__reject3"
+.LASF76:
+	.string	"_IO_buf_base"
+.LASF2:
+	.string	"unsigned int"
+.LASF315:
+	.string	"handle_hup"
+.LASF452:
+	.string	"perror"
+.LASF271:
+	.string	"end_byte_index"
+.LASF448:
+	.string	"__builtin_strchr"
+.LASF46:
+	.string	"__pad0"
+.LASF62:
+	.string	"pw_uid"
+.LASF92:
+	.string	"__pad2"
+.LASF93:
+	.string	"__pad3"
+.LASF94:
+	.string	"__pad4"
+.LASF95:
+	.string	"__pad5"
+.LASF100:
+	.string	"_sbuf"
+.LASF27:
+	.string	"pid_t"
+.LASF359:
+	.string	"check_throttles"
+.LASF272:
+	.string	"next_byte_index"
+.LASF205:
+	.string	"cookie"
+.LASF18:
+	.string	"__suseconds_t"
+.LASF114:
+	.string	"SOCK_NONBLOCK"
+.LASF384:
+	.string	"max_connects"
+.LASF243:
+	.string	"TimerProc"
+.LASF124:
+	.string	"SHUT_WR"
+.LASF220:
+	.string	"maxaccepte"
+.LASF358:
+	.string	"e_strdup"
+.LASF69:
+	.string	"_flags"
+.LASF312:
+	.string	"gaierr"
+.LASF218:
+	.string	"maxquery"
+.LASF96:
+	.string	"_mode"
+.LASF292:
+	.string	"__strcspn_c1"
+.LASF294:
+	.string	"__strcspn_c2"
+.LASF297:
+	.string	"__strcspn_c3"
+.LASF495:
+	.string	"getpwnam"
+.LASF216:
+	.string	"maxencodings"
+.LASF136:
+	.string	"in6_addr"
+.LASF42:
+	.string	"st_nlink"
+.LASF26:
+	.string	"off_t"
+.LASF399:
+	.string	"JunkClientData"
+.LASF404:
+	.string	"stats_bytes"
+.LASF54:
+	.string	"__unused"
+.LASF372:
+	.string	"data_dir"
+.LASF279:
+	.string	"handle_alrm"
+.LASF199:
+	.string	"query"
+.LASF330:
+	.string	"handle_chld"
+.LASF203:
+	.string	"accepte"
+.LASF442:
+	.string	"strspn"
+.LASF155:
+	.string	"ai_addr"
+.LASF204:
+	.string	"acceptl"
+.LASF499:
+	.string	"strncmp"
+.LASF144:
+	.string	"sin6_family"
+.LASF428:
+	.string	"httpd_ntoa"
+.LASF67:
+	.string	"FILE"
+.LASF15:
+	.string	"__pid_t"
+.LASF433:
+	.string	"tmr_cleanup"
+.LASF40:
+	.string	"st_dev"
+.LASF232:
+	.string	"one_one"
+.LASF34:
+	.string	"timespec"
+.LASF446:
+	.string	"fopen"
+.LASF107:
+	.string	"SOCK_DGRAM"
+.LASF429:
+	.string	"httpd_send_err"
+.LASF177:
+	.string	"url_pattern"
+.LASF362:
+	.string	"coast"
+.LASF37:
+	.string	"long long unsigned int"
+.LASF115:
+	.string	"sa_family_t"
+.LASF161:
+	.string	"httpd_sockaddr"
+.LASF263:
+	.string	"tnums"
+.LASF127:
+	.string	"uint16_t"
+.LASF13:
+	.string	"__off_t"
+.LASF316:
+	.string	"update_throttles"
+.LASF415:
+	.string	"gettimeofday"
+.LASF158:
+	.string	"sa_in"
+.LASF118:
+	.string	"sa_data"
+.LASF262:
+	.string	"next_free_connect"
+.LASF485:
+	.string	"httpd_initialize"
+.LASF377:
+	.string	"pidfile"
+.LASF327:
+	.string	"show_stats"
+.LASF502:
+	.string	"/u/cs/ugrad/mckenna/Documents/CS35L/week8/sthttpd-2.26.4/src"
+.LASF387:
+	.string	"got_hup"
+.LASF225:
+	.string	"responselen"
+.LASF371:
+	.string	"debug"
+.LASF116:
+	.string	"sockaddr"
+.LASF17:
+	.string	"__time_t"
+.LASF149:
+	.string	"addrinfo"
+.LASF230:
+	.string	"hostname"
+.LASF293:
+	.string	"__reject"
+.LASF497:
+	.string	"setsid"
+.LASF241:
+	.string	"httpd_conn"
+.LASF460:
+	.string	"sscanf"
+.LASF79:
+	.string	"_IO_backup_base"
+.LASF88:
+	.string	"_shortbuf"
+.LASF63:
+	.string	"pw_gid"
+.LASF213:
+	.string	"maxdecodedurl"
+.LASF379:
+	.string	"throttles"
+.LASF463:
+	.string	"realloc"
+.LASF380:
+	.string	"numthrottles"
+.LASF304:
+	.string	"sa4P"
+.LASF201:
+	.string	"useragent"
+.LASF99:
+	.string	"_next"
+.LASF14:
+	.string	"__off64_t"
+.LASF131:
+	.string	"in_addr"
+.LASF381:
+	.string	"maxthrottles"
+.LASF301:
+	.string	"finish_connection"
+.LASF462:
+	.string	"strstr"
+.LASF423:
+	.string	"httpd_close_conn"
+.LASF340:
+	.string	"argv"
+.LASF336:
+	.string	"shut_down"
+.LASF326:
+	.string	"stats_secs"
+.LASF370:
+	.string	"argv0"
+.LASF449:
+	.string	"strchr"
+.LASF191:
+	.string	"bytes_sent"
+.LASF77:
+	.string	"_IO_buf_end"
+.LASF486:
+	.string	"setgroups"
+.LASF366:
+	.string	"num_ready"
+.LASF435:
+	.string	"tmr_destroy"
+.LASF280:
+	.string	"tind"
+.LASF436:
+	.string	"closelog"
+.LASF137:
+	.string	"__in6_u"
+.LASF113:
+	.string	"SOCK_CLOEXEC"
+.LASF276:
+	.string	"name"
+.LASF475:
+	.string	"fcntl"
+.LASF406:
+	.string	"fprintf"
+.LASF164:
+	.string	"port"
+.LASF354:
+	.string	"read_throttlefile"
+.LASF285:
+	.string	"__result"
+.LASF112:
+	.string	"SOCK_PACKET"
+.LASF369:
+	.string	"pidfp"
+.LASF122:
+	.string	"__ss_padding"
+.LASF119:
+	.string	"sockaddr_storage"
+.LASF392:
+	.string	"stderr"
+.LASF5:
+	.string	"short int"
+.LASF200:
+	.string	"referer"
+.LASF254:
+	.string	"pattern"
+.LASF337:
+	.string	"handle_term"
+.LASF223:
+	.string	"maxremoteuser"
+.LASF373:
+	.string	"do_chroot"
+.LASF33:
+	.string	"tv_nsec"
+.LASF307:
+	.string	"sa6P"
+.LASF320:
+	.string	"usage"
+.LASF409:
+	.string	"fdwatch_add_fd"
+.LASF416:
+	.string	"mmc_cleanup"
+.LASF87:
+	.string	"_vtable_offset"
+.LASF333:
+	.string	"clear_connection"
+.LASF61:
+	.string	"pw_passwd"
+.LASF334:
+	.string	"idle"
+.LASF170:
+	.string	"listen4_fd"
+.LASF55:
+	.string	"__sighandler_t"
+.LASF382:
+	.string	"connects"
+.LASF507:
+	.string	"__isoc99_sscanf"
+.LASF202:
+	.string	"accept"
+.LASF171:
+	.string	"listen6_fd"
+.LASF383:
+	.string	"num_connects"
+.LASF300:
+	.string	"__nptr"
+.LASF212:
+	.string	"response"
+.LASF269:
+	.string	"wouldblock_delay"
+.LASF187:
+	.string	"checked_state"
+.LASF264:
+	.string	"numtnums"
+.LASF159:
+	.string	"sa_in6"
+.LASF389:
+	.string	"watchdog_flag"
+.LASF60:
+	.string	"pw_name"
+.LASF43:
+	.string	"st_mode"
+.LASF8:
+	.string	"__uid_t"
+.LASF190:
+	.string	"bytes_to_send"
+.LASF488:
+	.string	"initgroups"
+.LASF71:
+	.string	"_IO_read_end"
+.LASF422:
+	.string	"fdwatch_del_fd"
+.LASF208:
+	.string	"hdrhost"
+.LASF132:
+	.string	"s_addr"
+.LASF237:
+	.string	"keep_alive"
+.LASF134:
+	.string	"__u6_addr16"
+.LASF197:
+	.string	"encodings"
+.LASF128:
+	.string	"uint32_t"
+.LASF494:
+	.string	"fdwatch_get_next_client_data"
+.LASF83:
+	.string	"_fileno"
+.LASF105:
+	.string	"tz_dsttime"
+.LASF219:
+	.string	"maxaccept"
+.LASF281:
+	.string	"oerrno"
+.LASF414:
+	.string	"tmr_logstats"
+.LASF432:
+	.string	"free"
+.LASF482:
+	.string	"daemon"
+.LASF410:
+	.string	"syslog"
+.LASF215:
+	.string	"maxexpnfilename"
+.LASF401:
+	.string	"start_time"
+.LASF245:
+	.string	"timer_proc"
+.LASF1:
+	.string	"short unsigned int"
+.LASF391:
+	.string	"stdout"
+.LASF253:
+	.string	"Timer"
+.LASF427:
+	.string	"httpd_write_response"
+.LASF227:
+	.string	"range_if"
+.LASF57:
+	.string	"iov_base"
+.LASF303:
+	.string	"lookup_hostname"
+.LASF260:
+	.string	"throttletab"
+.LASF317:
+	.string	"nowP"
+.LASF74:
+	.string	"_IO_write_ptr"
+.LASF249:
+	.string	"time"
+.LASF246:
+	.string	"client_data"
+.LASF31:
+	.string	"int64_t"
+.LASF308:
+	.string	"sa6_len"
+.LASF367:
+	.string	"gotv4"
+.LASF368:
+	.string	"gotv6"
+.LASF351:
+	.string	"__r0"
+.LASF352:
+	.string	"__r1"
+.LASF353:
+	.string	"__r2"
+.LASF176:
+	.string	"global_passwd"
+.LASF447:
+	.string	"fgets"
+.LASF135:
+	.string	"__u6_addr32"
+.LASF41:
+	.string	"st_ino"
+.LASF12:
+	.string	"__nlink_t"
+.LASF172:
+	.string	"no_log"
+.LASF252:
+	.string	"hash"
+.LASF160:
+	.string	"sa_stor"
+.LASF146:
+	.string	"sin6_flowinfo"
+.LASF434:
+	.string	"mmc_destroy"
+.LASF491:
+	.string	"tmr_mstimeout"
+.LASF251:
+	.string	"next"
+.LASF24:
+	.string	"gid_t"
+.LASF91:
+	.string	"__pad1"
+.LASF240:
+	.string	"file_address"
+.LASF250:
+	.string	"prev"
+.LASF32:
+	.string	"tv_sec"
+.LASF153:
+	.string	"ai_protocol"
+.LASF483:
+	.string	"fdwatch_get_nfiles"
+.LASF129:
+	.string	"in_port_t"
+.LASF405:
+	.string	"stats_simultaneous"
+.LASF217:
+	.string	"maxpathinfo"
+.LASF278:
+	.string	"value_required"
+.LASF184:
+	.string	"read_size"
+.LASF51:
+	.string	"st_atim"
+.LASF209:
+	.string	"hostdir"
+.LASF476:
+	.string	"httpd_set_logfp"
+.LASF192:
+	.string	"encodedurl"
 	.ident	"GCC: (GNU) 4.9.2"
 	.section	.note.GNU-stack,"",@progbits
