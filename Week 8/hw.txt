McKenna Galvin
604290168
hw.txt
CS 35L week8

For the first part of the homework, I got access to an Amazon EC2 instance
and reproduced the web server crash that I did during the lab. These are the
steps I took to do so:

SETTING UP THE SERVER:
- created an account with AWS
- launched an instance of Amazon EC2 (selected Red Hat AMI, created key pair
  named 35L.pem)
  	instance ID is i-6eee4b62
	public DNS is ec2-54-148-111-29.us-west-2.compute.amazonaws.com

SSH INTO SERVER:
- launched terminal window on my Mac
- cd Desktop
- chmod 400 35L.pem
- ssh -i 35L.pem ec2-user@ec2-54-148-111-29.us-west-2.compute.amazonaws.com

TRANSFERRING THE STHTTPD FILES:
- launched new terminal window on my Mac, changed directory to Desktop where
  I had the key and the sthttpd-2.26.4 folder
- for simplicity's sake I manually applied the patch to thttpd.c when the file
  was just on my Mac before I transferred it over to the server using scp
  (since emacs wouldn't be installed on the server)
- scp -i 35L.pem -r sthttpd-2.26.4
  ec2-user@ec2-54-148-111-29.us-west-2.compute.amazonaws.com:~

COMPILING THE SOIURCE CODE:
- changed back to terminal that was ssh'ing to the server
- sudo yum install gcc
- cd sthtttpd-2.26.4
- ./configure CFLAGS="-g"
- make

I then followed the same steps that I did in the lab to crash the server
(ran thttpd, opened up gdb, attached the process, opened up another terminal to
send the crashing request)

-------------------------------------------------------------------------------

The second part of the homework involves ranking the seriousness of each
vulnerability. From most urgent vulnerability to least:

1. VU #252743: GNU Bash shell executes commands in exported functions
   I listed this as most serious because Bash is widespread on many types of
   devices like Linux and OSX, and many network services utilize Bash. This
   vulnerability allows attackers to execute arbitrary code, so it is
   particularly dangerous. Pretty much every computer user uses the services
   of at least one of the vendors affected, so its effect is very widespread.

2. VU #720951: OpenSSL "heartbleed"
   I ranked this one next because it makes sensitive information like
   keys and protected information vulnerable. Since so many companies and
   vendors like Amazon use OpenSSL and keep track of data like credit card
   numbers, its effect was widespread, as seen in the amount of media coverage
   this vulnerability had when the security flaw was first discovered last
   April. Also, the attacks can be remote, so the hacker does not have to have
   physical access to a computer to retrieve information.
   In addition, even if the attacker is not successful on the first attempt,
   they can repeatedly try again, so there's a higher chance that he will be
   successful in retrieving the information.

3. VU #505120: Microsoft Schannel vulnerable to remote code execution
   I ranked this one a little lower because from the wording of the
   vulnerability details, it sounds like the "specially crafted network packets
   might be complicated to form, and only Windows is affected, not other
   operating systems. Still, it is an urgent vulnerability because the attacker
   can be remote and could potentially execute any arbitrary code they wanted.
   
4. VU #213119: KDC fails to properly validate PAC signature
   I ranked this one lower because the person exploiting the vulnerability must
   first be a user on the domain, and the computers that they can exploit are
   limited to those on the domain.

5. VU #447516: Linksys SMART WiFi firmware
   I ranked this one last because only Linksys is affected, so it doesn't have
   as much of a widespread impact as the others do. Still, it is a significant
   vulnerability because the attacker can be remote and can read the
   .htpasswd.
   The JNAP action that is called must be specially crafted, so it may be
   harder for an attacker to figure out how to exploit the vulnerability in
   order to read the sensitive information.
